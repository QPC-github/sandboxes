import {
  render,
  renderToDOM
} from "./chunk-TZNG4R5G.mjs";

// src/docs/config.ts
import { SourceType as SourceType2, enhanceArgTypes } from "@storybook/docs-tools";

// src/docs/sourceDecorator.ts
import { SNIPPET_RENDERED, SourceType } from "@storybook/docs-tools";
import { addons, useEffect } from "@storybook/addons";
import { dedent } from "ts-dedent";
function skipSourceRender(context) {
  const sourceParams = context?.parameters.docs?.source;
  const isArgsStory = context?.parameters.__isArgsStory;
  if (sourceParams?.type === SourceType.DYNAMIC) {
    return false;
  }
  return !isArgsStory || sourceParams?.code || sourceParams?.type === SourceType.CODE;
}
function defaultTransformSource(source) {
  return dedent(source);
}
function applyTransformSource(source, context) {
  const docs = context.parameters.docs ?? {};
  const transformSource = docs.transformSource ?? defaultTransformSource;
  return transformSource(source, context);
}
function sourceDecorator(storyFn, context) {
  const story = context?.parameters.docs?.source?.excludeDecorators ? context.originalStoryFn(context.args, context) : storyFn();
  let source;
  if (!skipSourceRender(context)) {
    if (typeof story === "string") {
      source = story;
    } else if (story instanceof Element) {
      source = story.outerHTML;
    }
    if (source) {
      source = applyTransformSource(source, context);
    }
  }
  useEffect(() => {
    if (source)
      addons.getChannel().emit(SNIPPET_RENDERED, context.id, source);
  });
  return story;
}

// src/docs/config.ts
var decorators = [sourceDecorator];
var parameters = {
  docs: {
    inlineStories: true,
    transformSource: void 0,
    source: {
      type: SourceType2.DYNAMIC,
      language: "html",
      code: void 0,
      excludeDecorators: void 0
    }
  }
};
var argTypesEnhancers = [enhanceArgTypes];

// src/config.ts
var parameters2 = { framework: "html", ...parameters };
export {
  argTypesEnhancers,
  decorators,
  parameters2 as parameters,
  render,
  renderToDOM
};
