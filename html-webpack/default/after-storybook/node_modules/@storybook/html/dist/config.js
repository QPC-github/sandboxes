"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/config.ts
var config_exports = {};
__export(config_exports, {
  argTypesEnhancers: () => argTypesEnhancers,
  decorators: () => decorators,
  parameters: () => parameters2,
  render: () => render,
  renderToDOM: () => renderToDOM
});
module.exports = __toCommonJS(config_exports);

// src/docs/config.ts
var import_docs_tools2 = require("@storybook/docs-tools");

// src/docs/sourceDecorator.ts
var import_docs_tools = require("@storybook/docs-tools");
var import_addons = require("@storybook/addons");
var import_ts_dedent = require("ts-dedent");
function skipSourceRender(context) {
  var _a;
  const sourceParams = (_a = context == null ? void 0 : context.parameters.docs) == null ? void 0 : _a.source;
  const isArgsStory = context == null ? void 0 : context.parameters.__isArgsStory;
  if ((sourceParams == null ? void 0 : sourceParams.type) === import_docs_tools.SourceType.DYNAMIC) {
    return false;
  }
  return !isArgsStory || (sourceParams == null ? void 0 : sourceParams.code) || (sourceParams == null ? void 0 : sourceParams.type) === import_docs_tools.SourceType.CODE;
}
function defaultTransformSource(source) {
  return (0, import_ts_dedent.dedent)(source);
}
function applyTransformSource(source, context) {
  const docs = context.parameters.docs ?? {};
  const transformSource = docs.transformSource ?? defaultTransformSource;
  return transformSource(source, context);
}
function sourceDecorator(storyFn, context) {
  var _a, _b;
  const story = ((_b = (_a = context == null ? void 0 : context.parameters.docs) == null ? void 0 : _a.source) == null ? void 0 : _b.excludeDecorators) ? context.originalStoryFn(context.args, context) : storyFn();
  let source;
  if (!skipSourceRender(context)) {
    if (typeof story === "string") {
      source = story;
    } else if (story instanceof Element) {
      source = story.outerHTML;
    }
    if (source) {
      source = applyTransformSource(source, context);
    }
  }
  (0, import_addons.useEffect)(() => {
    if (source)
      import_addons.addons.getChannel().emit(import_docs_tools.SNIPPET_RENDERED, context.id, source);
  });
  return story;
}

// src/docs/config.ts
var decorators = [sourceDecorator];
var parameters = {
  docs: {
    inlineStories: true,
    transformSource: void 0,
    source: {
      type: import_docs_tools2.SourceType.DYNAMIC,
      language: "html",
      code: void 0,
      excludeDecorators: void 0
    }
  }
};
var argTypesEnhancers = [import_docs_tools2.enhanceArgTypes];

// src/render.ts
var import_global = __toESM(require("global"));
var import_ts_dedent2 = require("ts-dedent");
var import_preview_web = require("@storybook/preview-web");
var { Node } = import_global.default;
var render = (args, context) => {
  const { id, component: Component } = context;
  if (typeof Component === "string") {
    let output = Component;
    Object.keys(args).forEach((key) => {
      output = output.replace(`{{${key}}}`, args[key]);
    });
    return output;
  }
  if (Component instanceof HTMLElement) {
    const output = Component.cloneNode(true);
    Object.keys(args).forEach((key) => {
      output.setAttribute(
        key,
        typeof args[key] === "string" ? args[key] : JSON.stringify(args[key])
      );
    });
    return output;
  }
  console.warn(import_ts_dedent2.dedent`
    Storybook's HTML renderer only supports rendering DOM elements and strings.
    Received: ${Component}
  `);
  throw new Error(`Unable to render story ${id}`);
};
function renderToDOM({ storyFn, kind, name, showMain, showError, forceRemount }, domElement) {
  const element = storyFn();
  showMain();
  if (typeof element === "string") {
    domElement.innerHTML = element;
    (0, import_preview_web.simulatePageLoad)(domElement);
  } else if (element instanceof Node) {
    if (domElement.firstChild === element && forceRemount === false) {
      return;
    }
    domElement.innerHTML = "";
    domElement.appendChild(element);
    (0, import_preview_web.simulateDOMContentLoaded)();
  } else {
    showError({
      title: `Expecting an HTML snippet or DOM node from the story: "${name}" of "${kind}".`,
      description: import_ts_dedent2.dedent`
        Did you forget to return the HTML snippet from the story?
        Use "() => <your snippet or node>" or when defining the story.
      `
    });
  }
}

// src/config.ts
var parameters2 = { framework: "html", ...parameters };
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  argTypesEnhancers,
  decorators,
  parameters,
  render,
  renderToDOM
});
