"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  addDecorator: () => addDecorator,
  addParameters: () => addParameters,
  clearDecorators: () => clearDecorators,
  configure: () => configure,
  forceReRender: () => forceReRender,
  getStorybook: () => getStorybook,
  raw: () => raw,
  setAddon: () => setAddon,
  storiesOf: () => storiesOf
});
module.exports = __toCommonJS(src_exports);

// src/globals.ts
var import_global = __toESM(require("global"));
var { window: globalWindow } = import_global.default;
globalWindow.STORYBOOK_ENV = "HTML";

// src/public-api.ts
var import_core_client = require("@storybook/core-client");

// src/render.ts
var import_global2 = __toESM(require("global"));
var import_ts_dedent = require("ts-dedent");
var import_preview_web = require("@storybook/preview-web");
var { Node } = import_global2.default;
function renderToDOM({ storyFn, kind, name, showMain, showError, forceRemount }, domElement) {
  const element = storyFn();
  showMain();
  if (typeof element === "string") {
    domElement.innerHTML = element;
    (0, import_preview_web.simulatePageLoad)(domElement);
  } else if (element instanceof Node) {
    if (domElement.firstChild === element && forceRemount === false) {
      return;
    }
    domElement.innerHTML = "";
    domElement.appendChild(element);
    (0, import_preview_web.simulateDOMContentLoaded)();
  } else {
    showError({
      title: `Expecting an HTML snippet or DOM node from the story: "${name}" of "${kind}".`,
      description: import_ts_dedent.dedent`
        Did you forget to return the HTML snippet from the story?
        Use "() => <your snippet or node>" or when defining the story.
      `
    });
  }
}

// src/public-api.ts
var FRAMEWORK = "html";
var api = (0, import_core_client.start)(renderToDOM);
var storiesOf = (kind, m) => {
  return api.clientApi.storiesOf(kind, m).addParameters({
    framework: FRAMEWORK
  });
};
var configure = (...args) => api.configure(FRAMEWORK, ...args);
var addDecorator = api.clientApi.addDecorator;
var addParameters = api.clientApi.addParameters;
var clearDecorators = api.clientApi.clearDecorators;
var setAddon = api.clientApi.setAddon;
var forceReRender = api.forceReRender;
var getStorybook = api.clientApi.getStorybook;
var raw = api.clientApi.raw;

// src/index.ts
var _a;
(_a = module == null ? void 0 : module.hot) == null ? void 0 : _a.decline();
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  addDecorator,
  addParameters,
  clearDecorators,
  configure,
  forceReRender,
  getStorybook,
  raw,
  setAddon,
  storiesOf
});
