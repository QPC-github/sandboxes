// src/render.ts
import global from "global";
import { dedent } from "ts-dedent";
import { simulatePageLoad, simulateDOMContentLoaded } from "@storybook/preview-web";
var { Node } = global;
var render = (args, context) => {
  const { id, component: Component } = context;
  if (typeof Component === "string") {
    let output = Component;
    Object.keys(args).forEach((key) => {
      output = output.replace(`{{${key}}}`, args[key]);
    });
    return output;
  }
  if (Component instanceof HTMLElement) {
    const output = Component.cloneNode(true);
    Object.keys(args).forEach((key) => {
      output.setAttribute(
        key,
        typeof args[key] === "string" ? args[key] : JSON.stringify(args[key])
      );
    });
    return output;
  }
  console.warn(dedent`
    Storybook's HTML renderer only supports rendering DOM elements and strings.
    Received: ${Component}
  `);
  throw new Error(`Unable to render story ${id}`);
};
function renderToDOM({ storyFn, kind, name, showMain, showError, forceRemount }, domElement) {
  const element = storyFn();
  showMain();
  if (typeof element === "string") {
    domElement.innerHTML = element;
    simulatePageLoad(domElement);
  } else if (element instanceof Node) {
    if (domElement.firstChild === element && forceRemount === false) {
      return;
    }
    domElement.innerHTML = "";
    domElement.appendChild(element);
    simulateDOMContentLoaded();
  } else {
    showError({
      title: `Expecting an HTML snippet or DOM node from the story: "${name}" of "${kind}".`,
      description: dedent`
        Did you forget to return the HTML snippet from the story?
        Use "() => <your snippet or node>" or when defining the story.
      `
    });
  }
}

export {
  render,
  renderToDOM
};
