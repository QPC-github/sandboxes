import { TypescriptOptions, StorybookConfig, PackageJson } from '@storybook/core-common';
import { PM } from 'detect-package-manager';

declare const monorepoConfigs: {
    readonly Nx: "nx.json";
    readonly Turborepo: "turbo.json";
    readonly Lerna: "lerna.json";
    readonly Rush: "rush.json";
    readonly Lage: "lage.config.json";
};
declare type MonorepoType = keyof typeof monorepoConfigs | 'Workspaces' | undefined;

declare type EventType = 'start' | 'build' | 'upgrade' | 'init' | 'error-build' | 'error-dev' | 'error-metadata';
interface Dependency {
    version: string | undefined;
}
interface StorybookAddon extends Dependency {
    options: any;
}
declare type StorybookMetadata = {
    storybookVersion: string;
    generatedAt?: number;
    language: 'typescript' | 'javascript';
    framework: {
        name: string;
        options?: any;
    };
    builder?: {
        name: string;
        options?: Record<string, any>;
    };
    monorepo?: MonorepoType;
    packageManager?: {
        type: PM;
        version: string;
    };
    typescriptOptions?: Partial<TypescriptOptions>;
    addons?: Record<string, StorybookAddon>;
    storybookPackages?: Record<string, Dependency>;
    metaFramework?: {
        name: string;
        packageName: string;
        version: string;
    };
    hasStorybookEslint?: boolean;
    hasStaticDirs?: boolean;
    hasCustomWebpack?: boolean;
    hasCustomBabel?: boolean;
    features?: StorybookConfig['features'];
    refCount?: number;
};
interface Payload {
    [key: string]: any;
}
interface Options {
    retryDelay: number;
    immediate: boolean;
    configDir?: string;
    enableCrashReports?: boolean;
}

declare const metaFrameworks: Record<string, string>;
declare const sanitizeAddonName: (name: string) => string;
declare const computeStorybookMetadata: ({ packageJson, mainConfig, }: {
    packageJson: PackageJson;
    mainConfig: StorybookConfig & Record<string, any>;
}) => Promise<StorybookMetadata>;
declare const getStorybookMetadata: (_configDir?: string | undefined) => Promise<StorybookMetadata>;

declare const telemetry: (eventType: EventType, payload?: Payload, options?: Partial<Options>) => Promise<void>;

export { computeStorybookMetadata, getStorybookMetadata, metaFrameworks, sanitizeAddonName, telemetry };
