import * as _storybook_addons from '@storybook/addons';
import { StoryApi, Parameters as Parameters$1, DecoratorFunction as DecoratorFunction$1, LoaderFunction as LoaderFunction$1, StoryContext, ArgTypes as ArgTypes$1, Args as Args$1, ViewMode, StoryId as StoryId$1, StoryFn as StoryFn$1, Addon, StoryName, StoryKind } from '@storybook/addons';
export { DecoratorFunction, StoryApi } from '@storybook/addons';
import * as _storybook_store from '@storybook/store';
import { NormalizedProjectAnnotations, IndexEntry, Path, ModuleExports, StoryStore, ModuleImportFn, HooksContext, RenderContext } from '@storybook/store';
export * from '@storybook/store';
import { AnyFramework, StoryId, ComponentId, LegacyStoryFn, DecoratorFunction, Parameters, LoaderFunction, Args, ArgTypes, ArgsEnhancer as ArgsEnhancer$1, ArgTypesEnhancer as ArgTypesEnhancer$1, StepRunner, StoryFn, Globals, GlobalTypes, StoryIdentifier, ProjectAnnotations } from '@storybook/csf';
export { SBArrayType, SBEnumType, SBIntersectionType, SBObjectType, SBOtherType, SBScalarType, SBType, SBUnionType } from '@storybook/csf';
import * as qs from 'qs';

declare class StoryStoreFacade<TFramework extends AnyFramework> {
    projectAnnotations: NormalizedProjectAnnotations<TFramework>;
    entries: Record<StoryId, IndexEntry & {
        componentId?: ComponentId;
    }>;
    csfExports: Record<Path, ModuleExports>;
    constructor();
    importFn(path: Path): Promise<ModuleExports>;
    getStoryIndex(store: StoryStore<TFramework>): {
        v: number;
        entries: Record<string, IndexEntry>;
    };
    clearFilenameExports(fileName: Path): void;
    addStoriesFromExports(fileName: Path, fileExports: ModuleExports): void;
}

interface GetStorybookStory<TFramework extends AnyFramework> {
    name: string;
    render: LegacyStoryFn<TFramework>;
}
interface GetStorybookKind<TFramework extends AnyFramework> {
    kind: string;
    fileName: string;
    stories: GetStorybookStory<TFramework>[];
}
declare const addDecorator: (decorator: DecoratorFunction<AnyFramework>) => void;
declare const addParameters: (parameters: Parameters) => void;
declare const addLoader: (loader: LoaderFunction<AnyFramework>) => void;
declare const addArgs: (args: Args) => void;
declare const addArgTypes: (argTypes: ArgTypes) => void;
declare const addArgsEnhancer: (enhancer: ArgsEnhancer$1<AnyFramework>) => void;
declare const addArgTypesEnhancer: (enhancer: ArgTypesEnhancer$1<AnyFramework>) => void;
declare const addStepRunner: (stepRunner: StepRunner) => void;
declare const setGlobalRender: (render: StoryFn<AnyFramework>) => void;
declare class ClientApi<TFramework extends AnyFramework> {
    facade: StoryStoreFacade<TFramework>;
    storyStore?: StoryStore<TFramework>;
    private addons;
    onImportFnChanged?: ({ importFn }: {
        importFn: ModuleImportFn;
    }) => void;
    private lastFileName;
    constructor({ storyStore }?: {
        storyStore?: StoryStore<TFramework>;
    });
    importFn(path: Path): Promise<_storybook_store.ModuleExports>;
    getStoryIndex(): {
        v: number;
        entries: Record<string, _storybook_addons.IndexEntry>;
    };
    addDecorator: (decorator: DecoratorFunction<TFramework>) => void;
    addParameters: ({ globals, globalTypes, ...parameters }: Parameters & {
        globals?: Globals;
        globalTypes?: GlobalTypes;
    }) => void;
    addStepRunner: (stepRunner: StepRunner) => void;
    addLoader: (loader: LoaderFunction<TFramework>) => void;
    addArgs: (args: Args) => void;
    addArgTypes: (argTypes: ArgTypes) => void;
    addArgsEnhancer: (enhancer: ArgsEnhancer$1<TFramework>) => void;
    addArgTypesEnhancer: (enhancer: ArgTypesEnhancer$1<TFramework>) => void;
    storiesOf: (kind: string, m?: NodeModule) => StoryApi<TFramework['storyResult']>;
    raw: () => _storybook_store.BoundStory<TFramework>[];
    get _storyStore(): StoryStore<TFramework>;
}

interface ErrorLike {
    message: string;
    stack: string;
}
interface StoryMetadata {
    parameters?: Parameters$1;
    decorators?: DecoratorFunction$1[];
    loaders?: LoaderFunction$1[];
}
declare type ArgTypesEnhancer = (context: StoryContext) => ArgTypes$1;
declare type ArgsEnhancer = (context: StoryContext) => Args$1;
declare type StorySpecifier = StoryId$1 | {
    name: StoryName;
    kind: StoryKind;
} | '*';
interface StoreSelectionSpecifier {
    storySpecifier: StorySpecifier;
    viewMode: ViewMode;
    singleStory?: boolean;
    args?: Args$1;
    globals?: Args$1;
}
interface StoreSelection {
    storyId: StoryId$1;
    viewMode: ViewMode;
}
declare type AddStoryArgs = StoryIdentifier & {
    storyFn: StoryFn$1<any>;
    parameters?: Parameters$1;
    decorators?: DecoratorFunction$1[];
    loaders?: LoaderFunction$1[];
};
declare type StoreItem = StoryIdentifier & {
    parameters: Parameters$1;
    getDecorated: () => StoryFn$1<any>;
    getOriginal: () => StoryFn$1<any>;
    applyLoaders: () => Promise<StoryContext>;
    playFunction: (context: StoryContext) => Promise<void> | void;
    storyFn: StoryFn$1<any>;
    unboundStoryFn: StoryFn$1<any>;
    hooks: HooksContext<AnyFramework>;
    args: Args$1;
    initialArgs: Args$1;
    argTypes: ArgTypes$1;
};
declare type PublishedStoreItem = StoreItem & {
    globals: Args$1;
};
interface StoreData {
    [key: string]: StoreItem;
}
interface ClientApiParams {
    storyStore: StoryStore<AnyFramework>;
    decorateStory?: ProjectAnnotations<AnyFramework>['applyDecorators'];
    noStoryModuleAddMethodHotDispose?: boolean;
}
declare type ClientApiReturnFn<StoryFnReturnType> = (...args: any[]) => StoryApi<StoryFnReturnType>;

interface ClientApiAddon<StoryFnReturnType = unknown> extends Addon {
    apply: (a: StoryApi<StoryFnReturnType>, b: any[]) => any;
}
interface ClientApiAddons<StoryFnReturnType> {
    [key: string]: ClientApiAddon<StoryFnReturnType>;
}
declare type RenderContextWithoutStoryContext = Omit<RenderContext, 'storyContext'>;

declare const getQueryParams: () => qs.ParsedQs;
declare const getQueryParam: (key: string) => string | string[] | qs.ParsedQs | qs.ParsedQs[];

export { AddStoryArgs, ArgTypesEnhancer, ArgsEnhancer, ClientApi, ClientApiAddon, ClientApiAddons, ClientApiParams, ClientApiReturnFn, ErrorLike, GetStorybookKind, GetStorybookStory, PublishedStoreItem, RenderContextWithoutStoryContext, StoreData, StoreItem, StoreSelection, StoreSelectionSpecifier, StoryMetadata, addArgTypes, addArgTypesEnhancer, addArgs, addArgsEnhancer, addDecorator, addLoader, addParameters, addStepRunner, getQueryParam, getQueryParams, setGlobalRender };
