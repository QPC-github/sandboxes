import { ClientApi, RenderContext } from '@storybook/client-api';
export { ClientApi, RenderContext, RenderContextWithoutStoryContext } from '@storybook/client-api';
import { WebProjectAnnotations } from '@storybook/store';
export { StoryStore } from '@storybook/store';
import { AnyFramework, ArgsStoryFn } from '@storybook/csf';
export { toId } from '@storybook/csf';

interface RendererImplementation<TFramework extends AnyFramework> {
    decorateStory?: WebProjectAnnotations<TFramework>['applyDecorators'];
    render?: ArgsStoryFn<TFramework>;
}
interface ClientAPIFacade {
    storiesOf: (...args: any[]) => never;
    raw: (...args: any[]) => never;
}
interface StartReturnValue<TFramework extends AnyFramework> {
    forceReRender: () => void;
    configure: any;
    clientApi: ClientApi<TFramework> | ClientAPIFacade;
}
declare function start<TFramework extends AnyFramework>(renderToDOM: WebProjectAnnotations<TFramework>['renderToDOM'], { decorateStory, render }?: RendererImplementation<TFramework>): StartReturnValue<TFramework>;

interface PreviewError {
    message?: string;
    stack?: string;
}
interface RequireContext {
    keys: () => string[];
    (id: string): any;
    resolve(id: string): string;
}
declare type LoaderFunction = () => void | any[];
declare type Loadable = RequireContext | RequireContext[] | LoaderFunction;

declare type RenderStoryFunction = (context: RenderContext) => void;

export { Loadable, LoaderFunction, PreviewError, RenderStoryFunction, RequireContext, start };
