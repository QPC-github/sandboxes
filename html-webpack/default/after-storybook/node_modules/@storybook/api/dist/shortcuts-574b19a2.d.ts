declare global {
	interface SymbolConstructor {
		readonly observable: symbol;
	}
}
declare type DocsOptions = {
    /**
     * Should we generate docs entries at all under any circumstances? (i.e. can they be rendered)
     */
    enabled?: boolean;
    /**
     * What should we call the generated docs entries?
     */
    defaultName?: string;
    /**
     * Should we generate a docs entry per CSF file?
     */
    docsPage?: boolean;
    /**
     * Only show doc entries in the side bar (usually set with the `--docs` CLI flag)
     */
    docsMode?: boolean;
};

declare const isMacLike: () => boolean;
declare const controlOrMetaSymbol: () => "⌘" | "ctrl";
declare const controlOrMetaKey: () => "meta" | "control";
declare const optionOrAltSymbol: () => "⌥" | "alt";
declare const isShortcutTaken: (arr1: string[], arr2: string[]) => boolean;
declare type KeyboardEventLike = Pick<KeyboardEvent, 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey' | 'key' | 'code' | 'keyCode' | 'preventDefault'>;
declare const eventToShortcut: (e: KeyboardEventLike) => KeyCollection | null;
declare const shortcutMatchesShortcut: (inputShortcut: KeyCollection, shortcut: KeyCollection) => boolean;
declare const eventMatchesShortcut: (e: KeyboardEventLike, shortcut: KeyCollection) => boolean;
declare const keyToSymbol: (key: string) => string;
declare const shortcutToHumanString: (shortcut: KeyCollection) => string;

interface SubState {
    shortcuts: Shortcuts;
}
interface SubAPI {
    getShortcutKeys(): Shortcuts;
    getDefaultShortcuts(): Shortcuts | AddonShortcutDefaults;
    getAddonsShortcuts(): AddonShortcuts;
    getAddonsShortcutLabels(): AddonShortcutLabels;
    getAddonsShortcutDefaults(): AddonShortcutDefaults;
    setShortcuts(shortcuts: Shortcuts): Promise<Shortcuts>;
    setShortcut(action: Action, value: KeyCollection): Promise<KeyCollection>;
    setAddonShortcut(addon: string, shortcut: AddonShortcut): Promise<AddonShortcut>;
    restoreAllDefaultShortcuts(): Promise<Shortcuts>;
    restoreDefaultShortcut(action: Action): Promise<KeyCollection>;
    handleKeydownEvent(event: KeyboardEventLike): void;
    handleShortcutFeature(feature: Action): void;
}
declare type KeyCollection = string[];
interface Shortcuts {
    fullScreen: KeyCollection;
    togglePanel: KeyCollection;
    panelPosition: KeyCollection;
    toggleNav: KeyCollection;
    toolbar: KeyCollection;
    search: KeyCollection;
    focusNav: KeyCollection;
    focusIframe: KeyCollection;
    focusPanel: KeyCollection;
    prevComponent: KeyCollection;
    nextComponent: KeyCollection;
    prevStory: KeyCollection;
    nextStory: KeyCollection;
    shortcutsPage: KeyCollection;
    aboutPage: KeyCollection;
    escape: KeyCollection;
    collapseAll: KeyCollection;
    expandAll: KeyCollection;
}
declare type Action = keyof Shortcuts;
interface AddonShortcut {
    label: string;
    defaultShortcut: KeyCollection;
    actionName: string;
    showInMenu?: boolean;
    action: (...args: any[]) => any;
}
declare type AddonShortcuts = Record<string, AddonShortcut>;
declare type AddonShortcutLabels = Record<string, string>;
declare type AddonShortcutDefaults = Record<string, KeyCollection>;

export { DocsOptions as D, KeyboardEventLike as K, SubState as S, SubAPI as a, controlOrMetaKey as b, controlOrMetaSymbol as c, isShortcutTaken as d, eventToShortcut as e, eventMatchesShortcut as f, shortcutToHumanString as g, isMacLike as i, keyToSymbol as k, optionOrAltSymbol as o, shortcutMatchesShortcut as s };
