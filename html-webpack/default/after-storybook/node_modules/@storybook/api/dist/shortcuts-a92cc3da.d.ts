declare global {
	interface SymbolConstructor {
		readonly observable: symbol;
	}
}
declare type DocsOptions = {
    /**
     * Should we generate docs entries at all under any circumstances? (i.e. can they be rendered)
     */
    enabled?: boolean;
    /**
     * What should we call the generated docs entries?
     */
    defaultName?: string;
    /**
     * Should we generate a docs entry per CSF file?
     */
    docsPage?: boolean;
    /**
     * Only show doc entries in the side bar (usually set with the `--docs` CLI flag)
     */
    docsMode?: boolean;
};

interface SubState {
    shortcuts: Shortcuts;
}
interface SubAPI {
    getShortcutKeys(): Shortcuts;
    getDefaultShortcuts(): Shortcuts | AddonShortcutDefaults;
    getAddonsShortcuts(): AddonShortcuts;
    getAddonsShortcutLabels(): AddonShortcutLabels;
    getAddonsShortcutDefaults(): AddonShortcutDefaults;
    setShortcuts(shortcuts: Shortcuts): Promise<Shortcuts>;
    setShortcut(action: Action, value: KeyCollection): Promise<KeyCollection>;
    setAddonShortcut(addon: string, shortcut: AddonShortcut): Promise<AddonShortcut>;
    restoreAllDefaultShortcuts(): Promise<Shortcuts>;
    restoreDefaultShortcut(action: Action): Promise<KeyCollection>;
    handleKeydownEvent(event: Event): void;
    handleShortcutFeature(feature: Action): void;
}
declare type KeyCollection = string[];
interface Shortcuts {
    fullScreen: KeyCollection;
    togglePanel: KeyCollection;
    panelPosition: KeyCollection;
    toggleNav: KeyCollection;
    toolbar: KeyCollection;
    search: KeyCollection;
    focusNav: KeyCollection;
    focusIframe: KeyCollection;
    focusPanel: KeyCollection;
    prevComponent: KeyCollection;
    nextComponent: KeyCollection;
    prevStory: KeyCollection;
    nextStory: KeyCollection;
    shortcutsPage: KeyCollection;
    aboutPage: KeyCollection;
    escape: KeyCollection;
    collapseAll: KeyCollection;
    expandAll: KeyCollection;
}
declare type Action = keyof Shortcuts;
interface AddonShortcut {
    label: string;
    defaultShortcut: KeyCollection;
    actionName: string;
    showInMenu?: boolean;
    action: (...args: any[]) => any;
}
declare type AddonShortcuts = Record<string, AddonShortcut>;
declare type AddonShortcutLabels = Record<string, string>;
declare type AddonShortcutDefaults = Record<string, KeyCollection>;
interface Event extends KeyboardEvent {
    target: {
        tagName: string;
        addEventListener(): void;
        removeEventListener(): boolean;
        dispatchEvent(event: Event): boolean;
        getAttribute(attr: string): string | null;
    };
}

export { DocsOptions as D, Event as E, KeyCollection as K, SubState as S, SubAPI as a };
