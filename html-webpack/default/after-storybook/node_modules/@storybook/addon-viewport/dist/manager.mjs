import {
  ADDON_ID,
  PARAM_KEY,
  registerShortcuts
} from "./chunk-OOSADEIZ.mjs";
import {
  MINIMAL_VIEWPORTS
} from "./chunk-N267IU66.mjs";

// src/manager.tsx
import * as React2 from "react";
import { addons, types } from "@storybook/addons";

// src/Tool.tsx
import React, { Fragment, useEffect, useRef, memo } from "react";
import memoize from "memoizerific";
import { styled, Global, withTheme } from "@storybook/theming";
import { Icons, IconButton, WithTooltip, TooltipLinkList } from "@storybook/components";
import { useStorybookApi, useParameter, useAddonState } from "@storybook/api";
var toList = memoize(50)((items) => [
  ...baseViewports,
  ...Object.entries(items).map(([id, { name, ...rest }]) => ({ ...rest, id, title: name }))
]);
var responsiveViewport = {
  id: "reset",
  title: "Reset viewport",
  styles: null,
  type: "other"
};
var baseViewports = [responsiveViewport];
var toLinks = memoize(50)((list, active, set, state, close) => {
  return list.map((i) => {
    switch (i.id) {
      case responsiveViewport.id: {
        if (active.id === i.id) {
          return null;
        }
      }
      default: {
        return {
          ...i,
          onClick: () => {
            set({ ...state, selected: i.id });
            close();
          }
        };
      }
    }
  }).filter(Boolean);
});
var iframeId = "storybook-preview-iframe";
var wrapperId = "storybook-preview-wrapper";
var flip = ({ width, height, ...styles }) => ({
  ...styles,
  height: width,
  width: height
});
var ActiveViewportSize = styled.div(() => ({
  display: "inline-flex"
}));
var ActiveViewportLabel = styled.div(({ theme }) => ({
  display: "inline-block",
  textDecoration: "none",
  padding: 10,
  fontWeight: theme.typography.weight.bold,
  fontSize: theme.typography.size.s2 - 1,
  lineHeight: "1",
  height: 40,
  border: "none",
  borderTop: "3px solid transparent",
  borderBottom: "3px solid transparent",
  background: "transparent"
}));
var IconButtonWithLabel = styled(IconButton)(() => ({
  display: "inline-flex",
  alignItems: "center"
}));
var IconButtonLabel = styled.div(({ theme }) => ({
  fontSize: theme.typography.size.s2 - 1,
  marginLeft: 10
}));
var getStyles = (prevStyles, styles, isRotated) => {
  if (styles === null) {
    return null;
  }
  const result = typeof styles === "function" ? styles(prevStyles) : styles;
  return isRotated ? flip(result) : result;
};
var ViewportTool = memo(
  withTheme(({ theme }) => {
    const {
      viewports = MINIMAL_VIEWPORTS,
      defaultViewport = responsiveViewport.id,
      disable
    } = useParameter(PARAM_KEY, {});
    const [state, setState] = useAddonState(ADDON_ID, {
      selected: defaultViewport,
      isRotated: false
    });
    const list = toList(viewports);
    const api = useStorybookApi();
    if (!list.find((i) => i.id === defaultViewport)) {
      console.warn(
        `Cannot find "defaultViewport" of "${defaultViewport}" in addon-viewport configs, please check the "viewports" setting in the configuration.`
      );
    }
    useEffect(() => {
      registerShortcuts(api, setState, Object.keys(viewports));
    }, [viewports]);
    useEffect(() => {
      setState({
        selected: defaultViewport || (viewports[state.selected] ? state.selected : responsiveViewport.id),
        isRotated: state.isRotated
      });
    }, [defaultViewport]);
    const { selected, isRotated } = state;
    const item = list.find((i) => i.id === selected) || list.find((i) => i.id === defaultViewport) || list.find((i) => i.default) || responsiveViewport;
    const ref = useRef();
    const styles = getStyles(ref.current, item.styles, isRotated);
    useEffect(() => {
      ref.current = styles;
    }, [item]);
    if (disable || Object.entries(viewports).length === 0) {
      return null;
    }
    return /* @__PURE__ */ React.createElement(Fragment, null, /* @__PURE__ */ React.createElement(WithTooltip, {
      placement: "top",
      trigger: "click",
      tooltip: ({ onHide }) => /* @__PURE__ */ React.createElement(TooltipLinkList, {
        links: toLinks(list, item, setState, state, onHide)
      }),
      closeOnClick: true
    }, /* @__PURE__ */ React.createElement(IconButtonWithLabel, {
      key: "viewport",
      title: "Change the size of the preview",
      active: !!styles,
      onDoubleClick: () => {
        setState({ ...state, selected: responsiveViewport.id });
      }
    }, /* @__PURE__ */ React.createElement(Icons, {
      icon: "grow"
    }), styles ? /* @__PURE__ */ React.createElement(IconButtonLabel, null, isRotated ? `${item.title} (L)` : `${item.title} (P)`) : null)), styles ? /* @__PURE__ */ React.createElement(ActiveViewportSize, null, /* @__PURE__ */ React.createElement(Global, {
      styles: {
        [`#${iframeId}`]: {
          margin: `auto`,
          transition: "width .3s, height .3s",
          position: "relative",
          border: `1px solid black`,
          boxShadow: "0 0 100px 100vw rgba(0,0,0,0.5)",
          ...styles
        },
        [`#${wrapperId}`]: {
          padding: theme.layoutMargin,
          alignContent: "center",
          alignItems: "center",
          justifyContent: "center",
          justifyItems: "center",
          overflow: "auto",
          display: "grid",
          gridTemplateColumns: "100%",
          gridTemplateRows: "100%"
        }
      }
    }), /* @__PURE__ */ React.createElement(ActiveViewportLabel, {
      title: "Viewport width"
    }, styles.width.replace("px", "")), /* @__PURE__ */ React.createElement(IconButton, {
      key: "viewport-rotate",
      title: "Rotate viewport",
      onClick: () => {
        setState({ ...state, isRotated: !isRotated });
      }
    }, /* @__PURE__ */ React.createElement(Icons, {
      icon: "transfer"
    })), /* @__PURE__ */ React.createElement(ActiveViewportLabel, {
      title: "Viewport height"
    }, styles.height.replace("px", ""))) : null);
  })
);

// src/manager.tsx
addons.register(ADDON_ID, () => {
  addons.add(ADDON_ID, {
    title: "viewport / media-queries",
    type: types.TOOL,
    match: ({ viewMode }) => viewMode === "story",
    render: () => /* @__PURE__ */ React2.createElement(ViewportTool, null)
  });
});
