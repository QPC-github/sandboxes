"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  addDecorator: () => addDecorator,
  addParameters: () => addParameters,
  clearDecorators: () => clearDecorators,
  composeStories: () => composeStories,
  composeStory: () => composeStory,
  configure: () => configure,
  forceReRender: () => forceReRender,
  getStorybook: () => getStorybook,
  raw: () => raw,
  setAddon: () => setAddon,
  setGlobalConfig: () => setGlobalConfig,
  setProjectAnnotations: () => setProjectAnnotations,
  storiesOf: () => storiesOf
});
module.exports = __toCommonJS(src_exports);

// src/globals.ts
var import_global = __toESM(require("global"));
var { window: globalWindow } = import_global.default;
if (globalWindow) {
  globalWindow.STORYBOOK_ENV = "react";
}

// src/public-api.tsx
var import_core_client = require("@storybook/core-client");

// src/render.tsx
var import_global2 = __toESM(require("global"));
var import_react = __toESM(require("react"));
var import_react_dom = __toESM(require("react-dom"));
var { FRAMEWORK_OPTIONS } = import_global2.default;
var nodes = /* @__PURE__ */ new Map();
var render = (args, context) => {
  const { id, component: Component } = context;
  if (!Component) {
    throw new Error(
      `Unable to render story ${id} as the component annotation is missing from the default export`
    );
  }
  return /* @__PURE__ */ import_react.default.createElement(Component, {
    ...args
  });
};
var WithCallback = ({
  callback,
  children
}) => {
  const once2 = (0, import_react.useRef)();
  (0, import_react.useLayoutEffect)(() => {
    if (once2.current === callback)
      return;
    once2.current = callback;
    callback();
  }, [callback]);
  return children;
};
var renderElement = async (node, el) => {
  const root = await getReactRoot(el);
  return new Promise((resolve) => {
    if (root) {
      root.render(/* @__PURE__ */ import_react.default.createElement(WithCallback, {
        callback: () => resolve(null)
      }, node));
    } else {
      import_react_dom.default.render(node, el, () => resolve(null));
    }
  });
};
var canUseNewReactRootApi = import_react_dom.version && (import_react_dom.version.startsWith("18") || import_react_dom.version.startsWith("0.0.0"));
var shouldUseNewRootApi = (FRAMEWORK_OPTIONS == null ? void 0 : FRAMEWORK_OPTIONS.legacyRootApi) !== true;
var isUsingNewReactRootApi = shouldUseNewRootApi && canUseNewReactRootApi;
var unmountElement = (el) => {
  const root = nodes.get(el);
  if (root && isUsingNewReactRootApi) {
    root.unmount();
    nodes.delete(el);
  } else {
    import_react_dom.default.unmountComponentAtNode(el);
  }
};
var getReactRoot = async (el) => {
  if (!isUsingNewReactRootApi) {
    return null;
  }
  let root = nodes.get(el);
  if (!root) {
    const reactDomClient = (await import("react-dom/client")).default;
    root = reactDomClient.createRoot(el);
    nodes.set(el, root);
  }
  return root;
};
var ErrorBoundary = class extends import_react.Component {
  constructor() {
    super(...arguments);
    this.state = { hasError: false };
  }
  static getDerivedStateFromError() {
    return { hasError: true };
  }
  componentDidMount() {
    const { hasError } = this.state;
    const { showMain } = this.props;
    if (!hasError) {
      showMain();
    }
  }
  componentDidCatch(err) {
    const { showException } = this.props;
    showException(err);
  }
  render() {
    const { hasError } = this.state;
    const { children } = this.props;
    return hasError ? null : children;
  }
};
var Wrapper = (FRAMEWORK_OPTIONS == null ? void 0 : FRAMEWORK_OPTIONS.strictMode) ? import_react.StrictMode : import_react.Fragment;
async function renderToDOM({
  storyContext,
  unboundStoryFn,
  showMain,
  showException,
  forceRemount
}, domElement) {
  const Story = unboundStoryFn;
  const content = /* @__PURE__ */ import_react.default.createElement(ErrorBoundary, {
    showMain,
    showException
  }, /* @__PURE__ */ import_react.default.createElement(Story, {
    ...storyContext
  }));
  const element = Wrapper ? /* @__PURE__ */ import_react.default.createElement(Wrapper, null, content) : content;
  if (forceRemount) {
    unmountElement(domElement);
  }
  await renderElement(element, domElement);
  return () => unmountElement(domElement);
}

// src/public-api.tsx
var FRAMEWORK = "react";
var api = (0, import_core_client.start)(renderToDOM, { render });
var storiesOf = (kind, m) => {
  return api.clientApi.storiesOf(kind, m).addParameters({
    framework: FRAMEWORK
  });
};
var configure = (...args) => api.configure(FRAMEWORK, ...args);
var addDecorator = api.clientApi.addDecorator;
var addParameters = api.clientApi.addParameters;
var clearDecorators = api.clientApi.clearDecorators;
var setAddon = api.clientApi.setAddon;
var forceReRender = api.forceReRender;
var getStorybook = api.clientApi.getStorybook;
var raw = api.clientApi.raw;

// src/testing-api.ts
var import_store = require("@storybook/store");
var import_client_logger = require("@storybook/client-logger");
function setProjectAnnotations(projectAnnotations) {
  (0, import_store.setProjectAnnotations)(projectAnnotations);
}
function setGlobalConfig(projectAnnotations) {
  import_client_logger.once.warn(`setGlobalConfig is deprecated. Use setProjectAnnotations instead.`);
  setProjectAnnotations(projectAnnotations);
}
var defaultProjectAnnotations = {
  render
};
function composeStory(story, componentAnnotations, projectAnnotations, exportsName) {
  return (0, import_store.composeStory)(
    story,
    componentAnnotations,
    projectAnnotations,
    defaultProjectAnnotations,
    exportsName
  );
}
function composeStories(csfExports, projectAnnotations) {
  const composedStories = (0, import_store.composeStories)(csfExports, projectAnnotations, composeStory);
  return composedStories;
}

// src/index.ts
var _a;
(_a = module == null ? void 0 : module.hot) == null ? void 0 : _a.decline();
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  addDecorator,
  addParameters,
  clearDecorators,
  composeStories,
  composeStory,
  configure,
  forceReRender,
  getStorybook,
  raw,
  setAddon,
  setGlobalConfig,
  setProjectAnnotations,
  storiesOf
});
