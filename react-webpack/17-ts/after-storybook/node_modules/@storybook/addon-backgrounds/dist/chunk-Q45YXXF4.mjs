// src/constants.ts
var ADDON_ID = "storybook/background";
var PARAM_KEY = "backgrounds";
var EVENTS = {
  UPDATE: `${ADDON_ID}/update`
};

// src/helpers/index.ts
import global from "global";
import { dedent } from "ts-dedent";
import { logger } from "@storybook/client-logger";
var { document, window } = global;
var isReduceMotionEnabled = () => {
  const prefersReduceMotion = window.matchMedia("(prefers-reduced-motion: reduce)");
  return prefersReduceMotion.matches;
};
var getBackgroundColorByName = (currentSelectedValue, backgrounds = [], defaultName) => {
  if (currentSelectedValue === "transparent") {
    return "transparent";
  }
  if (backgrounds.find((background) => background.value === currentSelectedValue)) {
    return currentSelectedValue;
  }
  const defaultBackground = backgrounds.find((background) => background.name === defaultName);
  if (defaultBackground) {
    return defaultBackground.value;
  }
  if (defaultName) {
    const availableColors = backgrounds.map((background) => background.name).join(", ");
    logger.warn(
      dedent`
        Backgrounds Addon: could not find the default color "${defaultName}".
        These are the available colors for your story based on your configuration:
        ${availableColors}.
      `
    );
  }
  return "transparent";
};
var clearStyles = (selector) => {
  const selectors = Array.isArray(selector) ? selector : [selector];
  selectors.forEach(clearStyle);
};
var clearStyle = (selector) => {
  const element = document.getElementById(selector);
  if (element) {
    element.parentElement.removeChild(element);
  }
};
var addGridStyle = (selector, css) => {
  const existingStyle = document.getElementById(selector);
  if (existingStyle) {
    if (existingStyle.innerHTML !== css) {
      existingStyle.innerHTML = css;
    }
  } else {
    const style = document.createElement("style");
    style.setAttribute("id", selector);
    style.innerHTML = css;
    document.head.appendChild(style);
  }
};
var addBackgroundStyle = (selector, css, storyId) => {
  const existingStyle = document.getElementById(selector);
  if (existingStyle) {
    if (existingStyle.innerHTML !== css) {
      existingStyle.innerHTML = css;
    }
  } else {
    const style = document.createElement("style");
    style.setAttribute("id", selector);
    style.innerHTML = css;
    const gridStyleSelector = `addon-backgrounds-grid${storyId ? `-docs-${storyId}` : ""}`;
    const existingGridStyle = document.getElementById(gridStyleSelector);
    if (existingGridStyle) {
      existingGridStyle.parentElement.insertBefore(style, existingGridStyle);
    } else {
      document.head.appendChild(style);
    }
  }
};

export {
  ADDON_ID,
  PARAM_KEY,
  isReduceMotionEnabled,
  getBackgroundColorByName,
  clearStyles,
  addGridStyle,
  addBackgroundStyle
};
