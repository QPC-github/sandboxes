import {
  PARAM_KEY,
  addBackgroundStyle,
  addGridStyle,
  clearStyles,
  getBackgroundColorByName,
  isReduceMotionEnabled
} from "./chunk-Q45YXXF4.mjs";

// src/decorators/withBackground.ts
import { useMemo, useEffect } from "@storybook/addons";
var withBackground = (StoryFn, context) => {
  const { globals, parameters: parameters2 } = context;
  const globalsBackgroundColor = globals[PARAM_KEY]?.value;
  const backgroundsConfig = parameters2[PARAM_KEY];
  const selectedBackgroundColor = useMemo(() => {
    if (backgroundsConfig.disable) {
      return "transparent";
    }
    return getBackgroundColorByName(
      globalsBackgroundColor,
      backgroundsConfig.values,
      backgroundsConfig.default
    );
  }, [backgroundsConfig, globalsBackgroundColor]);
  const isActive = useMemo(
    () => selectedBackgroundColor && selectedBackgroundColor !== "transparent",
    [selectedBackgroundColor]
  );
  const selector = context.viewMode === "docs" ? `#anchor--${context.id} .docs-story` : ".sb-show-main";
  const backgroundStyles = useMemo(() => {
    const transitionStyle = "transition: background-color 0.3s;";
    return `
      ${selector} {
        background: ${selectedBackgroundColor} !important;
        ${isReduceMotionEnabled() ? "" : transitionStyle}
      }
    `;
  }, [selectedBackgroundColor, selector]);
  useEffect(() => {
    const selectorId = context.viewMode === "docs" ? `addon-backgrounds-docs-${context.id}` : `addon-backgrounds-color`;
    if (!isActive) {
      clearStyles(selectorId);
      return;
    }
    addBackgroundStyle(
      selectorId,
      backgroundStyles,
      context.viewMode === "docs" ? context.id : null
    );
  }, [isActive, backgroundStyles, context]);
  return StoryFn();
};

// src/decorators/withGrid.ts
import { dedent } from "ts-dedent";
import deprecate from "util-deprecate";
import { useMemo as useMemo2, useEffect as useEffect2 } from "@storybook/addons";
var deprecatedCellSizeWarning = deprecate(
  () => {
  },
  dedent`
    Backgrounds Addon: The cell size parameter has been changed.

    - parameters.grid.cellSize should now be parameters.backgrounds.grid.cellSize
    See https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#deprecated-grid-parameter
  `
);
var withGrid = (StoryFn, context) => {
  const { globals, parameters: parameters2 } = context;
  const gridParameters = parameters2[PARAM_KEY].grid;
  const isActive = globals[PARAM_KEY]?.grid === true && gridParameters.disable !== true;
  const { cellAmount, cellSize, opacity } = gridParameters;
  const isInDocs = context.viewMode === "docs";
  let gridSize;
  if (parameters2.grid?.cellSize) {
    gridSize = parameters2.grid.cellSize;
    deprecatedCellSizeWarning();
  } else {
    gridSize = cellSize;
  }
  const isLayoutPadded = parameters2.layout === void 0 || parameters2.layout === "padded";
  const defaultOffset = isLayoutPadded ? 16 : 0;
  const offsetX = gridParameters.offsetX ?? (isInDocs ? 20 : defaultOffset);
  const offsetY = gridParameters.offsetY ?? (isInDocs ? 20 : defaultOffset);
  const gridStyles = useMemo2(() => {
    const selector = context.viewMode === "docs" ? `#anchor--${context.id} .docs-story` : ".sb-show-main";
    const backgroundSize = [
      `${gridSize * cellAmount}px ${gridSize * cellAmount}px`,
      `${gridSize * cellAmount}px ${gridSize * cellAmount}px`,
      `${gridSize}px ${gridSize}px`,
      `${gridSize}px ${gridSize}px`
    ].join(", ");
    return `
      ${selector} {
        background-size: ${backgroundSize} !important;
        background-position: ${offsetX}px ${offsetY}px, ${offsetX}px ${offsetY}px, ${offsetX}px ${offsetY}px, ${offsetX}px ${offsetY}px !important;
        background-blend-mode: difference !important;
        background-image: linear-gradient(rgba(130, 130, 130, ${opacity}) 1px, transparent 1px),
         linear-gradient(90deg, rgba(130, 130, 130, ${opacity}) 1px, transparent 1px),
         linear-gradient(rgba(130, 130, 130, ${opacity / 2}) 1px, transparent 1px),
         linear-gradient(90deg, rgba(130, 130, 130, ${opacity / 2}) 1px, transparent 1px) !important;
      }
    `;
  }, [gridSize]);
  useEffect2(() => {
    const selectorId = context.viewMode === "docs" ? `addon-backgrounds-grid-docs-${context.id}` : `addon-backgrounds-grid`;
    if (!isActive) {
      clearStyles(selectorId);
      return;
    }
    addGridStyle(selectorId, gridStyles);
  }, [isActive, gridStyles, context]);
  return StoryFn();
};

// src/preview.tsx
var decorators = [withGrid, withBackground];
var parameters = {
  backgrounds: {
    grid: {
      cellSize: 20,
      opacity: 0.5,
      cellAmount: 5
    },
    values: [
      { name: "light", value: "#F8F8F8" },
      { name: "dark", value: "#333333" }
    ]
  }
};
export {
  decorators,
  parameters
};
