import {
  ADDON_ID,
  PARAM_KEY,
  getBackgroundColorByName
} from "./chunk-Q45YXXF4.mjs";

// src/manager.tsx
import React3, { Fragment as Fragment2 } from "react";
import { addons, types } from "@storybook/addons";

// src/containers/BackgroundSelector.tsx
import React, { Fragment, useCallback, useMemo, memo } from "react";
import memoize from "memoizerific";
import { useParameter, useGlobals } from "@storybook/api";
import { logger } from "@storybook/client-logger";
import { Icons, IconButton, WithTooltip, TooltipLinkList } from "@storybook/components";

// src/components/ColorIcon.tsx
import { styled } from "@storybook/theming";
var ColorIcon = styled.span(
  ({ background }) => ({
    borderRadius: "1rem",
    display: "block",
    height: "1rem",
    width: "1rem",
    background
  }),
  ({ theme }) => ({
    boxShadow: `${theme.appBorderColor} 0 0 0 1px inset`
  })
);

// src/containers/BackgroundSelector.tsx
var createBackgroundSelectorItem = memoize(1e3)(
  (id, name, value, hasSwatch, change, active) => ({
    id: id || name,
    title: name,
    onClick: () => {
      change({ selected: value, name });
    },
    value,
    right: hasSwatch ? /* @__PURE__ */ React.createElement(ColorIcon, {
      background: value
    }) : void 0,
    active
  })
);
var getDisplayedItems = memoize(10)(
  (backgrounds, selectedBackgroundColor, change) => {
    const backgroundSelectorItems = backgrounds.map(
      ({ name, value }) => createBackgroundSelectorItem(
        null,
        name,
        value,
        true,
        change,
        value === selectedBackgroundColor
      )
    );
    if (selectedBackgroundColor !== "transparent") {
      return [
        createBackgroundSelectorItem(
          "reset",
          "Clear background",
          "transparent",
          null,
          change,
          false
        ),
        ...backgroundSelectorItems
      ];
    }
    return backgroundSelectorItems;
  }
);
var DEFAULT_BACKGROUNDS_CONFIG = {
  default: null,
  disable: true,
  values: []
};
var BackgroundSelector = memo(() => {
  const backgroundsConfig = useParameter(
    PARAM_KEY,
    DEFAULT_BACKGROUNDS_CONFIG
  );
  const [globals, updateGlobals] = useGlobals();
  const globalsBackgroundColor = globals[PARAM_KEY]?.value;
  const selectedBackgroundColor = useMemo(() => {
    return getBackgroundColorByName(
      globalsBackgroundColor,
      backgroundsConfig.values,
      backgroundsConfig.default
    );
  }, [backgroundsConfig, globalsBackgroundColor]);
  if (Array.isArray(backgroundsConfig)) {
    logger.warn(
      "Addon Backgrounds api has changed in Storybook 6.0. Please refer to the migration guide: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md"
    );
  }
  const onBackgroundChange = useCallback(
    (value) => {
      updateGlobals({ [PARAM_KEY]: { ...globals[PARAM_KEY], value } });
    },
    [backgroundsConfig, globals, updateGlobals]
  );
  if (backgroundsConfig.disable) {
    return null;
  }
  return /* @__PURE__ */ React.createElement(Fragment, null, /* @__PURE__ */ React.createElement(WithTooltip, {
    placement: "top",
    trigger: "click",
    closeOnClick: true,
    tooltip: ({ onHide }) => {
      return /* @__PURE__ */ React.createElement(TooltipLinkList, {
        links: getDisplayedItems(
          backgroundsConfig.values,
          selectedBackgroundColor,
          ({ selected }) => {
            if (selectedBackgroundColor !== selected) {
              onBackgroundChange(selected);
            }
            onHide();
          }
        )
      });
    }
  }, /* @__PURE__ */ React.createElement(IconButton, {
    key: "background",
    title: "Change the background of the preview",
    active: selectedBackgroundColor !== "transparent"
  }, /* @__PURE__ */ React.createElement(Icons, {
    icon: "photo"
  }))));
});

// src/containers/GridSelector.tsx
import React2, { memo as memo2 } from "react";
import { useGlobals as useGlobals2, useParameter as useParameter2 } from "@storybook/api";
import { Icons as Icons2, IconButton as IconButton2 } from "@storybook/components";
var GridSelector = memo2(() => {
  const [globals, updateGlobals] = useGlobals2();
  const { grid } = useParameter2(PARAM_KEY, {
    grid: { disable: false }
  });
  if (grid?.disable) {
    return null;
  }
  const isActive = globals[PARAM_KEY]?.grid || false;
  return /* @__PURE__ */ React2.createElement(IconButton2, {
    key: "background",
    active: isActive,
    title: "Apply a grid to the preview",
    onClick: () => updateGlobals({
      [PARAM_KEY]: { ...globals[PARAM_KEY], grid: !isActive }
    })
  }, /* @__PURE__ */ React2.createElement(Icons2, {
    icon: "grid"
  }));
});

// src/manager.tsx
addons.register(ADDON_ID, () => {
  addons.add(ADDON_ID, {
    title: "Backgrounds",
    type: types.TOOL,
    match: ({ viewMode }) => !!(viewMode && viewMode.match(/^(story|docs)$/)),
    render: () => /* @__PURE__ */ React3.createElement(Fragment2, null, /* @__PURE__ */ React3.createElement(BackgroundSelector, null), /* @__PURE__ */ React3.createElement(GridSelector, null))
  });
});
