import "./chunk-7XPEOHKN.mjs";
import {
  ADDON_ID,
  EVENT_ID,
  PANEL_ID,
  PARAM_KEY
} from "./chunk-FCZDLLFZ.mjs";

// src/manager.tsx
import React3, { useState, useEffect } from "react";
import { addons, types } from "@storybook/addons";
import { STORY_CHANGED as STORY_CHANGED2 } from "@storybook/core-events";

// src/containers/ActionLogger/index.tsx
import React2, { Component } from "react";
import { dequal as deepEqual } from "dequal";
import { STORY_CHANGED } from "@storybook/core-events";

// src/components/ActionLogger/index.tsx
import React, { Fragment } from "react";
import { styled as styled2, withTheme } from "@storybook/theming";
import { Inspector } from "react-inspector";
import { ActionBar, ScrollArea } from "@storybook/components";

// src/components/ActionLogger/style.tsx
import { styled } from "@storybook/theming";
import { opacify } from "polished";
var Action = styled.div({
  display: "flex",
  padding: 0,
  borderLeft: "5px solid transparent",
  borderBottom: "1px solid transparent",
  transition: "all 0.1s",
  alignItems: "flex-start",
  whiteSpace: "pre"
});
var Counter = styled.div(({ theme }) => ({
  backgroundColor: opacify(0.5, theme.appBorderColor),
  color: theme.color.inverseText,
  fontSize: theme.typography.size.s1,
  fontWeight: theme.typography.weight.bold,
  lineHeight: 1,
  padding: "1px 5px",
  borderRadius: 20,
  margin: "2px 0px"
}));
var InspectorContainer = styled.div({
  flex: 1,
  padding: "0 0 0 5px"
});

// src/components/ActionLogger/index.tsx
var UnstyledWrapped = ({ children, className }) => /* @__PURE__ */ React.createElement(ScrollArea, {
  horizontal: true,
  vertical: true,
  className
}, children);
var Wrapper = styled2(UnstyledWrapped)({
  margin: 0,
  padding: "10px 5px 20px"
});
var ThemedInspector = withTheme(({ theme, ...props }) => /* @__PURE__ */ React.createElement(Inspector, {
  theme: theme.addonActionsTheme || "chromeLight",
  table: false,
  ...props
}));
var ActionLogger = ({ actions, onClear }) => /* @__PURE__ */ React.createElement(Fragment, null, /* @__PURE__ */ React.createElement(Wrapper, null, actions.map((action) => /* @__PURE__ */ React.createElement(Action, {
  key: action.id
}, action.count > 1 && /* @__PURE__ */ React.createElement(Counter, null, action.count), /* @__PURE__ */ React.createElement(InspectorContainer, null, /* @__PURE__ */ React.createElement(ThemedInspector, {
  sortObjectKeys: true,
  showNonenumerable: false,
  name: action.data.name,
  data: action.data.args || action.data
}))))), /* @__PURE__ */ React.createElement(ActionBar, {
  actionItems: [{ title: "Clear", onClick: onClear }]
}));

// src/containers/ActionLogger/index.tsx
var safeDeepEqual = (a, b) => {
  try {
    return deepEqual(a, b);
  } catch (e) {
    return false;
  }
};
var ActionLogger2 = class extends Component {
  constructor(props) {
    super(props);
    this.handleStoryChange = () => {
      const { actions } = this.state;
      if (actions.length > 0 && actions[0].options.clearOnStoryChange) {
        this.clearActions();
      }
    };
    this.addAction = (action) => {
      this.setState((prevState) => {
        const actions = [...prevState.actions];
        const previous = actions.length && actions[0];
        if (previous && safeDeepEqual(previous.data, action.data)) {
          previous.count++;
        } else {
          action.count = 1;
          actions.unshift(action);
        }
        return { actions: actions.slice(0, action.options.limit) };
      });
    };
    this.clearActions = () => {
      this.setState({ actions: [] });
    };
    this.mounted = false;
    this.state = { actions: [] };
  }
  componentDidMount() {
    this.mounted = true;
    const { api } = this.props;
    api.on(EVENT_ID, this.addAction);
    api.on(STORY_CHANGED, this.handleStoryChange);
  }
  componentWillUnmount() {
    this.mounted = false;
    const { api } = this.props;
    api.off(STORY_CHANGED, this.handleStoryChange);
    api.off(EVENT_ID, this.addAction);
  }
  render() {
    const { actions = [] } = this.state;
    const { active } = this.props;
    const props = {
      actions,
      onClear: this.clearActions
    };
    return active ? /* @__PURE__ */ React2.createElement(ActionLogger, {
      ...props
    }) : null;
  }
};

// src/manager.tsx
addons.register(ADDON_ID, (api) => {
  addons.addPanel(PANEL_ID, {
    title() {
      const [actionsCount, setActionsCount] = useState(0);
      const onEvent = () => setActionsCount((previous) => previous + 1);
      const onChange = () => setActionsCount(0);
      useEffect(() => {
        api.on(EVENT_ID, onEvent);
        api.on(STORY_CHANGED2, onChange);
        return () => {
          api.off(EVENT_ID, onEvent);
          api.off(STORY_CHANGED2, onChange);
        };
      });
      const suffix = actionsCount === 0 ? "" : ` (${actionsCount})`;
      return `Actions${suffix}`;
    },
    type: types.PANEL,
    render: ({ active, key }) => /* @__PURE__ */ React3.createElement(ActionLogger2, {
      key,
      api,
      active: !!active
    }),
    paramKey: PARAM_KEY
  });
});
