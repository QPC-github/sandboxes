"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// src/manager.tsx
var import_react3 = __toESM(require("react"));
var import_addons3 = require("@storybook/addons");
var import_core_events2 = require("@storybook/core-events");

// src/containers/ActionLogger/index.tsx
var import_react2 = __toESM(require("react"));
var import_dequal = require("dequal");
var import_core_events = require("@storybook/core-events");

// src/components/ActionLogger/index.tsx
var import_react = __toESM(require("react"));
var import_theming2 = require("@storybook/theming");
var import_react_inspector = require("react-inspector");
var import_components = require("@storybook/components");

// src/components/ActionLogger/style.tsx
var import_theming = require("@storybook/theming");
var import_polished = require("polished");
var Action = import_theming.styled.div({
  display: "flex",
  padding: 0,
  borderLeft: "5px solid transparent",
  borderBottom: "1px solid transparent",
  transition: "all 0.1s",
  alignItems: "flex-start",
  whiteSpace: "pre"
});
var Counter = import_theming.styled.div(({ theme }) => ({
  backgroundColor: (0, import_polished.opacify)(0.5, theme.appBorderColor),
  color: theme.color.inverseText,
  fontSize: theme.typography.size.s1,
  fontWeight: theme.typography.weight.bold,
  lineHeight: 1,
  padding: "1px 5px",
  borderRadius: 20,
  margin: "2px 0px"
}));
var InspectorContainer = import_theming.styled.div({
  flex: 1,
  padding: "0 0 0 5px"
});

// src/components/ActionLogger/index.tsx
var UnstyledWrapped = ({ children, className }) => /* @__PURE__ */ import_react.default.createElement(import_components.ScrollArea, {
  horizontal: true,
  vertical: true,
  className
}, children);
var Wrapper = (0, import_theming2.styled)(UnstyledWrapped)({
  margin: 0,
  padding: "10px 5px 20px"
});
var ThemedInspector = (0, import_theming2.withTheme)(({ theme, ...props }) => /* @__PURE__ */ import_react.default.createElement(import_react_inspector.Inspector, {
  theme: theme.addonActionsTheme || "chromeLight",
  table: false,
  ...props
}));
var ActionLogger = ({ actions: actions2, onClear }) => /* @__PURE__ */ import_react.default.createElement(import_react.Fragment, null, /* @__PURE__ */ import_react.default.createElement(Wrapper, null, actions2.map((action2) => /* @__PURE__ */ import_react.default.createElement(Action, {
  key: action2.id
}, action2.count > 1 && /* @__PURE__ */ import_react.default.createElement(Counter, null, action2.count), /* @__PURE__ */ import_react.default.createElement(InspectorContainer, null, /* @__PURE__ */ import_react.default.createElement(ThemedInspector, {
  sortObjectKeys: true,
  showNonenumerable: false,
  name: action2.data.name,
  data: action2.data.args || action2.data
}))))), /* @__PURE__ */ import_react.default.createElement(import_components.ActionBar, {
  actionItems: [{ title: "Clear", onClick: onClear }]
}));

// src/constants.ts
var PARAM_KEY = "actions";
var ADDON_ID = "storybook/actions";
var PANEL_ID = `${ADDON_ID}/panel`;
var EVENT_ID = `${ADDON_ID}/action-event`;

// src/runtime/action.ts
var import_v4 = __toESM(require("uuid-browser/v4"));
var import_addons = require("@storybook/addons");

// src/runtime/configureActions.ts
var config = {
  depth: 10,
  clearOnStoryChange: true,
  limit: 50
};

// src/runtime/action.ts
var findProto = (obj, callback) => {
  const proto = Object.getPrototypeOf(obj);
  if (!proto || callback(proto))
    return proto;
  return findProto(proto, callback);
};
var isReactSyntheticEvent = (e) => Boolean(
  typeof e === "object" && e && findProto(e, (proto) => /^Synthetic(?:Base)?Event$/.test(proto.constructor.name)) && typeof e.persist === "function"
);
var serializeArg = (a) => {
  if (isReactSyntheticEvent(a)) {
    const e = Object.create(
      a.constructor.prototype,
      Object.getOwnPropertyDescriptors(a)
    );
    e.persist();
    const viewDescriptor = Object.getOwnPropertyDescriptor(e, "view");
    const view = viewDescriptor == null ? void 0 : viewDescriptor.value;
    if (typeof view === "object" && (view == null ? void 0 : view.constructor.name) === "Window") {
      Object.defineProperty(e, "view", {
        ...viewDescriptor,
        value: Object.create(view.constructor.prototype)
      });
    }
    return e;
  }
  return a;
};
function action(name, options = {}) {
  const actionOptions = {
    ...config,
    ...options
  };
  const handler = function actionHandler(...args) {
    const channel = import_addons.addons.getChannel();
    const id = (0, import_v4.default)();
    const minDepth = 5;
    const serializedArgs = args.map(serializeArg);
    const normalizedArgs = args.length > 1 ? serializedArgs : serializedArgs[0];
    const actionDisplayToEmit = {
      id,
      count: 0,
      data: { name, args: normalizedArgs },
      options: {
        ...actionOptions,
        maxDepth: minDepth + (actionOptions.depth || 3),
        allowFunction: actionOptions.allowFunction || false
      }
    };
    channel.emit(EVENT_ID, actionDisplayToEmit);
  };
  handler.isAction = true;
  return handler;
}

// src/runtime/actions.ts
var actions = (...args) => {
  let options = config;
  let names = args;
  if (names.length === 1 && Array.isArray(names[0])) {
    [names] = names;
  }
  if (names.length !== 1 && typeof names[names.length - 1] !== "string") {
    options = {
      ...config,
      ...names.pop()
    };
  }
  let namesObject = names[0];
  if (names.length !== 1 || typeof namesObject === "string") {
    namesObject = {};
    names.forEach((name) => {
      namesObject[name] = name;
    });
  }
  const actionsObject = {};
  Object.keys(namesObject).forEach((name) => {
    actionsObject[name] = action(namesObject[name], options);
  });
  return actionsObject;
};

// src/runtime/decorateAction.ts
var import_util_deprecate = __toESM(require("util-deprecate"));
var import_ts_dedent = require("ts-dedent");
var deprecatedCallback = (0, import_util_deprecate.default)(
  () => {
  },
  "decorate.* is no longer supported as of Storybook 6.0."
);

// src/runtime/withActions.ts
var import_global = __toESM(require("global"));
var import_addons2 = require("@storybook/addons");
var import_util_deprecate2 = __toESM(require("util-deprecate"));
var import_ts_dedent2 = require("ts-dedent");
var { document, Element } = import_global.default;
var delegateEventSplitter = /^(\S+)\s*(.*)$/;
var isIE = Element != null && !Element.prototype.matches;
var matchesMethod = isIE ? "msMatchesSelector" : "matches";
var hasMatchInAncestry = (element, selector) => {
  if (element[matchesMethod](selector)) {
    return true;
  }
  const parent = element.parentElement;
  if (!parent) {
    return false;
  }
  return hasMatchInAncestry(parent, selector);
};
var createHandlers = (actionsFn, ...handles) => {
  const actionsObject = actionsFn(...handles);
  return Object.entries(actionsObject).map(([key, action2]) => {
    const [_, eventName, selector] = key.match(delegateEventSplitter) || [];
    return {
      eventName,
      handler: (e) => {
        if (!selector || hasMatchInAncestry(e.target, selector)) {
          action2(e);
        }
      }
    };
  });
};
var applyEventHandlers = (0, import_util_deprecate2.default)(
  (actionsFn, ...handles) => {
    const root = document && document.getElementById("storybook-root");
    (0, import_addons2.useEffect)(() => {
      if (root != null) {
        const handlers = createHandlers(actionsFn, ...handles);
        handlers.forEach(({ eventName, handler }) => root.addEventListener(eventName, handler));
        return () => handlers.forEach(
          ({ eventName, handler }) => root.removeEventListener(eventName, handler)
        );
      }
      return void 0;
    }, [root, actionsFn, handles]);
  },
  import_ts_dedent2.dedent`
    withActions(options) is deprecated, please configure addon-actions using the addParameter api:

    addParameters({
      actions: {
        handles: options
      },
    });
  `
);
var applyDeprecatedOptions = (actionsFn, options) => {
  if (options) {
    applyEventHandlers(actionsFn, options);
  }
};
var withActions = (0, import_addons2.makeDecorator)({
  name: "withActions",
  parameterName: PARAM_KEY,
  skipIfNoParametersOrOptions: true,
  wrapper: (getStory, context, { parameters, options }) => {
    applyDeprecatedOptions(actions, options);
    if (parameters && parameters.handles)
      applyEventHandlers(actions, ...parameters.handles);
    return getStory(context);
  }
});

// src/index.ts
if (module && module.hot && module.hot.decline) {
  module.hot.decline();
}

// src/containers/ActionLogger/index.tsx
var safeDeepEqual = (a, b) => {
  try {
    return (0, import_dequal.dequal)(a, b);
  } catch (e) {
    return false;
  }
};
var ActionLogger2 = class extends import_react2.Component {
  constructor(props) {
    super(props);
    this.handleStoryChange = () => {
      const { actions: actions2 } = this.state;
      if (actions2.length > 0 && actions2[0].options.clearOnStoryChange) {
        this.clearActions();
      }
    };
    this.addAction = (action2) => {
      this.setState((prevState) => {
        const actions2 = [...prevState.actions];
        const previous = actions2.length && actions2[0];
        if (previous && safeDeepEqual(previous.data, action2.data)) {
          previous.count++;
        } else {
          action2.count = 1;
          actions2.unshift(action2);
        }
        return { actions: actions2.slice(0, action2.options.limit) };
      });
    };
    this.clearActions = () => {
      this.setState({ actions: [] });
    };
    this.mounted = false;
    this.state = { actions: [] };
  }
  componentDidMount() {
    this.mounted = true;
    const { api } = this.props;
    api.on(EVENT_ID, this.addAction);
    api.on(import_core_events.STORY_CHANGED, this.handleStoryChange);
  }
  componentWillUnmount() {
    this.mounted = false;
    const { api } = this.props;
    api.off(import_core_events.STORY_CHANGED, this.handleStoryChange);
    api.off(EVENT_ID, this.addAction);
  }
  render() {
    const { actions: actions2 = [] } = this.state;
    const { active } = this.props;
    const props = {
      actions: actions2,
      onClear: this.clearActions
    };
    return active ? /* @__PURE__ */ import_react2.default.createElement(ActionLogger, {
      ...props
    }) : null;
  }
};

// src/manager.tsx
import_addons3.addons.register(ADDON_ID, (api) => {
  import_addons3.addons.addPanel(PANEL_ID, {
    title() {
      const [actionsCount, setActionsCount] = (0, import_react3.useState)(0);
      const onEvent = () => setActionsCount((previous) => previous + 1);
      const onChange = () => setActionsCount(0);
      (0, import_react3.useEffect)(() => {
        api.on(EVENT_ID, onEvent);
        api.on(import_core_events2.STORY_CHANGED, onChange);
        return () => {
          api.off(EVENT_ID, onEvent);
          api.off(import_core_events2.STORY_CHANGED, onChange);
        };
      });
      const suffix = actionsCount === 0 ? "" : ` (${actionsCount})`;
      return `Actions${suffix}`;
    },
    type: import_addons3.types.PANEL,
    render: ({ active, key }) => /* @__PURE__ */ import_react3.default.createElement(ActionLogger2, {
      key,
      api,
      active: !!active
    }),
    paramKey: PARAM_KEY
  });
});
