import {
  PARAM_KEY
} from "./chunk-5CZDYUKT.mjs";

// src/utils.ts
import global from "global";
import { addons, makeDecorator } from "@storybook/addons";
import { STORY_CHANGED, SELECT_STORY } from "@storybook/core-events";
import { toId } from "@storybook/csf";
var { document, HTMLElement } = global;
function parseQuery(queryString) {
  const query = {};
  const pairs = (queryString[0] === "?" ? queryString.substring(1) : queryString).split("&").filter(Boolean);
  for (let i = 0; i < pairs.length; i++) {
    const pair = pairs[i].split("=");
    query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || "");
  }
  return query;
}
var navigate = (params) => addons.getChannel().emit(SELECT_STORY, params);
var hrefTo = (title, name) => {
  return new Promise((resolve) => {
    const { location } = document;
    const query = parseQuery(location.search);
    const existingId = [].concat(query.id)[0];
    const titleToLink = title || existingId.split("--", 2)[0];
    const id = toId(titleToLink, name);
    const url = `${location.origin + location.pathname}?${Object.entries({ ...query, id }).map((item) => `${item[0]}=${item[1]}`).join("&")}`;
    resolve(url);
  });
};
var valueOrCall = (args) => (value) => typeof value === "function" ? value(...args) : value;
var linkTo = (idOrTitle, nameInput) => (...args) => {
  const resolver = valueOrCall(args);
  const title = resolver(idOrTitle);
  const name = nameInput ? resolver(nameInput) : false;
  if (title?.match(/--/) && !name) {
    navigate({ storyId: title });
  } else if (name && title) {
    navigate({ kind: title, story: name });
  } else if (title) {
    navigate({ kind: title });
  } else if (name) {
    navigate({ story: name });
  }
};
var linksListener = (e) => {
  const { target } = e;
  if (!(target instanceof HTMLElement)) {
    return;
  }
  const element = target;
  const { sbKind: kind, sbStory: story } = element.dataset;
  if (kind || story) {
    e.preventDefault();
    navigate({ kind, story });
  }
};
var hasListener = false;
var on = () => {
  if (!hasListener) {
    hasListener = true;
    document.addEventListener("click", linksListener);
  }
};
var off = () => {
  if (hasListener) {
    hasListener = false;
    document.removeEventListener("click", linksListener);
  }
};
var withLinks = makeDecorator({
  name: "withLinks",
  parameterName: PARAM_KEY,
  wrapper: (getStory, context) => {
    on();
    addons.getChannel().once(STORY_CHANGED, off);
    return getStory(context);
  }
});

export {
  navigate,
  hrefTo,
  linkTo,
  withLinks
};
