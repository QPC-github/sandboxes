// src/preview/index.ts
import { ClientApi as ClientApi2 } from "@storybook/client-api";
import { StoryStore } from "@storybook/store";
import { toId } from "@storybook/csf";

// src/preview/start.ts
import global from "global";
import deprecate from "util-deprecate";
import { ClientApi } from "@storybook/client-api";
import { PreviewWeb } from "@storybook/preview-web";
import { createChannel } from "@storybook/channel-postmessage";
import { addons } from "@storybook/addons";
import { FORCE_RE_RENDER } from "@storybook/core-events";

// src/preview/executeLoadable.ts
import { logger } from "@storybook/client-logger";
function executeLoadable(loadable) {
  let reqs = null;
  if (Array.isArray(loadable)) {
    reqs = loadable;
  } else if (loadable.keys) {
    reqs = [loadable];
  }
  let exportsMap = /* @__PURE__ */ new Map();
  if (reqs) {
    reqs.forEach((req) => {
      req.keys().forEach((filename) => {
        try {
          const fileExports = req(filename);
          exportsMap.set(
            typeof req.resolve === "function" ? req.resolve(filename) : filename,
            fileExports
          );
        } catch (error) {
          const errorString = error.message && error.stack ? `${error.message}
 ${error.stack}` : error.toString();
          logger.error(`Unexpected error while loading ${filename}: ${errorString}`);
        }
      });
    });
  } else {
    const exported = loadable();
    if (Array.isArray(exported) && exported.every((obj) => obj.default != null)) {
      exportsMap = new Map(
        exported.map((fileExports, index) => [`exports-map-${index}`, fileExports])
      );
    } else if (exported) {
      logger.warn(
        `Loader function passed to 'configure' should return void or an array of module exports that all contain a 'default' export. Received: ${JSON.stringify(
          exported
        )}`
      );
    }
  }
  return exportsMap;
}
function executeLoadableForChanges(loadable, m) {
  let lastExportsMap = m?.hot?.data?.lastExportsMap || /* @__PURE__ */ new Map();
  if (m?.hot?.dispose) {
    m.hot.accept();
    m.hot.dispose((data) => {
      data.lastExportsMap = lastExportsMap;
    });
  }
  const exportsMap = executeLoadable(loadable);
  const added = /* @__PURE__ */ new Map();
  Array.from(exportsMap.entries()).filter(([, fileExports]) => !!fileExports.default).filter(([fileName, fileExports]) => lastExportsMap.get(fileName) !== fileExports).forEach(([fileName, fileExports]) => added.set(fileName, fileExports));
  const removed = /* @__PURE__ */ new Map();
  Array.from(lastExportsMap.keys()).filter((fileName) => !exportsMap.has(fileName)).forEach((fileName) => removed.set(fileName, lastExportsMap.get(fileName)));
  lastExportsMap = exportsMap;
  return { added, removed };
}

// src/preview/start.ts
var { window: globalWindow, FEATURES } = global;
var configureDeprecationWarning = deprecate(
  () => {
  },
  `\`configure()\` is deprecated and will be removed in Storybook 7.0. 
Please use the \`stories\` field of \`main.js\` to load stories.
Read more at https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#deprecated-configure`
);
var removedApi = (name) => () => {
  throw new Error(`@storybook/client-api:${name} was removed in storyStoreV7.`);
};
function start(renderToDOM, { decorateStory, render } = {}) {
  if (globalWindow) {
    globalWindow.IS_STORYBOOK = true;
  }
  if (FEATURES?.storyStoreV7) {
    return {
      forceReRender: removedApi("forceReRender"),
      getStorybook: removedApi("getStorybook"),
      configure: removedApi("configure"),
      clientApi: {
        addDecorator: removedApi("clientApi.addDecorator"),
        addParameters: removedApi("clientApi.addParameters"),
        clearDecorators: removedApi("clientApi.clearDecorators"),
        addLoader: removedApi("clientApi.addLoader"),
        setAddon: removedApi("clientApi.setAddon"),
        getStorybook: removedApi("clientApi.getStorybook"),
        storiesOf: removedApi("clientApi.storiesOf"),
        raw: removedApi("raw")
      }
    };
  }
  const channel = createChannel({ page: "preview" });
  addons.setChannel(channel);
  const clientApi = new ClientApi();
  const preview = new PreviewWeb();
  let initialized = false;
  const importFn = (path) => clientApi.importFn(path);
  function onStoriesChanged() {
    const storyIndex = clientApi.getStoryIndex();
    preview.onStoriesChanged({ storyIndex, importFn });
  }
  clientApi.onImportFnChanged = onStoriesChanged;
  clientApi.storyStore = preview.storyStore;
  if (globalWindow) {
    globalWindow.__STORYBOOK_CLIENT_API__ = clientApi;
    globalWindow.__STORYBOOK_ADDONS_CHANNEL__ = channel;
    globalWindow.__STORYBOOK_PREVIEW__ = preview;
    globalWindow.__STORYBOOK_STORY_STORE__ = preview.storyStore;
  }
  return {
    forceReRender: () => channel.emit(FORCE_RE_RENDER),
    getStorybook: () => [],
    clientApi,
    configure(framework, loadable, m, showDeprecationWarning = true) {
      if (showDeprecationWarning) {
        configureDeprecationWarning();
      }
      clientApi.addParameters({ framework });
      const getProjectAnnotations = () => {
        const { added, removed } = executeLoadableForChanges(loadable, m);
        Array.from(added.entries()).forEach(
          ([fileName, fileExports]) => clientApi.facade.addStoriesFromExports(fileName, fileExports)
        );
        Array.from(removed.entries()).forEach(
          ([fileName]) => clientApi.facade.clearFilenameExports(fileName)
        );
        return {
          render,
          ...clientApi.facade.projectAnnotations,
          renderToDOM,
          applyDecorators: decorateStory
        };
      };
      if (!initialized) {
        preview.initialize({
          getStoryIndex: () => clientApi.getStoryIndex(),
          importFn,
          getProjectAnnotations
        });
        initialized = true;
      } else {
        getProjectAnnotations();
        onStoriesChanged();
      }
    }
  };
}
export {
  ClientApi2 as ClientApi,
  StoryStore,
  start,
  toId
};
