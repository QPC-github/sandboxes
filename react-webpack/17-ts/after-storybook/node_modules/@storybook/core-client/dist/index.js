var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  ClientApi: () => import_client_api2.ClientApi,
  StoryStore: () => import_store.StoryStore,
  start: () => start,
  toId: () => import_csf.toId
});
module.exports = __toCommonJS(src_exports);

// src/preview/index.ts
var import_client_api2 = require("@storybook/client-api");
var import_store = require("@storybook/store");
var import_csf = require("@storybook/csf");

// src/preview/start.ts
var import_global = __toESM(require("global"));
var import_util_deprecate = __toESM(require("util-deprecate"));
var import_client_api = require("@storybook/client-api");
var import_preview_web = require("@storybook/preview-web");
var import_channel_postmessage = require("@storybook/channel-postmessage");
var import_addons = require("@storybook/addons");
var import_core_events = require("@storybook/core-events");

// src/preview/executeLoadable.ts
var import_client_logger = require("@storybook/client-logger");
function executeLoadable(loadable) {
  let reqs = null;
  if (Array.isArray(loadable)) {
    reqs = loadable;
  } else if (loadable.keys) {
    reqs = [loadable];
  }
  let exportsMap = /* @__PURE__ */ new Map();
  if (reqs) {
    reqs.forEach((req) => {
      req.keys().forEach((filename) => {
        try {
          const fileExports = req(filename);
          exportsMap.set(
            typeof req.resolve === "function" ? req.resolve(filename) : filename,
            fileExports
          );
        } catch (error) {
          const errorString = error.message && error.stack ? `${error.message}
 ${error.stack}` : error.toString();
          import_client_logger.logger.error(`Unexpected error while loading ${filename}: ${errorString}`);
        }
      });
    });
  } else {
    const exported = loadable();
    if (Array.isArray(exported) && exported.every((obj) => obj.default != null)) {
      exportsMap = new Map(
        exported.map((fileExports, index) => [`exports-map-${index}`, fileExports])
      );
    } else if (exported) {
      import_client_logger.logger.warn(
        `Loader function passed to 'configure' should return void or an array of module exports that all contain a 'default' export. Received: ${JSON.stringify(
          exported
        )}`
      );
    }
  }
  return exportsMap;
}
function executeLoadableForChanges(loadable, m) {
  var _a, _b, _c;
  let lastExportsMap = ((_b = (_a = m == null ? void 0 : m.hot) == null ? void 0 : _a.data) == null ? void 0 : _b.lastExportsMap) || /* @__PURE__ */ new Map();
  if ((_c = m == null ? void 0 : m.hot) == null ? void 0 : _c.dispose) {
    m.hot.accept();
    m.hot.dispose((data) => {
      data.lastExportsMap = lastExportsMap;
    });
  }
  const exportsMap = executeLoadable(loadable);
  const added = /* @__PURE__ */ new Map();
  Array.from(exportsMap.entries()).filter(([, fileExports]) => !!fileExports.default).filter(([fileName, fileExports]) => lastExportsMap.get(fileName) !== fileExports).forEach(([fileName, fileExports]) => added.set(fileName, fileExports));
  const removed = /* @__PURE__ */ new Map();
  Array.from(lastExportsMap.keys()).filter((fileName) => !exportsMap.has(fileName)).forEach((fileName) => removed.set(fileName, lastExportsMap.get(fileName)));
  lastExportsMap = exportsMap;
  return { added, removed };
}

// src/preview/start.ts
var { window: globalWindow, FEATURES } = import_global.default;
var configureDeprecationWarning = (0, import_util_deprecate.default)(
  () => {
  },
  `\`configure()\` is deprecated and will be removed in Storybook 7.0. 
Please use the \`stories\` field of \`main.js\` to load stories.
Read more at https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#deprecated-configure`
);
var removedApi = (name) => () => {
  throw new Error(`@storybook/client-api:${name} was removed in storyStoreV7.`);
};
function start(renderToDOM, { decorateStory, render } = {}) {
  if (globalWindow) {
    globalWindow.IS_STORYBOOK = true;
  }
  if (FEATURES == null ? void 0 : FEATURES.storyStoreV7) {
    return {
      forceReRender: removedApi("forceReRender"),
      getStorybook: removedApi("getStorybook"),
      configure: removedApi("configure"),
      clientApi: {
        addDecorator: removedApi("clientApi.addDecorator"),
        addParameters: removedApi("clientApi.addParameters"),
        clearDecorators: removedApi("clientApi.clearDecorators"),
        addLoader: removedApi("clientApi.addLoader"),
        setAddon: removedApi("clientApi.setAddon"),
        getStorybook: removedApi("clientApi.getStorybook"),
        storiesOf: removedApi("clientApi.storiesOf"),
        raw: removedApi("raw")
      }
    };
  }
  const channel = (0, import_channel_postmessage.createChannel)({ page: "preview" });
  import_addons.addons.setChannel(channel);
  const clientApi = new import_client_api.ClientApi();
  const preview = new import_preview_web.PreviewWeb();
  let initialized = false;
  const importFn = (path) => clientApi.importFn(path);
  function onStoriesChanged() {
    const storyIndex = clientApi.getStoryIndex();
    preview.onStoriesChanged({ storyIndex, importFn });
  }
  clientApi.onImportFnChanged = onStoriesChanged;
  clientApi.storyStore = preview.storyStore;
  if (globalWindow) {
    globalWindow.__STORYBOOK_CLIENT_API__ = clientApi;
    globalWindow.__STORYBOOK_ADDONS_CHANNEL__ = channel;
    globalWindow.__STORYBOOK_PREVIEW__ = preview;
    globalWindow.__STORYBOOK_STORY_STORE__ = preview.storyStore;
  }
  return {
    forceReRender: () => channel.emit(import_core_events.FORCE_RE_RENDER),
    getStorybook: () => [],
    clientApi,
    configure(framework, loadable, m, showDeprecationWarning = true) {
      if (showDeprecationWarning) {
        configureDeprecationWarning();
      }
      clientApi.addParameters({ framework });
      const getProjectAnnotations = () => {
        const { added, removed } = executeLoadableForChanges(loadable, m);
        Array.from(added.entries()).forEach(
          ([fileName, fileExports]) => clientApi.facade.addStoriesFromExports(fileName, fileExports)
        );
        Array.from(removed.entries()).forEach(
          ([fileName]) => clientApi.facade.clearFilenameExports(fileName)
        );
        return {
          render,
          ...clientApi.facade.projectAnnotations,
          renderToDOM,
          applyDecorators: decorateStory
        };
      };
      if (!initialized) {
        preview.initialize({
          getStoryIndex: () => clientApi.getStoryIndex(),
          importFn,
          getProjectAnnotations
        });
        initialized = true;
      } else {
        getProjectAnnotations();
        onStoriesChanged();
      }
    }
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ClientApi,
  StoryStore,
  start,
  toId
});
