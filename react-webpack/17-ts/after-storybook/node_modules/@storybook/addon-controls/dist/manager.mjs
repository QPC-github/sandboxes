import {
  ADDON_ID,
  PARAM_KEY
} from "./chunk-CG3WXPJZ.mjs";

// src/manager.tsx
import React2 from "react";
import { addons, types } from "@storybook/addons";
import { AddonPanel } from "@storybook/components";
import { useArgTypes as useArgTypes2 } from "@storybook/api";

// src/ControlsPanel.tsx
import React from "react";
import {
  useArgs,
  useGlobals,
  useArgTypes,
  useParameter,
  useStorybookState
} from "@storybook/api";
import {
  PureArgsTable as ArgsTable,
  NoControlsWarning
} from "@storybook/blocks";
var ControlsPanel = () => {
  const [args, updateArgs, resetArgs] = useArgs();
  const [globals] = useGlobals();
  const rows = useArgTypes();
  const isArgsStory = useParameter("__isArgsStory", false);
  const {
    expanded,
    sort,
    presetColors,
    hideNoControlsWarning = false
  } = useParameter(PARAM_KEY, {});
  const { path } = useStorybookState();
  const hasControls = Object.values(rows).some((arg) => arg?.control);
  const showWarning = !(hasControls && isArgsStory) && !hideNoControlsWarning;
  const withPresetColors = Object.entries(rows).reduce((acc, [key, arg]) => {
    if (arg?.control?.type !== "color" || arg?.control?.presetColors)
      acc[key] = arg;
    else
      acc[key] = { ...arg, control: { ...arg.control, presetColors } };
    return acc;
  }, {});
  return /* @__PURE__ */ React.createElement(React.Fragment, null, showWarning && /* @__PURE__ */ React.createElement(NoControlsWarning, null), /* @__PURE__ */ React.createElement(ArgsTable, {
    ...{
      key: path,
      compact: !expanded && hasControls,
      rows: withPresetColors,
      args,
      globals,
      updateArgs,
      resetArgs,
      inAddonPanel: true,
      sort
    }
  }));
};

// src/manager.tsx
addons.register(ADDON_ID, (api) => {
  addons.addPanel(ADDON_ID, {
    title() {
      const rows = useArgTypes2();
      const controlsCount = Object.values(rows).filter((argType) => argType?.control).length;
      const suffix = controlsCount === 0 ? "" : ` (${controlsCount})`;
      return `Controls${suffix}`;
    },
    type: types.PANEL,
    paramKey: PARAM_KEY,
    render: ({ key, active }) => {
      if (!active || !api.getCurrentStoryData()) {
        return null;
      }
      return /* @__PURE__ */ React2.createElement(AddonPanel, {
        key,
        active
      }, /* @__PURE__ */ React2.createElement(ControlsPanel, null));
    }
  });
});
