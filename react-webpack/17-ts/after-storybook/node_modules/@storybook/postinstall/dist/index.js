var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  getFrameworks: () => getFrameworks,
  presetsAddPreset: () => addPreset
});
module.exports = __toCommonJS(src_exports);

// src/presets.ts
function addPreset(preset, presetOptions, { api, root }) {
  const j = api.jscodeshift;
  const moduleExports = [];
  root.find(j.AssignmentExpression).filter(
    (assignment) => assignment.node.left.type === "MemberExpression" && assignment.node.left.object.name === "module" && assignment.node.left.property.name === "exports"
  ).forEach((exp) => moduleExports.push(exp));
  let exportArray = null;
  switch (moduleExports.length) {
    case 0: {
      exportArray = j.arrayExpression([]);
      const exportStatement = j.assignmentStatement(
        "=",
        j.memberExpression(j.identifier("module"), j.identifier("exports")),
        exportArray
      );
      root.get().node.program.body.push(exportStatement);
      break;
    }
    case 1:
      exportArray = moduleExports[0].node.right;
      break;
    default:
      throw new Error("Multiple module export statements");
  }
  let presetConfig = j.literal(preset);
  if (presetOptions) {
    const optionsJson = `const x = ${JSON.stringify(presetOptions)}`;
    const optionsRoot = j(optionsJson);
    const optionsNode = optionsRoot.find(j.VariableDeclarator).get().node.init;
    presetConfig = j.objectExpression([
      j.property("init", j.identifier("name"), j.literal(preset)),
      j.property("init", j.identifier("options"), optionsNode)
    ]);
  }
  exportArray.elements.push(presetConfig);
}

// src/frameworks.ts
var FRAMEWORKS = [
  "angular",
  "ember",
  "html",
  "marko",
  "mithril",
  "preact",
  "rax",
  "react",
  "react-native",
  "riot",
  "svelte",
  "vue",
  "web-components"
];
var getFrameworks = ({ dependencies, devDependencies }) => {
  const allDeps = {};
  Object.assign(allDeps, dependencies || {});
  Object.assign(allDeps, devDependencies || {});
  return FRAMEWORKS.filter((f) => !!allDeps[`@storybook/${f}`]);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getFrameworks,
  presetsAddPreset
});
