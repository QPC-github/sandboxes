// src/constants.ts
var ADDON_ID = "storybook/viewport";
var PARAM_KEY = "viewport";
var UPDATE = `${ADDON_ID}/update`;
var CONFIGURE = `${ADDON_ID}/configure`;
var SET = `${ADDON_ID}/setStoryDefaultViewport`;
var CHANGED = `${ADDON_ID}/viewportChanged`;

// src/shortcuts.ts
var getCurrentViewportIndex = (viewportsKeys, current) => viewportsKeys.indexOf(current);
var getNextViewport = (viewportsKeys, current) => {
  const currentViewportIndex = getCurrentViewportIndex(viewportsKeys, current);
  return currentViewportIndex === viewportsKeys.length - 1 ? viewportsKeys[0] : viewportsKeys[currentViewportIndex + 1];
};
var getPreviousViewport = (viewportsKeys, current) => {
  const currentViewportIndex = getCurrentViewportIndex(viewportsKeys, current);
  return currentViewportIndex < 1 ? viewportsKeys[viewportsKeys.length - 1] : viewportsKeys[currentViewportIndex - 1];
};
var registerShortcuts = async (api, setState, viewportsKeys) => {
  await api.setAddonShortcut(ADDON_ID, {
    label: "Previous viewport",
    defaultShortcut: ["shift", "V"],
    actionName: "previous",
    action: () => {
      const { selected, isRotated } = api.getAddonState(ADDON_ID);
      setState({
        selected: getPreviousViewport(viewportsKeys, selected),
        isRotated
      });
    }
  });
  await api.setAddonShortcut(ADDON_ID, {
    label: "Next viewport",
    defaultShortcut: ["V"],
    actionName: "next",
    action: () => {
      const { selected, isRotated } = api.getAddonState(ADDON_ID);
      setState({
        selected: getNextViewport(viewportsKeys, selected),
        isRotated
      });
    }
  });
  await api.setAddonShortcut(ADDON_ID, {
    label: "Reset viewport",
    defaultShortcut: ["alt", "V"],
    actionName: "reset",
    action: () => {
      const { isRotated } = api.getAddonState(ADDON_ID);
      setState({
        selected: "reset",
        isRotated
      });
    }
  });
};

export {
  ADDON_ID,
  PARAM_KEY,
  UPDATE,
  CONFIGURE,
  SET,
  CHANGED,
  registerShortcuts
};
