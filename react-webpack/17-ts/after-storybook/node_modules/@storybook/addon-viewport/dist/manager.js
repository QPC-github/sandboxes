var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// src/manager.tsx
var React2 = __toESM(require("react"));
var import_addons = require("@storybook/addons");

// src/constants.ts
var ADDON_ID = "storybook/viewport";
var PARAM_KEY = "viewport";
var UPDATE = `${ADDON_ID}/update`;
var CONFIGURE = `${ADDON_ID}/configure`;
var SET = `${ADDON_ID}/setStoryDefaultViewport`;
var CHANGED = `${ADDON_ID}/viewportChanged`;

// src/Tool.tsx
var import_react = __toESM(require("react"));
var import_memoizerific = __toESM(require("memoizerific"));
var import_theming = require("@storybook/theming");
var import_components = require("@storybook/components");
var import_api = require("@storybook/api");

// src/shortcuts.ts
var getCurrentViewportIndex = (viewportsKeys, current) => viewportsKeys.indexOf(current);
var getNextViewport = (viewportsKeys, current) => {
  const currentViewportIndex = getCurrentViewportIndex(viewportsKeys, current);
  return currentViewportIndex === viewportsKeys.length - 1 ? viewportsKeys[0] : viewportsKeys[currentViewportIndex + 1];
};
var getPreviousViewport = (viewportsKeys, current) => {
  const currentViewportIndex = getCurrentViewportIndex(viewportsKeys, current);
  return currentViewportIndex < 1 ? viewportsKeys[viewportsKeys.length - 1] : viewportsKeys[currentViewportIndex - 1];
};
var registerShortcuts = async (api, setState, viewportsKeys) => {
  await api.setAddonShortcut(ADDON_ID, {
    label: "Previous viewport",
    defaultShortcut: ["shift", "V"],
    actionName: "previous",
    action: () => {
      const { selected, isRotated } = api.getAddonState(ADDON_ID);
      setState({
        selected: getPreviousViewport(viewportsKeys, selected),
        isRotated
      });
    }
  });
  await api.setAddonShortcut(ADDON_ID, {
    label: "Next viewport",
    defaultShortcut: ["V"],
    actionName: "next",
    action: () => {
      const { selected, isRotated } = api.getAddonState(ADDON_ID);
      setState({
        selected: getNextViewport(viewportsKeys, selected),
        isRotated
      });
    }
  });
  await api.setAddonShortcut(ADDON_ID, {
    label: "Reset viewport",
    defaultShortcut: ["alt", "V"],
    actionName: "reset",
    action: () => {
      const { isRotated } = api.getAddonState(ADDON_ID);
      setState({
        selected: "reset",
        isRotated
      });
    }
  });
};

// src/defaults.ts
var MINIMAL_VIEWPORTS = {
  mobile1: {
    name: "Small mobile",
    styles: {
      height: "568px",
      width: "320px"
    },
    type: "mobile"
  },
  mobile2: {
    name: "Large mobile",
    styles: {
      height: "896px",
      width: "414px"
    },
    type: "mobile"
  },
  tablet: {
    name: "Tablet",
    styles: {
      height: "1112px",
      width: "834px"
    },
    type: "tablet"
  }
};

// src/Tool.tsx
var toList = (0, import_memoizerific.default)(50)((items) => [
  ...baseViewports,
  ...Object.entries(items).map(([id, { name, ...rest }]) => ({ ...rest, id, title: name }))
]);
var responsiveViewport = {
  id: "reset",
  title: "Reset viewport",
  styles: null,
  type: "other"
};
var baseViewports = [responsiveViewport];
var toLinks = (0, import_memoizerific.default)(50)((list, active, set, state, close) => {
  return list.map((i) => {
    switch (i.id) {
      case responsiveViewport.id: {
        if (active.id === i.id) {
          return null;
        }
      }
      default: {
        return {
          ...i,
          onClick: () => {
            set({ ...state, selected: i.id });
            close();
          }
        };
      }
    }
  }).filter(Boolean);
});
var iframeId = "storybook-preview-iframe";
var wrapperId = "storybook-preview-wrapper";
var flip = ({ width, height, ...styles }) => ({
  ...styles,
  height: width,
  width: height
});
var ActiveViewportSize = import_theming.styled.div(() => ({
  display: "inline-flex"
}));
var ActiveViewportLabel = import_theming.styled.div(({ theme }) => ({
  display: "inline-block",
  textDecoration: "none",
  padding: 10,
  fontWeight: theme.typography.weight.bold,
  fontSize: theme.typography.size.s2 - 1,
  lineHeight: "1",
  height: 40,
  border: "none",
  borderTop: "3px solid transparent",
  borderBottom: "3px solid transparent",
  background: "transparent"
}));
var IconButtonWithLabel = (0, import_theming.styled)(import_components.IconButton)(() => ({
  display: "inline-flex",
  alignItems: "center"
}));
var IconButtonLabel = import_theming.styled.div(({ theme }) => ({
  fontSize: theme.typography.size.s2 - 1,
  marginLeft: 10
}));
var getStyles = (prevStyles, styles, isRotated) => {
  if (styles === null) {
    return null;
  }
  const result = typeof styles === "function" ? styles(prevStyles) : styles;
  return isRotated ? flip(result) : result;
};
var ViewportTool = (0, import_react.memo)(
  (0, import_theming.withTheme)(({ theme }) => {
    const {
      viewports = MINIMAL_VIEWPORTS,
      defaultViewport = responsiveViewport.id,
      disable
    } = (0, import_api.useParameter)(PARAM_KEY, {});
    const [state, setState] = (0, import_api.useAddonState)(ADDON_ID, {
      selected: defaultViewport,
      isRotated: false
    });
    const list = toList(viewports);
    const api = (0, import_api.useStorybookApi)();
    if (!list.find((i) => i.id === defaultViewport)) {
      console.warn(
        `Cannot find "defaultViewport" of "${defaultViewport}" in addon-viewport configs, please check the "viewports" setting in the configuration.`
      );
    }
    (0, import_react.useEffect)(() => {
      registerShortcuts(api, setState, Object.keys(viewports));
    }, [viewports]);
    (0, import_react.useEffect)(() => {
      setState({
        selected: defaultViewport || (viewports[state.selected] ? state.selected : responsiveViewport.id),
        isRotated: state.isRotated
      });
    }, [defaultViewport]);
    const { selected, isRotated } = state;
    const item = list.find((i) => i.id === selected) || list.find((i) => i.id === defaultViewport) || list.find((i) => i.default) || responsiveViewport;
    const ref = (0, import_react.useRef)();
    const styles = getStyles(ref.current, item.styles, isRotated);
    (0, import_react.useEffect)(() => {
      ref.current = styles;
    }, [item]);
    if (disable || Object.entries(viewports).length === 0) {
      return null;
    }
    return /* @__PURE__ */ import_react.default.createElement(import_react.Fragment, null, /* @__PURE__ */ import_react.default.createElement(import_components.WithTooltip, {
      placement: "top",
      trigger: "click",
      tooltip: ({ onHide }) => /* @__PURE__ */ import_react.default.createElement(import_components.TooltipLinkList, {
        links: toLinks(list, item, setState, state, onHide)
      }),
      closeOnClick: true
    }, /* @__PURE__ */ import_react.default.createElement(IconButtonWithLabel, {
      key: "viewport",
      title: "Change the size of the preview",
      active: !!styles,
      onDoubleClick: () => {
        setState({ ...state, selected: responsiveViewport.id });
      }
    }, /* @__PURE__ */ import_react.default.createElement(import_components.Icons, {
      icon: "grow"
    }), styles ? /* @__PURE__ */ import_react.default.createElement(IconButtonLabel, null, isRotated ? `${item.title} (L)` : `${item.title} (P)`) : null)), styles ? /* @__PURE__ */ import_react.default.createElement(ActiveViewportSize, null, /* @__PURE__ */ import_react.default.createElement(import_theming.Global, {
      styles: {
        [`#${iframeId}`]: {
          margin: `auto`,
          transition: "width .3s, height .3s",
          position: "relative",
          border: `1px solid black`,
          boxShadow: "0 0 100px 100vw rgba(0,0,0,0.5)",
          ...styles
        },
        [`#${wrapperId}`]: {
          padding: theme.layoutMargin,
          alignContent: "center",
          alignItems: "center",
          justifyContent: "center",
          justifyItems: "center",
          overflow: "auto",
          display: "grid",
          gridTemplateColumns: "100%",
          gridTemplateRows: "100%"
        }
      }
    }), /* @__PURE__ */ import_react.default.createElement(ActiveViewportLabel, {
      title: "Viewport width"
    }, styles.width.replace("px", "")), /* @__PURE__ */ import_react.default.createElement(import_components.IconButton, {
      key: "viewport-rotate",
      title: "Rotate viewport",
      onClick: () => {
        setState({ ...state, isRotated: !isRotated });
      }
    }, /* @__PURE__ */ import_react.default.createElement(import_components.Icons, {
      icon: "transfer"
    })), /* @__PURE__ */ import_react.default.createElement(ActiveViewportLabel, {
      title: "Viewport height"
    }, styles.height.replace("px", ""))) : null);
  })
);

// src/manager.tsx
import_addons.addons.register(ADDON_ID, () => {
  import_addons.addons.add(ADDON_ID, {
    title: "viewport / media-queries",
    type: import_addons.types.TOOL,
    match: ({ viewMode }) => viewMode === "story",
    render: () => /* @__PURE__ */ React2.createElement(ViewportTool, null)
  });
});
