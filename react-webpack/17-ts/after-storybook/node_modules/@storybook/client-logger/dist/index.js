"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  logger: () => logger,
  once: () => once,
  pretty: () => pretty
});
module.exports = __toCommonJS(src_exports);
var import_global = __toESM(require("global"));
var { LOGLEVEL, console } = import_global.default;
var levels = {
  trace: 1,
  debug: 2,
  info: 3,
  warn: 4,
  error: 5,
  silent: 10
};
var currentLogLevelString = LOGLEVEL;
var currentLogLevelNumber = levels[currentLogLevelString] || levels.info;
var logger = {
  trace: (message, ...rest) => currentLogLevelNumber <= levels.trace && console.trace(message, ...rest),
  debug: (message, ...rest) => currentLogLevelNumber <= levels.debug && console.debug(message, ...rest),
  info: (message, ...rest) => currentLogLevelNumber <= levels.info && console.info(message, ...rest),
  warn: (message, ...rest) => currentLogLevelNumber <= levels.warn && console.warn(message, ...rest),
  error: (message, ...rest) => currentLogLevelNumber <= levels.error && console.error(message, ...rest),
  log: (message, ...rest) => currentLogLevelNumber < levels.silent && console.log(message, ...rest)
};
var logged = /* @__PURE__ */ new Set();
var once = (type) => (message, ...rest) => {
  if (logged.has(message))
    return void 0;
  logged.add(message);
  return logger[type](message, ...rest);
};
once.clear = () => logged.clear();
once.trace = once("trace");
once.debug = once("debug");
once.info = once("info");
once.warn = once("warn");
once.error = once("error");
once.log = once("log");
var pretty = (type) => (...args) => {
  const argArray = [];
  if (args.length) {
    const startTagRe = /<span\s+style=(['"])([^'"]*)\1\s*>/gi;
    const endTagRe = /<\/span>/gi;
    let reResultArray;
    argArray.push(args[0].replace(startTagRe, "%c").replace(endTagRe, "%c"));
    while (reResultArray = startTagRe.exec(args[0])) {
      argArray.push(reResultArray[2]);
      argArray.push("");
    }
    for (let j = 1; j < args.length; j++) {
      argArray.push(args[j]);
    }
  }
  logger[type].apply(logger, argArray);
};
pretty.trace = pretty("trace");
pretty.debug = pretty("debug");
pretty.info = pretty("info");
pretty.warn = pretty("warn");
pretty.error = pretty("error");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  logger,
  once,
  pretty
});
