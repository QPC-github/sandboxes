"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

// NOTE Example of internal type definition for @storybook/<X> (where X is a framework)
// NOTE Examples of using types from @storybook/<X> in real project
var Button = function Button(props) {
  return 'Button';
}; // NOTE Various kind usages


var simple = {
  title: 'simple',
  component: Button,
  decorators: [function (storyFn, context) {
    return "withDecorator(".concat(storyFn(context), ")");
  }],
  parameters: {
    a: function a() {
      return null;
    },
    b: NaN,
    c: Symbol('symbol')
  },
  loaders: [function () {
    return Promise.resolve({
      d: '3'
    });
  }],
  args: {
    x: '1'
  },
  argTypes: {
    x: {
      type: {
        name: 'string'
      }
    }
  }
};
var strict = {
  title: 'simple',
  component: Button,
  decorators: [function (storyFn, context) {
    return "withDecorator(".concat(storyFn(context), ")");
  }],
  parameters: {
    a: function a() {
      return null;
    },
    b: NaN,
    c: Symbol('symbol')
  },
  loaders: [function () {
    return Promise.resolve({
      d: '3'
    });
  }],
  args: {
    x: '1'
  },
  argTypes: {
    x: {
      type: {
        name: 'string'
      }
    }
  }
}; // NOTE Various story usages

var Simple = function Simple() {
  return 'Simple';
};

var CSF1Story = function CSF1Story() {
  return 'Named Story';
};

CSF1Story.story = {
  name: 'Another name for story',
  decorators: [function (storyFn) {
    return "Wrapped(".concat(storyFn());
  }],
  parameters: {
    a: [1, '2', {}],
    b: undefined,
    c: Button
  },
  loaders: [function () {
    return Promise.resolve({
      d: '3'
    });
  }],
  args: {
    a: 1
  }
};

var CSF2Story = function CSF2Story() {
  return 'Named Story';
};

CSF2Story.storyName = 'Another name for story';
CSF2Story.decorators = [function (storyFn) {
  return "Wrapped(".concat(storyFn());
}];
CSF2Story.parameters = {
  a: [1, '2', {}],
  b: undefined,
  c: Button
};
CSF2Story.loaders = [function () {
  return Promise.resolve({
    d: '3'
  });
}];
CSF2Story.args = {
  a: 1
};
var CSF3Story = {
  render: function render(args) {
    return 'Named Story';
  },
  name: 'Another name for story',
  decorators: [function (storyFn) {
    return "Wrapped(".concat(storyFn());
  }],
  parameters: {
    a: [1, '2', {}],
    b: undefined,
    c: Button
  },
  loaders: [function () {
    return Promise.resolve({
      d: '3'
    });
  }],
  args: {
    a: 1
  }
};
var CSF3StoryStrict = {
  render: function render(args) {
    return 'Named Story';
  },
  name: 'Another name for story',
  decorators: [function (storyFn) {
    return "Wrapped(".concat(storyFn());
  }],
  parameters: {
    a: [1, '2', {}],
    b: undefined,
    c: Button
  },
  loaders: [function () {
    return Promise.resolve({
      d: '3'
    });
  }],
  args: {
    x: '1'
  },
  play: function () {
    var _play = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref) {
      var step;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              step = _ref.step;
              _context2.next = 3;
              return step('a step', /*#__PURE__*/function () {
                var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref2) {
                  var substep;
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          substep = _ref2.step;
                          _context.next = 3;
                          return substep('a substep', function () {});

                        case 3:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }));

                return function (_x2) {
                  return _ref3.apply(this, arguments);
                };
              }());

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    function play(_x) {
      return _play.apply(this, arguments);
    }

    return play;
  }()
};
var project = {
  runStep: function runStep(label, play, context) {
    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", play(context));

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }))();
  }
}; // NOTE Jest forced to define at least one test in file

describe('story', function () {
  test('true', function () {
    return expect(true).toBe(true);
  });
});