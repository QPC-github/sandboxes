var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/controls/helpers.ts
var getControlId, getControlSetterButtonId;
var init_helpers = __esm({
  "src/controls/helpers.ts"() {
    getControlId = (value2) => `control-${value2.replace(/\s+/g, "-")}`;
    getControlSetterButtonId = (value2) => `set-${value2.replace(/\s+/g, "-")}`;
  }
});

// src/controls/Color.tsx
var Color_exports = {};
__export(Color_exports, {
  ColorControl: () => ColorControl,
  default: () => Color_default
});
var import_react25, import_react_colorful, import_color_convert, import_throttle, import_theming18, import_components17, Wrapper7, PickerTooltip, TooltipContent, Note, Swatches, SwatchColor, swatchBackground, Swatch, Input2, ToggleIcon, ColorSpace, COLOR_SPACES, COLOR_REGEXP, RGB_REGEXP, HSL_REGEXP, HEX_REGEXP, SHORTHEX_REGEXP, ColorPicker, fallbackColor, stringToArgs, parseValue, getRealValue, useColorInput, id, usePresets, ColorControl, Color_default;
var init_Color = __esm({
  "src/controls/Color.tsx"() {
    import_react25 = __toESM(require("react"));
    import_react_colorful = require("react-colorful");
    import_color_convert = __toESM(require("color-convert"));
    import_throttle = __toESM(require("lodash/throttle"));
    import_theming18 = require("@storybook/theming");
    import_components17 = require("@storybook/components");
    init_helpers();
    Wrapper7 = import_theming18.styled.div({
      position: "relative",
      maxWidth: 250
    });
    PickerTooltip = (0, import_theming18.styled)(import_components17.WithTooltip)({
      position: "absolute",
      zIndex: 1,
      top: 4,
      left: 4
    });
    TooltipContent = import_theming18.styled.div({
      width: 200,
      margin: 5,
      ".react-colorful__saturation": {
        borderRadius: "4px 4px 0 0"
      },
      ".react-colorful__hue": {
        boxShadow: "inset 0 0 0 1px rgb(0 0 0 / 5%)"
      },
      ".react-colorful__last-control": {
        borderRadius: "0 0 4px 4px"
      }
    });
    Note = (0, import_theming18.styled)(import_components17.TooltipNote)(({ theme }) => ({
      fontFamily: theme.typography.fonts.base
    }));
    Swatches = import_theming18.styled.div({
      display: "grid",
      gridTemplateColumns: "repeat(9, 16px)",
      gap: 6,
      padding: 3,
      marginTop: 5,
      width: 200
    });
    SwatchColor = import_theming18.styled.div(({ theme, active }) => ({
      width: 16,
      height: 16,
      boxShadow: active ? `${theme.appBorderColor} 0 0 0 1px inset, ${theme.color.mediumdark}50 0 0 0 4px` : `${theme.appBorderColor} 0 0 0 1px inset`,
      borderRadius: theme.appBorderRadius
    }));
    swatchBackground = `url('data:image/svg+xml;charset=utf-8,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill-opacity=".05"><path d="M8 0h8v8H8zM0 8h8v8H0z"/></svg>')`;
    Swatch = ({ value: value2, active, onClick, style, ...props }) => {
      const backgroundImage = `linear-gradient(${value2}, ${value2}), ${swatchBackground}, linear-gradient(#fff, #fff)`;
      return /* @__PURE__ */ import_react25.default.createElement(SwatchColor, {
        ...props,
        ...{ active, onClick },
        style: { ...style, backgroundImage }
      });
    };
    Input2 = (0, import_theming18.styled)(import_components17.Form.Input)(({ theme }) => ({
      width: "100%",
      paddingLeft: 30,
      paddingRight: 30,
      boxSizing: "border-box",
      fontFamily: theme.typography.fonts.base
    }));
    ToggleIcon = (0, import_theming18.styled)(import_components17.Icons)(({ theme }) => ({
      position: "absolute",
      zIndex: 1,
      top: 6,
      right: 7,
      width: 20,
      height: 20,
      padding: 4,
      boxSizing: "border-box",
      cursor: "pointer",
      color: theme.input.color
    }));
    ColorSpace = /* @__PURE__ */ ((ColorSpace2) => {
      ColorSpace2["RGB"] = "rgb";
      ColorSpace2["HSL"] = "hsl";
      ColorSpace2["HEX"] = "hex";
      return ColorSpace2;
    })(ColorSpace || {});
    COLOR_SPACES = Object.values(ColorSpace);
    COLOR_REGEXP = /\(([0-9]+),\s*([0-9]+)%?,\s*([0-9]+)%?,?\s*([0-9.]+)?\)/;
    RGB_REGEXP = /^\s*rgba?\(([0-9]+),\s*([0-9]+),\s*([0-9]+),?\s*([0-9.]+)?\)\s*$/i;
    HSL_REGEXP = /^\s*hsla?\(([0-9]+),\s*([0-9]+)%,\s*([0-9]+)%,?\s*([0-9.]+)?\)\s*$/i;
    HEX_REGEXP = /^\s*#?([0-9a-f]{3}|[0-9a-f]{6})\s*$/i;
    SHORTHEX_REGEXP = /^\s*#?([0-9a-f]{3})\s*$/i;
    ColorPicker = {
      ["hex" /* HEX */]: import_react_colorful.HexColorPicker,
      ["rgb" /* RGB */]: import_react_colorful.RgbaStringColorPicker,
      ["hsl" /* HSL */]: import_react_colorful.HslaStringColorPicker
    };
    fallbackColor = {
      ["hex" /* HEX */]: "transparent",
      ["rgb" /* RGB */]: "rgba(0, 0, 0, 0)",
      ["hsl" /* HSL */]: "hsla(0, 0%, 0%, 0)"
    };
    stringToArgs = (value2) => {
      const match = value2 == null ? void 0 : value2.match(COLOR_REGEXP);
      if (!match)
        return [0, 0, 0, 1];
      const [, x, y, z, a = 1] = match;
      return [x, y, z, a].map(Number);
    };
    parseValue = (value2) => {
      if (!value2)
        return void 0;
      let valid = true;
      if (RGB_REGEXP.test(value2)) {
        const [r, g, b, a] = stringToArgs(value2);
        const [h, s, l] = import_color_convert.default.rgb.hsl([r, g, b]) || [0, 0, 0];
        return {
          valid,
          value: value2,
          keyword: import_color_convert.default.rgb.keyword([r, g, b]),
          colorSpace: "rgb" /* RGB */,
          ["rgb" /* RGB */]: value2,
          ["hsl" /* HSL */]: `hsla(${h}, ${s}%, ${l}%, ${a})`,
          ["hex" /* HEX */]: `#${import_color_convert.default.rgb.hex([r, g, b]).toLowerCase()}`
        };
      }
      if (HSL_REGEXP.test(value2)) {
        const [h, s, l, a] = stringToArgs(value2);
        const [r, g, b] = import_color_convert.default.hsl.rgb([h, s, l]) || [0, 0, 0];
        return {
          valid,
          value: value2,
          keyword: import_color_convert.default.hsl.keyword([h, s, l]),
          colorSpace: "hsl" /* HSL */,
          ["rgb" /* RGB */]: `rgba(${r}, ${g}, ${b}, ${a})`,
          ["hsl" /* HSL */]: value2,
          ["hex" /* HEX */]: `#${import_color_convert.default.hsl.hex([h, s, l]).toLowerCase()}`
        };
      }
      const plain = value2.replace("#", "");
      const rgb = import_color_convert.default.keyword.rgb(plain) || import_color_convert.default.hex.rgb(plain);
      const hsl = import_color_convert.default.rgb.hsl(rgb);
      let mapped = value2;
      if (/[^#a-f0-9]/i.test(value2))
        mapped = plain;
      else if (HEX_REGEXP.test(value2))
        mapped = `#${plain}`;
      if (mapped.startsWith("#")) {
        valid = HEX_REGEXP.test(mapped);
      } else {
        try {
          import_color_convert.default.keyword.hex(mapped);
        } catch (e) {
          valid = false;
        }
      }
      return {
        valid,
        value: mapped,
        keyword: import_color_convert.default.rgb.keyword(rgb),
        colorSpace: "hex" /* HEX */,
        ["rgb" /* RGB */]: `rgba(${rgb[0]}, ${rgb[1]}, ${rgb[2]}, 1)`,
        ["hsl" /* HSL */]: `hsla(${hsl[0]}, ${hsl[1]}%, ${hsl[2]}%, 1)`,
        ["hex" /* HEX */]: mapped
      };
    };
    getRealValue = (value2, color, colorSpace) => {
      if (!value2 || !(color == null ? void 0 : color.valid))
        return fallbackColor[colorSpace];
      if (colorSpace !== "hex" /* HEX */)
        return (color == null ? void 0 : color[colorSpace]) || fallbackColor[colorSpace];
      if (!color.hex.startsWith("#")) {
        try {
          return `#${import_color_convert.default.keyword.hex(color.hex)}`;
        } catch (e) {
          return fallbackColor.hex;
        }
      }
      const short = color.hex.match(SHORTHEX_REGEXP);
      if (!short)
        return HEX_REGEXP.test(color.hex) ? color.hex : fallbackColor.hex;
      const [r, g, b] = short[1].split("");
      return `#${r}${r}${g}${g}${b}${b}`;
    };
    useColorInput = (initialValue, onChange) => {
      const [value2, setValue] = (0, import_react25.useState)(initialValue || "");
      const [color, setColor] = (0, import_react25.useState)(() => parseValue(value2));
      const [colorSpace, setColorSpace] = (0, import_react25.useState)((color == null ? void 0 : color.colorSpace) || "hex" /* HEX */);
      (0, import_react25.useEffect)(() => {
        if (initialValue !== void 0)
          return;
        setValue("");
        setColor(void 0);
        setColorSpace("hex" /* HEX */);
      }, [initialValue]);
      const realValue = (0, import_react25.useMemo)(
        () => getRealValue(value2, color, colorSpace).toLowerCase(),
        [value2, color, colorSpace]
      );
      const updateValue = (0, import_react25.useCallback)(
        (update) => {
          const parsed = parseValue(update);
          const v = (parsed == null ? void 0 : parsed.value) || update || "";
          setValue(v);
          if (v === "") {
            setColor(void 0);
            onChange(void 0);
          }
          if (!parsed) {
            return;
          }
          setColor(parsed);
          setColorSpace(parsed.colorSpace);
          onChange(parsed.value);
        },
        [onChange]
      );
      const cycleColorSpace = (0, import_react25.useCallback)(() => {
        let next = COLOR_SPACES.indexOf(colorSpace) + 1;
        if (next >= COLOR_SPACES.length)
          next = 0;
        setColorSpace(COLOR_SPACES[next]);
        const update = (color == null ? void 0 : color[COLOR_SPACES[next]]) || "";
        setValue(update);
        onChange(update);
      }, [color, colorSpace, onChange]);
      return { value: value2, realValue, updateValue, color, colorSpace, cycleColorSpace };
    };
    id = (value2) => value2.replace(/\s*/, "").toLowerCase();
    usePresets = (presetColors, currentColor, colorSpace) => {
      const [selectedColors, setSelectedColors] = (0, import_react25.useState)((currentColor == null ? void 0 : currentColor.valid) ? [currentColor] : []);
      (0, import_react25.useEffect)(() => {
        if (currentColor !== void 0)
          return;
        setSelectedColors([]);
      }, [currentColor]);
      const presets = (0, import_react25.useMemo)(() => {
        const initialPresets = (presetColors || []).map((preset) => {
          if (typeof preset === "string")
            return parseValue(preset);
          if (preset.title)
            return { ...parseValue(preset.color), keyword: preset.title };
          return parseValue(preset.color);
        });
        return initialPresets.concat(selectedColors).filter(Boolean).slice(-27);
      }, [presetColors, selectedColors]);
      const addPreset = (0, import_react25.useCallback)(
        (color) => {
          if (!(color == null ? void 0 : color.valid))
            return;
          if (presets.some((preset) => id(preset[colorSpace]) === id(color[colorSpace])))
            return;
          setSelectedColors((arr) => arr.concat(color));
        },
        [colorSpace, presets]
      );
      return { presets, addPreset };
    };
    ColorControl = ({
      name,
      value: initialValue,
      onChange,
      onFocus,
      onBlur,
      presetColors,
      startOpen
    }) => {
      const throttledOnChange = (0, import_react25.useCallback)((0, import_throttle.default)(onChange, 200), [onChange]);
      const { value: value2, realValue, updateValue, color, colorSpace, cycleColorSpace } = useColorInput(
        initialValue,
        throttledOnChange
      );
      const { presets, addPreset } = usePresets(presetColors, color, colorSpace);
      const Picker = ColorPicker[colorSpace];
      return /* @__PURE__ */ import_react25.default.createElement(Wrapper7, null, /* @__PURE__ */ import_react25.default.createElement(PickerTooltip, {
        trigger: "click",
        startOpen,
        closeOnClick: true,
        onVisibilityChange: () => addPreset(color),
        tooltip: /* @__PURE__ */ import_react25.default.createElement(TooltipContent, null, /* @__PURE__ */ import_react25.default.createElement(Picker, {
          color: realValue === "transparent" ? "#000000" : realValue,
          ...{ onChange: updateValue, onFocus, onBlur }
        }), presets.length > 0 && /* @__PURE__ */ import_react25.default.createElement(Swatches, null, presets.map((preset, index) => /* @__PURE__ */ import_react25.default.createElement(import_components17.WithTooltip, {
          key: `${preset.value}-${index}`,
          hasChrome: false,
          tooltip: /* @__PURE__ */ import_react25.default.createElement(Note, {
            note: preset.keyword || preset.value
          })
        }, /* @__PURE__ */ import_react25.default.createElement(Swatch, {
          value: preset[colorSpace],
          active: color && id(preset[colorSpace]) === id(color[colorSpace]),
          onClick: () => updateValue(preset.value)
        })))))
      }, /* @__PURE__ */ import_react25.default.createElement(Swatch, {
        value: realValue,
        style: { margin: 4 }
      })), /* @__PURE__ */ import_react25.default.createElement(Input2, {
        id: getControlId(name),
        value: value2,
        onChange: (e) => updateValue(e.target.value),
        onFocus: (e) => e.target.select(),
        placeholder: "Choose color..."
      }), value2 ? /* @__PURE__ */ import_react25.default.createElement(ToggleIcon, {
        icon: "markup",
        onClick: cycleColorSpace
      }) : null);
    };
    Color_default = ColorControl;
  }
});

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AddContext: () => AddContext,
  Anchor: () => Anchor,
  AnchorMdx: () => AnchorMdx,
  ArgsTable: () => ArgsTable2,
  BooleanControl: () => BooleanControl,
  CURRENT_SELECTION: () => CURRENT_SELECTION,
  Canvas: () => Canvas,
  CodeOrSourceMdx: () => CodeOrSourceMdx,
  ColorControl: () => ColorControl2,
  ColorItem: () => ColorItem,
  ColorPalette: () => ColorPalette,
  ComponentsTable: () => ComponentsTable,
  DateControl: () => DateControl,
  Description: () => DescriptionContainer,
  DescriptionType: () => DescriptionType,
  Docs: () => Docs,
  DocsContainer: () => DocsContainer,
  DocsContext: () => DocsContext,
  DocsPage: () => DocsPage,
  DocsStory: () => DocsStory,
  ExternalDocs: () => ExternalDocs,
  ExternalDocsContainer: () => ExternalDocsContainer,
  FilesControl: () => FilesControl,
  HeaderMdx: () => HeaderMdx,
  HeadersMdx: () => HeadersMdx,
  Heading: () => Heading,
  IconGallery: () => IconGallery,
  IconItem: () => IconItem,
  Meta: () => Meta,
  NoControlsWarning: () => NoControlsWarning,
  NumberControl: () => NumberControl,
  ObjectControl: () => ObjectControl,
  OptionsControl: () => OptionsControl,
  PRIMARY_STORY: () => PRIMARY_STORY,
  Preview: () => Preview3,
  Primary: () => Primary,
  Props: () => Props,
  PureArgsTable: () => ArgsTable,
  RangeControl: () => RangeControl,
  Source: () => Source2,
  SourceContainer: () => SourceContainer,
  SourceContext: () => SourceContext,
  SourceState: () => SourceState,
  Stories: () => Stories,
  Story: () => Story2,
  StoryTable: () => StoryTable,
  Subheading: () => Subheading,
  Subtitle: () => Subtitle2,
  TextControl: () => TextControl,
  Title: () => Title2,
  Typeset: () => Typeset,
  Wrapper: () => Wrapper9,
  anchorBlockIdFromId: () => anchorBlockIdFromId,
  assertIsFn: () => assertIsFn,
  currentSelectionWarning: () => currentSelectionWarning,
  extractComponentArgTypes: () => extractComponentArgTypes,
  extractTitle: () => extractTitle,
  format: () => format,
  formatDate: () => formatDate,
  formatTime: () => formatTime,
  getComponent: () => getComponent,
  getDescriptionProps: () => getDescriptionProps,
  getSourceProps: () => getSourceProps,
  getStoryId: () => getStoryId2,
  getStoryProps: () => getStoryProps,
  parse: () => parse2,
  parseDate: () => parseDate,
  parseTime: () => parseTime,
  storyBlockIdFromId: () => storyBlockIdFromId
});
module.exports = __toCommonJS(src_exports);

// src/components/Source.tsx
var import_react2 = __toESM(require("react"));
var import_theming2 = require("@storybook/theming");
var import_components2 = require("@storybook/components");

// src/components/EmptyBlock.tsx
var import_react = __toESM(require("react"));
var import_polished = require("polished");
var import_theming = require("@storybook/theming");
var import_components = require("@storybook/components");
var Wrapper = import_theming.styled.div(import_components.withReset, ({ theme }) => ({
  backgroundColor: theme.base === "light" ? "rgba(0,0,0,.01)" : "rgba(255,255,255,.01)",
  borderRadius: theme.appBorderRadius,
  border: `1px dashed ${theme.appBorderColor}`,
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  padding: 20,
  margin: "25px 0 40px",
  color: (0, import_polished.transparentize)(0.3, theme.color.defaultText),
  fontSize: theme.typography.size.s2
}));
var EmptyBlock = (props) => /* @__PURE__ */ import_react.default.createElement(Wrapper, {
  ...props,
  className: "docblock-emptyblock"
});

// src/components/Source.tsx
var StyledSyntaxHighlighter = (0, import_theming2.styled)(import_components2.SyntaxHighlighter)(
  ({ theme }) => ({
    fontSize: `${theme.typography.size.s2 - 1}px`,
    lineHeight: "19px",
    margin: "25px 0 40px",
    borderRadius: theme.appBorderRadius,
    boxShadow: theme.base === "light" ? "rgba(0, 0, 0, 0.10) 0 1px 3px 0" : "rgba(0, 0, 0, 0.20) 0 2px 5px 0",
    "pre.prismjs": {
      padding: 20,
      background: "inherit"
    }
  })
);
var SourceSkeletonWrapper = import_theming2.styled.div(({ theme }) => ({
  background: theme.background.content,
  borderRadius: theme.appBorderRadius,
  border: `1px solid ${theme.appBorderColor}`,
  boxShadow: theme.base === "light" ? "rgba(0, 0, 0, 0.10) 0 1px 3px 0" : "rgba(0, 0, 0, 0.20) 0 2px 5px 0",
  margin: "25px 0 40px",
  padding: "20px 20px 20px 22px"
}));
var SourceSkeletonPlaceholder = import_theming2.styled.div(({ theme }) => ({
  animation: `${theme.animation.glow} 1.5s ease-in-out infinite`,
  background: theme.appBorderColor,
  height: 17,
  marginTop: 1,
  width: "60%",
  [`&:first-child`]: {
    margin: 0
  }
}));
var SourceSkeleton = () => /* @__PURE__ */ import_react2.default.createElement(SourceSkeletonWrapper, null, /* @__PURE__ */ import_react2.default.createElement(SourceSkeletonPlaceholder, null), /* @__PURE__ */ import_react2.default.createElement(SourceSkeletonPlaceholder, {
  style: { width: "80%" }
}), /* @__PURE__ */ import_react2.default.createElement(SourceSkeletonPlaceholder, {
  style: { width: "30%" }
}), /* @__PURE__ */ import_react2.default.createElement(SourceSkeletonPlaceholder, {
  style: { width: "80%" }
}));
var Source = (props) => {
  const { isLoading, error } = props;
  if (isLoading) {
    return /* @__PURE__ */ import_react2.default.createElement(SourceSkeleton, null);
  }
  if (error) {
    return /* @__PURE__ */ import_react2.default.createElement(EmptyBlock, null, error);
  }
  const { language, code, dark, format: format2, ...rest } = props;
  const syntaxHighlighter = /* @__PURE__ */ import_react2.default.createElement(StyledSyntaxHighlighter, {
    bordered: true,
    copyable: true,
    format: format2,
    language,
    className: "docblock-source",
    ...rest
  }, code);
  if (typeof dark === "undefined") {
    return syntaxHighlighter;
  }
  const overrideTheme = dark ? import_theming2.themes.dark : import_theming2.themes.light;
  return /* @__PURE__ */ import_react2.default.createElement(import_theming2.ThemeProvider, {
    theme: (0, import_theming2.convert)(overrideTheme)
  }, syntaxHighlighter);
};
Source.defaultProps = {
  format: false
};

// src/components/Description.tsx
var import_react3 = __toESM(require("react"));
var import_markdown_to_jsx = __toESM(require("markdown-to-jsx"));
var import_components3 = require("@storybook/components");
var Description = ({ markdown }) => /* @__PURE__ */ import_react3.default.createElement(import_components3.ResetWrapper, null, /* @__PURE__ */ import_react3.default.createElement(import_markdown_to_jsx.default, {
  options: { forceBlock: true, overrides: import_components3.components }
}, markdown));

// src/components/DocsPage.tsx
var import_components4 = require("@storybook/components");
var import_theming3 = require("@storybook/theming");
var import_polished2 = require("polished");
var import_react4 = __toESM(require("react"));
var breakpoint = 600;
var Title = import_theming3.styled.h1(import_components4.withReset, ({ theme }) => ({
  color: theme.color.defaultText,
  fontSize: theme.typography.size.m3,
  fontWeight: theme.typography.weight.black,
  lineHeight: "32px",
  [`@media (min-width: ${breakpoint}px)`]: {
    fontSize: theme.typography.size.l1,
    lineHeight: "36px",
    marginBottom: ".5rem"
  }
}));
var Subtitle = import_theming3.styled.h2(import_components4.withReset, ({ theme }) => ({
  fontWeight: theme.typography.weight.regular,
  fontSize: theme.typography.size.s3,
  lineHeight: "20px",
  borderBottom: "none",
  marginBottom: 15,
  [`@media (min-width: ${breakpoint}px)`]: {
    fontSize: theme.typography.size.m1,
    lineHeight: "28px",
    marginBottom: 24
  },
  color: (0, import_polished2.transparentize)(0.25, theme.color.defaultText)
}));
var DocsContent = import_theming3.styled.div({
  maxWidth: 1e3,
  width: "100%"
});
var DocsWrapper = import_theming3.styled.div(({ theme }) => ({
  background: theme.background.content,
  display: "flex",
  justifyContent: "center",
  padding: "4rem 20px",
  minHeight: "100vh",
  boxSizing: "border-box",
  [`@media (min-width: ${breakpoint}px)`]: {}
}));

// src/components/Preview.tsx
var import_react9 = __toESM(require("react"));
var import_polished3 = require("polished");
var import_theming5 = require("@storybook/theming");
var import_global3 = __toESM(require("global"));
var import_components7 = require("@storybook/components");

// src/components/BlockBackgroundStyles.tsx
var getBlockBackgroundStyle = (theme) => ({
  borderRadius: theme.appBorderRadius,
  background: theme.background.content,
  boxShadow: theme.base === "light" ? "rgba(0, 0, 0, 0.10) 0 1px 3px 0" : "rgba(0, 0, 0, 0.20) 0 2px 5px 0",
  border: `1px solid ${theme.appBorderColor}`
});

// src/components/Toolbar.tsx
var import_react5 = __toESM(require("react"));
var import_theming4 = require("@storybook/theming");
var import_components5 = require("@storybook/components");
var Zoom = ({ zoom, resetZoom }) => /* @__PURE__ */ import_react5.default.createElement(import_react5.default.Fragment, null, /* @__PURE__ */ import_react5.default.createElement(import_components5.IconButton, {
  key: "zoomin",
  onClick: (e) => {
    e.preventDefault();
    zoom(0.8);
  },
  title: "Zoom in"
}, /* @__PURE__ */ import_react5.default.createElement(import_components5.Icons, {
  icon: "zoom"
})), /* @__PURE__ */ import_react5.default.createElement(import_components5.IconButton, {
  key: "zoomout",
  onClick: (e) => {
    e.preventDefault();
    zoom(1.25);
  },
  title: "Zoom out"
}, /* @__PURE__ */ import_react5.default.createElement(import_components5.Icons, {
  icon: "zoomout"
})), /* @__PURE__ */ import_react5.default.createElement(import_components5.IconButton, {
  key: "zoomreset",
  onClick: (e) => {
    e.preventDefault();
    resetZoom();
  },
  title: "Reset zoom"
}, /* @__PURE__ */ import_react5.default.createElement(import_components5.Icons, {
  icon: "zoomreset"
})));
var Eject = ({ baseUrl, storyId }) => /* @__PURE__ */ import_react5.default.createElement(import_components5.IconButton, {
  key: "opener",
  href: (0, import_components5.getStoryHref)(baseUrl, storyId),
  target: "_blank",
  title: "Open canvas in new tab"
}, /* @__PURE__ */ import_react5.default.createElement(import_components5.Icons, {
  icon: "share"
}));
var Bar = (0, import_theming4.styled)(import_components5.FlexBar)({
  position: "absolute",
  left: 0,
  right: 0,
  top: 0,
  transition: "transform .2s linear"
});
var Toolbar = ({
  isLoading,
  storyId,
  baseUrl,
  zoom,
  resetZoom,
  ...rest
}) => /* @__PURE__ */ import_react5.default.createElement(Bar, {
  ...rest
}, /* @__PURE__ */ import_react5.default.createElement(import_react5.Fragment, {
  key: "left"
}, isLoading ? [1, 2, 3].map((key) => /* @__PURE__ */ import_react5.default.createElement(import_components5.IconButtonSkeleton, {
  key
})) : /* @__PURE__ */ import_react5.default.createElement(Zoom, {
  ...{ zoom, resetZoom }
})), /* @__PURE__ */ import_react5.default.createElement(import_react5.Fragment, {
  key: "right"
}, storyId && (isLoading ? /* @__PURE__ */ import_react5.default.createElement(import_components5.IconButtonSkeleton, null) : /* @__PURE__ */ import_react5.default.createElement(Eject, {
  ...{ storyId, baseUrl }
}))));

// src/components/ZoomContext.tsx
var import_react6 = require("react");
var ZoomContext = (0, import_react6.createContext)({
  scale: 1
});

// src/components/Story.tsx
var import_global2 = __toESM(require("global"));
var import_react8 = __toESM(require("react"));
var import_components6 = require("@storybook/components");

// src/components/IFrame.tsx
var import_react7 = __toESM(require("react"));
var import_global = __toESM(require("global"));
var { window: globalWindow } = import_global.default;
var IFrame = class extends import_react7.Component {
  constructor() {
    super(...arguments);
    this.iframe = null;
  }
  componentDidMount() {
    const { id: id2 } = this.props;
    this.iframe = globalWindow.document.getElementById(id2);
  }
  shouldComponentUpdate(nextProps) {
    const { scale } = nextProps;
    if (scale !== this.props.scale) {
      this.setIframeBodyStyle({
        width: `${scale * 100}%`,
        height: `${scale * 100}%`,
        transform: `scale(${1 / scale})`,
        transformOrigin: "top left"
      });
    }
    return false;
  }
  setIframeBodyStyle(style) {
    return Object.assign(this.iframe.contentDocument.body.style, style);
  }
  render() {
    const { id: id2, title, src, allowFullScreen, scale, ...rest } = this.props;
    return /* @__PURE__ */ import_react7.default.createElement("iframe", {
      id: id2,
      title,
      src,
      allowFullScreen,
      loading: "lazy",
      ...rest
    });
  }
};

// src/components/Story.tsx
var { PREVIEW_URL } = import_global2.default;
var BASE_URL = PREVIEW_URL || "iframe.html";
var MISSING_STORY = (id2) => id2 ? `Story "${id2}" doesn't exist.` : "No component or story to display" /* NO_STORY */;
var InlineStory = ({ storyFn, height, id: id2 }) => /* @__PURE__ */ import_react8.default.createElement(import_react8.Fragment, null, height ? /* @__PURE__ */ import_react8.default.createElement("style", null, `#story--${id2} { min-height: ${height}; transform: translateZ(0); overflow: auto }`) : null, /* @__PURE__ */ import_react8.default.createElement(import_react8.Fragment, null, storyFn ? (0, import_react8.createElement)(storyFn) : /* @__PURE__ */ import_react8.default.createElement(EmptyBlock, null, MISSING_STORY(id2))));
var IFrameStory = ({ id: id2, title, height = "500px" }) => /* @__PURE__ */ import_react8.default.createElement("div", {
  style: { width: "100%", height }
}, /* @__PURE__ */ import_react8.default.createElement(ZoomContext.Consumer, null, ({ scale }) => {
  return /* @__PURE__ */ import_react8.default.createElement(IFrame, {
    key: "iframe",
    id: `iframe--${id2}`,
    title,
    src: (0, import_components6.getStoryHref)(BASE_URL, id2, { viewMode: "story" }),
    allowFullScreen: true,
    scale,
    style: {
      width: "100%",
      height: "100%",
      border: "0 none"
    }
  });
}));
var Story = ({ children, error, inline, ...props }) => {
  const { id: id2, title, height } = props;
  if (error) {
    return /* @__PURE__ */ import_react8.default.createElement(EmptyBlock, null, error);
  }
  return inline ? /* @__PURE__ */ import_react8.default.createElement(InlineStory, {
    ...props
  }) : /* @__PURE__ */ import_react8.default.createElement(IFrameStory, {
    id: id2,
    title,
    height
  });
};
var StorySkeleton = () => /* @__PURE__ */ import_react8.default.createElement(import_components6.Loader, null);

// src/components/Preview.tsx
var ChildrenContainer = import_theming5.styled.div(
  ({ isColumn, columns, layout }) => ({
    display: isColumn || !columns ? "block" : "flex",
    position: "relative",
    flexWrap: "wrap",
    overflow: "auto",
    flexDirection: isColumn ? "column" : "row",
    "& .innerZoomElementWrapper > *": isColumn ? {
      width: layout !== "fullscreen" ? "calc(100% - 20px)" : "100%",
      display: "block"
    } : {
      maxWidth: layout !== "fullscreen" ? "calc(100% - 20px)" : "100%",
      display: "inline-block"
    }
  }),
  ({ layout = "padded" }) => layout === "centered" || layout === "padded" ? {
    padding: "30px 20px",
    margin: -10,
    "& .innerZoomElementWrapper > *": {
      width: "auto",
      border: "10px solid transparent!important"
    }
  } : {},
  ({ layout = "padded" }) => layout === "centered" ? {
    display: "flex",
    justifyContent: "center",
    justifyItems: "center",
    alignContent: "center",
    alignItems: "center"
  } : {},
  ({ columns }) => columns && columns > 1 ? { ".innerZoomElementWrapper > *": { minWidth: `calc(100% / ${columns} - 20px)` } } : {}
);
var StyledSource = (0, import_theming5.styled)(Source)(({ theme }) => ({
  margin: 0,
  borderTopLeftRadius: 0,
  borderTopRightRadius: 0,
  borderBottomLeftRadius: theme.appBorderRadius,
  borderBottomRightRadius: theme.appBorderRadius,
  border: "none",
  background: theme.base === "light" ? "rgba(0, 0, 0, 0.85)" : (0, import_polished3.darken)(0.05, theme.background.content),
  color: theme.color.lightest,
  button: {
    background: theme.base === "light" ? "rgba(0, 0, 0, 0.85)" : (0, import_polished3.darken)(0.05, theme.background.content)
  }
}));
var PreviewContainer = import_theming5.styled.div(
  ({ theme, withSource, isExpanded }) => ({
    position: "relative",
    overflow: "hidden",
    margin: "25px 0 40px",
    ...getBlockBackgroundStyle(theme),
    borderBottomLeftRadius: withSource && isExpanded && 0,
    borderBottomRightRadius: withSource && isExpanded && 0,
    borderBottomWidth: isExpanded && 0
  }),
  ({ withToolbar }) => withToolbar && { paddingTop: 40 }
);
var getSource = (withSource, expanded, setExpanded) => {
  switch (true) {
    case !!(withSource && withSource.error): {
      return {
        source: null,
        actionItem: {
          title: "No code available",
          className: "docblock-code-toggle docblock-code-toggle--disabled",
          disabled: true,
          onClick: () => setExpanded(false)
        }
      };
    }
    case expanded: {
      return {
        source: /* @__PURE__ */ import_react9.default.createElement(StyledSource, {
          ...withSource,
          dark: true
        }),
        actionItem: {
          title: "Hide code",
          className: "docblock-code-toggle docblock-code-toggle--expanded",
          onClick: () => setExpanded(false)
        }
      };
    }
    default: {
      return {
        source: /* @__PURE__ */ import_react9.default.createElement(StyledSource, {
          ...withSource,
          dark: true
        }),
        actionItem: {
          title: "Show code",
          className: "docblock-code-toggle",
          onClick: () => setExpanded(true)
        }
      };
    }
  }
};
function getStoryId(children) {
  if (import_react9.Children.count(children) === 1) {
    const elt = children;
    if (elt.props) {
      return elt.props.id;
    }
  }
  return null;
}
var PositionedToolbar = (0, import_theming5.styled)(Toolbar)({
  position: "absolute",
  top: 0,
  left: 0,
  right: 0,
  height: 40
});
var Relative = import_theming5.styled.div({
  overflow: "hidden",
  position: "relative"
});
var getLayout = (children) => {
  return children.reduce((result, c) => {
    if (result) {
      return result;
    }
    if (typeof c === "string" || typeof c === "number") {
      return "padded";
    }
    return c.props && c.props.parameters && c.props.parameters.layout || "padded";
  }, void 0);
};
var Preview = ({
  isLoading,
  isColumn,
  columns,
  children,
  withSource,
  withToolbar = false,
  isExpanded = false,
  additionalActions,
  className,
  ...props
}) => {
  const [expanded, setExpanded] = (0, import_react9.useState)(isExpanded);
  const { source, actionItem } = getSource(withSource, expanded, setExpanded);
  const [scale, setScale] = (0, import_react9.useState)(1);
  const previewClasses = [className].concat(["sbdocs", "sbdocs-preview"]);
  const defaultActionItems = withSource ? [actionItem] : [];
  const [additionalActionItems, setAdditionalActionItems] = (0, import_react9.useState)(
    additionalActions ? [...additionalActions] : []
  );
  const actionItems = [...defaultActionItems, ...additionalActionItems];
  const layout = getLayout(import_react9.Children.count(children) === 1 ? [children] : children);
  const { window: globalWindow5 } = import_global3.default;
  const copyToClipboard = (0, import_react9.useCallback)(async (text) => {
    const { createCopyToClipboardFunction } = await import("@storybook/components");
    createCopyToClipboardFunction();
  }, []);
  const onCopyCapture = (e) => {
    e.preventDefault();
    if (additionalActionItems.filter((item) => item.title === "Copied").length === 0) {
      copyToClipboard(source.props.code).then(() => {
        setAdditionalActionItems([
          ...additionalActionItems,
          {
            title: "Copied",
            onClick: () => {
            }
          }
        ]);
        globalWindow5.setTimeout(
          () => setAdditionalActionItems(
            additionalActionItems.filter((item) => item.title !== "Copied")
          ),
          1500
        );
      });
    }
  };
  return /* @__PURE__ */ import_react9.default.createElement(PreviewContainer, {
    ...{ withSource, withToolbar },
    ...props,
    className: previewClasses.join(" ")
  }, withToolbar && /* @__PURE__ */ import_react9.default.createElement(PositionedToolbar, {
    isLoading,
    border: true,
    zoom: (z) => setScale(scale * z),
    resetZoom: () => setScale(1),
    storyId: getStoryId(children),
    baseUrl: "./iframe.html"
  }), /* @__PURE__ */ import_react9.default.createElement(ZoomContext.Provider, {
    value: { scale }
  }, /* @__PURE__ */ import_react9.default.createElement(Relative, {
    className: "docs-story",
    onCopyCapture: withSource && onCopyCapture
  }, /* @__PURE__ */ import_react9.default.createElement(ChildrenContainer, {
    isColumn: isColumn || !Array.isArray(children),
    columns,
    layout
  }, /* @__PURE__ */ import_react9.default.createElement(import_components7.Zoom.Element, {
    scale
  }, Array.isArray(children) ? children.map((child, i) => /* @__PURE__ */ import_react9.default.createElement("div", {
    key: i
  }, child)) : /* @__PURE__ */ import_react9.default.createElement("div", null, children))), /* @__PURE__ */ import_react9.default.createElement(import_components7.ActionBar, {
    actionItems
  }))), withSource && expanded && source);
};
var StyledPreview = (0, import_theming5.styled)(Preview)(() => ({
  ".docs-story": {
    paddingTop: 32,
    paddingBottom: 40
  }
}));
var PreviewSkeleton = () => /* @__PURE__ */ import_react9.default.createElement(StyledPreview, {
  isLoading: true,
  withToolbar: true
}, /* @__PURE__ */ import_react9.default.createElement(StorySkeleton, null));

// src/components/ArgsTable/ArgsTable.tsx
var import_react30 = __toESM(require("react"));
var import_pickBy = __toESM(require("lodash/pickBy"));
var import_theming21 = require("@storybook/theming");
var import_polished8 = require("polished");
var import_csf = require("@storybook/csf");
var import_client_logger5 = require("@storybook/client-logger");
var import_components20 = require("@storybook/components");

// src/components/ArgsTable/ArgRow.tsx
var import_react28 = __toESM(require("react"));
var import_markdown_to_jsx2 = __toESM(require("markdown-to-jsx"));
var import_polished6 = require("polished");
var import_theming19 = require("@storybook/theming");
var import_components18 = require("@storybook/components");

// src/components/ArgsTable/ArgJsDoc.tsx
var import_react10 = __toESM(require("react"));
var import_theming6 = require("@storybook/theming");
var import_components8 = require("@storybook/components");
var Table = import_theming6.styled.table(({ theme }) => ({
  "&&": {
    borderCollapse: "collapse",
    borderSpacing: 0,
    border: "none",
    tr: {
      border: "none !important",
      background: "none"
    },
    "td, th": {
      padding: 0,
      border: "none",
      width: "auto!important"
    },
    marginTop: 0,
    marginBottom: 0,
    "th:first-of-type, td:first-of-type": {
      paddingLeft: 0
    },
    "th:last-of-type, td:last-of-type": {
      paddingRight: 0
    },
    td: {
      paddingTop: 0,
      paddingBottom: 4,
      "&:not(:first-of-type)": {
        paddingLeft: 10,
        paddingRight: 0
      }
    },
    tbody: {
      boxShadow: "none",
      border: "none"
    },
    code: (0, import_components8.codeCommon)({ theme }),
    "& code": {
      margin: 0,
      display: "inline-block",
      fontSize: theme.typography.size.s1
    }
  }
}));
var ArgJsDoc = ({ tags }) => {
  const params = (tags.params || []).filter((x) => x.description);
  const hasDisplayableParams = params.length !== 0;
  const hasDisplayableReturns = tags.returns != null && tags.returns.description != null;
  if (!hasDisplayableParams && !hasDisplayableReturns) {
    return null;
  }
  return /* @__PURE__ */ import_react10.default.createElement(Table, null, /* @__PURE__ */ import_react10.default.createElement("tbody", null, hasDisplayableParams && params.map((x) => {
    return /* @__PURE__ */ import_react10.default.createElement("tr", {
      key: x.name
    }, /* @__PURE__ */ import_react10.default.createElement("td", null, /* @__PURE__ */ import_react10.default.createElement("code", null, x.name)), /* @__PURE__ */ import_react10.default.createElement("td", null, x.description));
  }), hasDisplayableReturns && /* @__PURE__ */ import_react10.default.createElement("tr", {
    key: "returns"
  }, /* @__PURE__ */ import_react10.default.createElement("td", null, /* @__PURE__ */ import_react10.default.createElement("code", null, "Returns")), /* @__PURE__ */ import_react10.default.createElement("td", null, tags.returns.description))));
};

// src/components/ArgsTable/ArgValue.tsx
var import_react11 = __toESM(require("react"));
var import_memoizerific = __toESM(require("memoizerific"));
var import_uniq = __toESM(require("lodash/uniq"));
var import_theming7 = require("@storybook/theming");
var import_components9 = require("@storybook/components");
var ITEMS_BEFORE_EXPANSION = 8;
var Summary = import_theming7.styled.div(({ isExpanded }) => ({
  display: "flex",
  flexDirection: isExpanded ? "column" : "row",
  flexWrap: "wrap",
  alignItems: "flex-start",
  marginBottom: "-4px",
  minWidth: 100
}));
var Text = import_theming7.styled.span(import_components9.codeCommon, ({ theme, simple = false }) => ({
  flex: "0 0 auto",
  fontFamily: theme.typography.fonts.mono,
  fontSize: theme.typography.size.s1,
  wordBreak: "break-word",
  whiteSpace: "normal",
  maxWidth: "100%",
  margin: 0,
  marginRight: "4px",
  marginBottom: "4px",
  paddingTop: "2px",
  paddingBottom: "2px",
  lineHeight: "13px",
  ...simple && {
    background: "transparent",
    border: "0 none",
    paddingLeft: 0
  }
}));
var ExpandButton = import_theming7.styled.button(({ theme }) => ({
  fontFamily: theme.typography.fonts.mono,
  color: theme.color.secondary,
  marginBottom: "4px",
  background: "none",
  border: "none"
}));
var Expandable = import_theming7.styled.div(import_components9.codeCommon, ({ theme }) => ({
  fontFamily: theme.typography.fonts.mono,
  color: theme.color.secondary,
  fontSize: theme.typography.size.s1,
  margin: 0,
  whiteSpace: "nowrap",
  display: "flex",
  alignItems: "center"
}));
var Detail = import_theming7.styled.div(({ theme, width }) => ({
  width,
  minWidth: 200,
  maxWidth: 800,
  padding: 15,
  fontFamily: theme.typography.fonts.mono,
  fontSize: theme.typography.size.s1,
  boxSizing: "content-box",
  "& code": {
    padding: "0 !important"
  }
}));
var ArrowIcon = (0, import_theming7.styled)(import_components9.Icons)({
  height: 10,
  width: 10,
  minWidth: 10,
  marginLeft: 4
});
var EmptyArg = () => {
  return /* @__PURE__ */ import_react11.default.createElement("span", null, "-");
};
var ArgText = ({ text, simple }) => {
  return /* @__PURE__ */ import_react11.default.createElement(Text, {
    simple
  }, text);
};
var calculateDetailWidth = (0, import_memoizerific.default)(1e3)((detail) => {
  const lines = detail.split(/\r?\n/);
  return `${Math.max(...lines.map((x) => x.length))}ch`;
});
var getSummaryItems = (summary) => {
  if (!summary)
    return [summary];
  const splittedItems = summary.split("|");
  const summaryItems = splittedItems.map((value2) => value2.trim());
  return (0, import_uniq.default)(summaryItems);
};
var renderSummaryItems = (summaryItems, isExpanded = true) => {
  let items = summaryItems;
  if (!isExpanded) {
    items = summaryItems.slice(0, ITEMS_BEFORE_EXPANSION);
  }
  return items.map((item) => /* @__PURE__ */ import_react11.default.createElement(ArgText, {
    key: item,
    text: item === "" ? '""' : item
  }));
};
var ArgSummary = ({ value: value2, initialExpandedArgs }) => {
  const { summary, detail } = value2;
  const [isOpen, setIsOpen] = (0, import_react11.useState)(false);
  const [isExpanded, setIsExpanded] = (0, import_react11.useState)(initialExpandedArgs || false);
  if (summary === void 0 || summary === null)
    return null;
  const summaryAsString = typeof summary.toString === "function" ? summary.toString() : summary;
  if (detail == null) {
    const cannotBeSafelySplitted = /[(){}[\]<>]/.test(summaryAsString);
    if (cannotBeSafelySplitted) {
      return /* @__PURE__ */ import_react11.default.createElement(ArgText, {
        text: summaryAsString
      });
    }
    const summaryItems = getSummaryItems(summaryAsString);
    const itemsCount = summaryItems.length;
    const hasManyItems = itemsCount > ITEMS_BEFORE_EXPANSION;
    return hasManyItems ? /* @__PURE__ */ import_react11.default.createElement(Summary, {
      isExpanded
    }, renderSummaryItems(summaryItems, isExpanded), /* @__PURE__ */ import_react11.default.createElement(ExpandButton, {
      onClick: () => setIsExpanded(!isExpanded)
    }, isExpanded ? "Show less..." : `Show ${itemsCount - ITEMS_BEFORE_EXPANSION} more...`)) : /* @__PURE__ */ import_react11.default.createElement(Summary, null, renderSummaryItems(summaryItems));
  }
  return /* @__PURE__ */ import_react11.default.createElement(import_components9.WithTooltipPure, {
    closeOnClick: true,
    trigger: "click",
    placement: "bottom",
    tooltipShown: isOpen,
    onVisibilityChange: (isVisible) => {
      setIsOpen(isVisible);
    },
    tooltip: /* @__PURE__ */ import_react11.default.createElement(Detail, {
      width: calculateDetailWidth(detail)
    }, /* @__PURE__ */ import_react11.default.createElement(import_components9.SyntaxHighlighter, {
      language: "jsx",
      format: false
    }, detail))
  }, /* @__PURE__ */ import_react11.default.createElement(Expandable, {
    className: "sbdocs-expandable"
  }, /* @__PURE__ */ import_react11.default.createElement("span", null, summaryAsString), /* @__PURE__ */ import_react11.default.createElement(ArrowIcon, {
    icon: isOpen ? "arrowup" : "arrowdown"
  })));
};
var ArgValue = ({ value: value2, initialExpandedArgs }) => {
  return value2 == null ? /* @__PURE__ */ import_react11.default.createElement(EmptyArg, null) : /* @__PURE__ */ import_react11.default.createElement(ArgSummary, {
    value: value2,
    initialExpandedArgs
  });
};

// src/components/ArgsTable/ArgControl.tsx
var import_react27 = __toESM(require("react"));

// src/controls/index.tsx
var import_react26 = __toESM(require("react"));

// src/controls/Boolean.tsx
var import_react12 = __toESM(require("react"));
var import_polished4 = require("polished");
var import_theming8 = require("@storybook/theming");
var import_components10 = require("@storybook/components");
init_helpers();
var Label = import_theming8.styled.label(({ theme }) => ({
  lineHeight: "18px",
  alignItems: "center",
  marginBottom: 8,
  display: "inline-block",
  position: "relative",
  whiteSpace: "nowrap",
  background: `${(0, import_polished4.opacify)(0.05, theme.appBorderColor)}`,
  borderRadius: "3em",
  padding: 1,
  input: {
    appearance: "none",
    width: "100%",
    height: "100%",
    position: "absolute",
    left: 0,
    top: 0,
    margin: 0,
    padding: 0,
    border: "none",
    background: "transparent",
    cursor: "pointer",
    borderRadius: "3em",
    "&:focus": {
      outline: "none",
      boxShadow: `${theme.color.secondary} 0 0 0 1px inset !important`
    }
  },
  span: {
    textAlign: "center",
    fontSize: theme.typography.size.s1,
    fontWeight: theme.typography.weight.bold,
    lineHeight: "1",
    cursor: "pointer",
    display: "inline-block",
    padding: "7px 15px",
    transition: "all 100ms ease-out",
    userSelect: "none",
    borderRadius: "3em",
    color: (0, import_polished4.transparentize)(0.4, theme.color.defaultText),
    background: "transparent",
    "&:hover": {
      boxShadow: `${(0, import_polished4.opacify)(0.3, theme.appBorderColor)} 0 0 0 1px inset`
    },
    "&:active": {
      boxShadow: `${(0, import_polished4.opacify)(0.05, theme.appBorderColor)} 0 0 0 2px inset`,
      color: (0, import_polished4.opacify)(1, theme.appBorderColor)
    },
    "&:first-of-type": {
      paddingRight: 8
    },
    "&:last-of-type": {
      paddingLeft: 8
    }
  },
  "input:checked ~ span:last-of-type, input:not(:checked) ~ span:first-of-type": {
    background: theme.background.app,
    boxShadow: `${(0, import_polished4.opacify)(0.1, theme.appBorderColor)} 0 0 2px`,
    color: theme.color.defaultText,
    padding: "7px 15px"
  }
}));
var parse = (value2) => value2 === "true";
var BooleanControl = ({ name, value: value2, onChange, onBlur, onFocus }) => {
  const onSetFalse = (0, import_react12.useCallback)(() => onChange(false), [onChange]);
  if (value2 === void 0) {
    return /* @__PURE__ */ import_react12.default.createElement(import_components10.Form.Button, {
      id: getControlSetterButtonId(name),
      onClick: onSetFalse
    }, "Set boolean");
  }
  const parsedValue = typeof value2 === "string" ? parse(value2) : value2;
  return /* @__PURE__ */ import_react12.default.createElement(Label, {
    htmlFor: name,
    title: parsedValue ? "Change to false" : "Change to true"
  }, /* @__PURE__ */ import_react12.default.createElement("input", {
    id: getControlId(name),
    type: "checkbox",
    onChange: (e) => onChange(e.target.checked),
    checked: parsedValue,
    ...{ name, onBlur, onFocus }
  }), /* @__PURE__ */ import_react12.default.createElement("span", null, "False"), /* @__PURE__ */ import_react12.default.createElement("span", null, "True"));
};

// src/controls/Date.tsx
var import_react13 = __toESM(require("react"));
var import_theming9 = require("@storybook/theming");
var import_components11 = require("@storybook/components");
init_helpers();
var parseDate = (value2) => {
  const [year, month, day] = value2.split("-");
  const result = new Date();
  result.setFullYear(parseInt(year, 10), parseInt(month, 10) - 1, parseInt(day, 10));
  return result;
};
var parseTime = (value2) => {
  const [hours, minutes] = value2.split(":");
  const result = new Date();
  result.setHours(parseInt(hours, 10));
  result.setMinutes(parseInt(minutes, 10));
  return result;
};
var formatDate = (value2) => {
  const date = new Date(value2);
  const year = `000${date.getFullYear()}`.slice(-4);
  const month = `0${date.getMonth() + 1}`.slice(-2);
  const day = `0${date.getDate()}`.slice(-2);
  return `${year}-${month}-${day}`;
};
var formatTime = (value2) => {
  const date = new Date(value2);
  const hours = `0${date.getHours()}`.slice(-2);
  const minutes = `0${date.getMinutes()}`.slice(-2);
  return `${hours}:${minutes}`;
};
var FlexSpaced = import_theming9.styled.div(({ theme }) => ({
  flex: 1,
  display: "flex",
  input: {
    marginLeft: 10,
    flex: 1,
    height: 32,
    "&::-webkit-calendar-picker-indicator": {
      opacity: 0.5,
      height: 12,
      filter: theme.base === "light" ? void 0 : "invert(1)"
    }
  },
  "input:first-of-type": {
    marginLeft: 0,
    flexGrow: 4
  },
  "input:last-of-type": {
    flexGrow: 3
  }
}));
var DateControl = ({ name, value: value2, onChange, onFocus, onBlur }) => {
  const [valid, setValid] = (0, import_react13.useState)(true);
  const dateRef = (0, import_react13.useRef)();
  const timeRef = (0, import_react13.useRef)();
  (0, import_react13.useEffect)(() => {
    if (valid !== false) {
      if (dateRef && dateRef.current) {
        dateRef.current.value = formatDate(value2);
      }
      if (timeRef && timeRef.current) {
        timeRef.current.value = formatTime(value2);
      }
    }
  }, [value2]);
  const onDateChange = (e) => {
    const parsed = parseDate(e.target.value);
    const result = new Date(value2);
    result.setFullYear(parsed.getFullYear(), parsed.getMonth(), parsed.getDate());
    const time = result.getTime();
    if (time)
      onChange(time);
    setValid(!!time);
  };
  const onTimeChange = (e) => {
    const parsed = parseTime(e.target.value);
    const result = new Date(value2);
    result.setHours(parsed.getHours());
    result.setMinutes(parsed.getMinutes());
    const time = result.getTime();
    if (time)
      onChange(time);
    setValid(!!time);
  };
  const controlId = getControlId(name);
  return /* @__PURE__ */ import_react13.default.createElement(FlexSpaced, null, /* @__PURE__ */ import_react13.default.createElement(import_components11.Form.Input, {
    type: "date",
    max: "9999-12-31",
    ref: dateRef,
    id: `${controlId}-date`,
    name: `${controlId}-date`,
    onChange: onDateChange,
    ...{ onFocus, onBlur }
  }), /* @__PURE__ */ import_react13.default.createElement(import_components11.Form.Input, {
    type: "time",
    id: `${controlId}-time`,
    name: `${controlId}-time`,
    ref: timeRef,
    onChange: onTimeChange,
    ...{ onFocus, onBlur }
  }), !valid ? /* @__PURE__ */ import_react13.default.createElement("div", null, "invalid") : null);
};

// src/controls/Number.tsx
var import_react14 = __toESM(require("react"));
var import_theming10 = require("@storybook/theming");
var import_components12 = require("@storybook/components");
init_helpers();
var Wrapper2 = import_theming10.styled.label({
  display: "flex"
});
var parse2 = (value2) => {
  const result = parseFloat(value2);
  return Number.isNaN(result) ? void 0 : result;
};
var format = (value2) => value2 != null ? String(value2) : "";
var NumberControl = ({
  name,
  value: value2,
  onChange,
  min,
  max,
  step,
  onBlur,
  onFocus
}) => {
  const [inputValue, setInputValue] = (0, import_react14.useState)(typeof value2 === "number" ? value2 : "");
  const [forceVisible, setForceVisible] = (0, import_react14.useState)(false);
  const [parseError, setParseError] = (0, import_react14.useState)(null);
  const handleChange = (0, import_react14.useCallback)(
    (event) => {
      setInputValue(event.target.value);
      const result = parseFloat(event.target.value);
      if (Number.isNaN(result)) {
        setParseError(new Error(`'${event.target.value}' is not a number`));
      } else {
        onChange(result);
        setParseError(null);
      }
    },
    [onChange, setParseError]
  );
  const onForceVisible = (0, import_react14.useCallback)(() => {
    setInputValue("0");
    onChange(0);
    setForceVisible(true);
  }, [setForceVisible]);
  const htmlElRef = (0, import_react14.useRef)(null);
  (0, import_react14.useEffect)(() => {
    if (forceVisible && htmlElRef.current)
      htmlElRef.current.select();
  }, [forceVisible]);
  (0, import_react14.useEffect)(() => {
    const newInputValue = typeof value2 === "number" ? value2 : "";
    if (inputValue !== newInputValue) {
      setInputValue(value2);
    }
  }, [value2]);
  if (!forceVisible && value2 === void 0) {
    return /* @__PURE__ */ import_react14.default.createElement(import_components12.Form.Button, {
      id: getControlSetterButtonId(name),
      onClick: onForceVisible
    }, "Set number");
  }
  return /* @__PURE__ */ import_react14.default.createElement(Wrapper2, null, /* @__PURE__ */ import_react14.default.createElement(import_components12.Form.Input, {
    ref: htmlElRef,
    id: getControlId(name),
    type: "number",
    onChange: handleChange,
    size: "flex",
    placeholder: "Edit number...",
    value: inputValue,
    valid: parseError ? "error" : null,
    autoFocus: forceVisible,
    ...{ name, min, max, step, onFocus, onBlur }
  }));
};

// src/controls/options/Options.tsx
var import_react18 = __toESM(require("react"));
var import_ts_dedent = require("ts-dedent");
var import_client_logger4 = require("@storybook/client-logger");

// src/controls/options/Checkbox.tsx
var import_react15 = __toESM(require("react"));
var import_theming11 = require("@storybook/theming");
var import_client_logger = require("@storybook/client-logger");

// src/controls/options/helpers.ts
var selectedKey = (value2, options) => {
  const entry = options && Object.entries(options).find(([_key, val]) => val === value2);
  return entry ? entry[0] : void 0;
};
var selectedKeys = (value2, options) => value2 && options ? Object.entries(options).filter((entry) => value2.includes(entry[1])).map((entry) => entry[0]) : [];
var selectedValues = (keys, options) => keys && options && keys.map((key) => options[key]);

// src/controls/options/Checkbox.tsx
init_helpers();
var Wrapper3 = import_theming11.styled.div(
  ({ isInline }) => isInline ? {
    display: "flex",
    flexWrap: "wrap",
    alignItems: "flex-start",
    label: {
      display: "inline-flex",
      marginRight: 15
    }
  } : {
    label: {
      display: "flex"
    }
  }
);
var Text2 = import_theming11.styled.span({});
var Label2 = import_theming11.styled.label({
  lineHeight: "20px",
  alignItems: "center",
  marginBottom: 8,
  "&:last-child": {
    marginBottom: 0
  },
  input: {
    margin: 0,
    marginRight: 6
  }
});
var CheckboxControl = ({
  name,
  options,
  value: value2,
  onChange,
  isInline
}) => {
  if (!options) {
    import_client_logger.logger.warn(`Checkbox with no options: ${name}`);
    return /* @__PURE__ */ import_react15.default.createElement(import_react15.default.Fragment, null, "-");
  }
  const initial = selectedKeys(value2, options);
  const [selected, setSelected] = (0, import_react15.useState)(initial);
  const handleChange = (e) => {
    const option = e.target.value;
    const updated = [...selected];
    if (updated.includes(option)) {
      updated.splice(updated.indexOf(option), 1);
    } else {
      updated.push(option);
    }
    onChange(selectedValues(updated, options));
    setSelected(updated);
  };
  const controlId = getControlId(name);
  return /* @__PURE__ */ import_react15.default.createElement(Wrapper3, {
    isInline
  }, Object.keys(options).map((key, index) => {
    const id2 = `${controlId}-${index}`;
    return /* @__PURE__ */ import_react15.default.createElement(Label2, {
      key: id2,
      htmlFor: id2
    }, /* @__PURE__ */ import_react15.default.createElement("input", {
      type: "checkbox",
      id: id2,
      name: id2,
      value: key,
      onChange: handleChange,
      checked: selected == null ? void 0 : selected.includes(key)
    }), /* @__PURE__ */ import_react15.default.createElement(Text2, null, key));
  }));
};

// src/controls/options/Radio.tsx
var import_react16 = __toESM(require("react"));
var import_theming12 = require("@storybook/theming");
var import_client_logger2 = require("@storybook/client-logger");
init_helpers();
var Wrapper4 = import_theming12.styled.div(
  ({ isInline }) => isInline ? {
    display: "flex",
    flexWrap: "wrap",
    alignItems: "flex-start",
    label: {
      display: "inline-flex",
      marginRight: 15
    }
  } : {
    label: {
      display: "flex"
    }
  }
);
var Text3 = import_theming12.styled.span({});
var Label3 = import_theming12.styled.label({
  lineHeight: "20px",
  alignItems: "center",
  marginBottom: 8,
  "&:last-child": {
    marginBottom: 0
  },
  input: {
    margin: 0,
    marginRight: 6
  }
});
var RadioControl = ({ name, options, value: value2, onChange, isInline }) => {
  if (!options) {
    import_client_logger2.logger.warn(`Radio with no options: ${name}`);
    return /* @__PURE__ */ import_react16.default.createElement(import_react16.default.Fragment, null, "-");
  }
  const selection = selectedKey(value2, options);
  const controlId = getControlId(name);
  return /* @__PURE__ */ import_react16.default.createElement(Wrapper4, {
    isInline
  }, Object.keys(options).map((key, index) => {
    const id2 = `${controlId}-${index}`;
    return /* @__PURE__ */ import_react16.default.createElement(Label3, {
      key: id2,
      htmlFor: id2
    }, /* @__PURE__ */ import_react16.default.createElement("input", {
      type: "radio",
      id: id2,
      name: id2,
      value: key,
      onChange: (e) => onChange(options[e.currentTarget.value]),
      checked: key === selection
    }), /* @__PURE__ */ import_react16.default.createElement(Text3, null, key));
  }));
};

// src/controls/options/Select.tsx
var import_react17 = __toESM(require("react"));
var import_theming13 = require("@storybook/theming");
var import_client_logger3 = require("@storybook/client-logger");
var import_components13 = require("@storybook/components");
init_helpers();
var styleResets = {
  appearance: "none",
  border: "0 none",
  boxSizing: "inherit",
  display: " block",
  margin: " 0",
  background: "transparent",
  padding: 0,
  fontSize: "inherit",
  position: "relative"
};
var OptionsSelect = import_theming13.styled.select(({ theme }) => ({
  ...styleResets,
  boxSizing: "border-box",
  position: "relative",
  padding: "6px 10px",
  width: "100%",
  color: theme.input.color || "inherit",
  background: theme.input.background,
  borderRadius: theme.input.borderRadius,
  boxShadow: `${theme.input.border} 0 0 0 1px inset`,
  fontSize: theme.typography.size.s2 - 1,
  lineHeight: "20px",
  "&:focus": {
    boxShadow: `${theme.color.secondary} 0 0 0 1px inset`,
    outline: "none"
  },
  "&[disabled]": {
    cursor: "not-allowed",
    opacity: 0.5
  },
  "::placeholder": {
    color: theme.color.mediumdark
  },
  "&[multiple]": {
    overflow: "auto",
    padding: 0,
    option: {
      display: "block",
      padding: "6px 10px",
      marginLeft: 1,
      marginRight: 1
    }
  }
}));
var SelectWrapper = import_theming13.styled.span`
  display: inline-block;
  line-height: normal;
  overflow: hidden;
  position: relative;
  vertical-align: top;
  width: 100%;

  svg {
    position: absolute;
    z-index: 1;
    pointer-events: none;
    height: 12px;
    margin-top: -6px;
    right: 12px;
    top: 50%;

    path {
      fill: currentColor;
    }
  }
`;
var NO_SELECTION = "Choose option...";
var SingleSelect = ({ name, value: value2, options, onChange }) => {
  const handleChange = (e) => {
    onChange(options[e.currentTarget.value]);
  };
  const selection = selectedKey(value2, options) || NO_SELECTION;
  const controlId = getControlId(name);
  return /* @__PURE__ */ import_react17.default.createElement(SelectWrapper, null, /* @__PURE__ */ import_react17.default.createElement(import_components13.Icons, {
    icon: "arrowdown"
  }), /* @__PURE__ */ import_react17.default.createElement(OptionsSelect, {
    id: controlId,
    value: selection,
    onChange: handleChange
  }, /* @__PURE__ */ import_react17.default.createElement("option", {
    key: "no-selection",
    disabled: true
  }, NO_SELECTION), Object.keys(options).map((key) => /* @__PURE__ */ import_react17.default.createElement("option", {
    key
  }, key))));
};
var MultiSelect = ({ name, value: value2, options, onChange }) => {
  const handleChange = (e) => {
    const selection2 = Array.from(e.currentTarget.options).filter((option) => option.selected).map((option) => option.value);
    onChange(selectedValues(selection2, options));
  };
  const selection = selectedKeys(value2, options);
  const controlId = getControlId(name);
  return /* @__PURE__ */ import_react17.default.createElement(SelectWrapper, null, /* @__PURE__ */ import_react17.default.createElement(OptionsSelect, {
    id: controlId,
    multiple: true,
    value: selection,
    onChange: handleChange
  }, Object.keys(options).map((key) => /* @__PURE__ */ import_react17.default.createElement("option", {
    key
  }, key))));
};
var SelectControl = (props) => {
  const { name, options } = props;
  if (!options) {
    import_client_logger3.logger.warn(`Select with no options: ${name}`);
    return /* @__PURE__ */ import_react17.default.createElement(import_react17.default.Fragment, null, "-");
  }
  return props.isMulti ? /* @__PURE__ */ import_react17.default.createElement(MultiSelect, {
    ...props
  }) : /* @__PURE__ */ import_react17.default.createElement(SingleSelect, {
    ...props
  });
};

// src/controls/options/Options.tsx
var normalizeOptions = (options, labels) => {
  if (Array.isArray(options)) {
    return options.reduce((acc, item) => {
      acc[(labels == null ? void 0 : labels[item]) || String(item)] = item;
      return acc;
    }, {});
  }
  return options;
};
var Controls = {
  check: CheckboxControl,
  "inline-check": CheckboxControl,
  radio: RadioControl,
  "inline-radio": RadioControl,
  select: SelectControl,
  "multi-select": SelectControl
};
var OptionsControl = (props) => {
  const { type = "select", options, labels, argType } = props;
  const normalized = {
    ...props,
    options: normalizeOptions(options || argType.options, labels),
    isInline: type.includes("inline"),
    isMulti: type.includes("multi")
  };
  if (options) {
    import_client_logger4.once.warn(import_ts_dedent.dedent`
      'control.options' is deprecated and will be removed in Storybook 7.0. Define 'options' directly on the argType instead, and use 'control.labels' for custom labels.

      More info: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#deprecated-controloptions
    `);
  }
  const Control = Controls[type];
  if (Control) {
    return /* @__PURE__ */ import_react18.default.createElement(Control, {
      ...normalized
    });
  }
  throw new Error(`Unknown options type: ${type}`);
};

// src/controls/Object.tsx
var import_global4 = __toESM(require("global"));
var import_cloneDeep = __toESM(require("lodash/cloneDeep"));
var import_react21 = __toESM(require("react"));
var import_theming14 = require("@storybook/theming");
var import_components14 = require("@storybook/components");

// src/controls/react-editable-json-tree/index.tsx
var import_react20 = __toESM(require("react"));

// src/controls/react-editable-json-tree/JsonNodes.tsx
var import_react19 = __toESM(require("react"));

// src/controls/react-editable-json-tree/types/inputUsageTypes.ts
var VALUE = "value";
var KEY = "key";

// src/controls/react-editable-json-tree/types/dataTypes.ts
var ERROR = "Error";
var OBJECT = "Object";
var ARRAY = "Array";
var STRING = "String";
var NUMBER = "Number";
var BOOLEAN = "Boolean";
var DATE = "Date";
var NULL = "Null";
var UNDEFINED = "Undefined";
var FUNCTION = "Function";
var SYMBOL = "Symbol";

// src/controls/react-editable-json-tree/types/deltaTypes.ts
var ADD_DELTA_TYPE = "ADD_DELTA_TYPE";
var REMOVE_DELTA_TYPE = "REMOVE_DELTA_TYPE";
var UPDATE_DELTA_TYPE = "UPDATE_DELTA_TYPE";

// src/controls/react-editable-json-tree/utils/objectTypes.ts
function getObjectType(obj) {
  if (obj !== null && typeof obj === "object" && !Array.isArray(obj) && typeof obj[Symbol.iterator] === "function") {
    return "Iterable";
  }
  return Object.prototype.toString.call(obj).slice(8, -1);
}
function isComponentWillChange(oldValue, newValue) {
  const oldType = getObjectType(oldValue);
  const newType = getObjectType(newValue);
  return (oldType === "Function" || newType === "Function") && newType !== oldType;
}

// src/controls/react-editable-json-tree/JsonNodes.tsx
var JsonAddValue = class extends import_react19.Component {
  constructor(props) {
    super(props);
    this.state = {
      inputRefKey: null,
      inputRefValue: null
    };
    this.refInputValue = this.refInputValue.bind(this);
    this.refInputKey = this.refInputKey.bind(this);
    this.onKeydown = this.onKeydown.bind(this);
    this.onSubmit = this.onSubmit.bind(this);
  }
  componentDidMount() {
    const { inputRefKey, inputRefValue } = this.state;
    const { onlyValue } = this.props;
    if (inputRefKey && typeof inputRefKey.focus === "function") {
      inputRefKey.focus();
    }
    if (onlyValue && inputRefValue && typeof inputRefValue.focus === "function") {
      inputRefValue.focus();
    }
    document.addEventListener("keydown", this.onKeydown);
  }
  componentWillUnmount() {
    document.removeEventListener("keydown", this.onKeydown);
  }
  onKeydown(event) {
    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey || event.repeat)
      return;
    if (event.code === "Enter" || event.key === "Enter") {
      event.preventDefault();
      this.onSubmit();
    }
    if (event.code === "Escape" || event.key === "Escape") {
      event.preventDefault();
      this.props.handleCancel();
    }
  }
  onSubmit() {
    const { handleAdd, onlyValue, onSubmitValueParser, keyPath, deep } = this.props;
    const { inputRefKey, inputRefValue } = this.state;
    const result = {};
    if (!onlyValue) {
      if (!inputRefKey.value) {
        return;
      }
      result.key = inputRefKey.value;
    }
    result.newValue = onSubmitValueParser(false, keyPath, deep, result.key, inputRefValue.value);
    handleAdd(result);
  }
  refInputKey(node) {
    this.state.inputRefKey = node;
  }
  refInputValue(node) {
    this.state.inputRefValue = node;
  }
  render() {
    const {
      handleCancel,
      onlyValue,
      addButtonElement,
      cancelButtonElement,
      inputElementGenerator,
      keyPath,
      deep
    } = this.props;
    const addButtonElementLayout = (0, import_react19.cloneElement)(addButtonElement, {
      onClick: this.onSubmit
    });
    const cancelButtonElementLayout = (0, import_react19.cloneElement)(cancelButtonElement, {
      onClick: handleCancel
    });
    const inputElementValue = inputElementGenerator(VALUE, keyPath, deep);
    const inputElementValueLayout = (0, import_react19.cloneElement)(inputElementValue, {
      placeholder: "Value",
      ref: this.refInputValue
    });
    let inputElementKeyLayout = null;
    if (!onlyValue) {
      const inputElementKey = inputElementGenerator(KEY, keyPath, deep);
      inputElementKeyLayout = (0, import_react19.cloneElement)(inputElementKey, {
        placeholder: "Key",
        ref: this.refInputKey
      });
    }
    return /* @__PURE__ */ import_react19.default.createElement("span", {
      className: "rejt-add-value-node"
    }, inputElementKeyLayout, inputElementValueLayout, cancelButtonElementLayout, addButtonElementLayout);
  }
};
JsonAddValue.defaultProps = {
  onlyValue: false,
  addButtonElement: /* @__PURE__ */ import_react19.default.createElement("button", null, "+"),
  cancelButtonElement: /* @__PURE__ */ import_react19.default.createElement("button", null, "c")
};
var JsonArray = class extends import_react19.Component {
  constructor(props) {
    super(props);
    const keyPath = [...props.keyPath, props.name];
    this.state = {
      data: props.data,
      name: props.name,
      keyPath,
      deep: props.deep,
      nextDeep: props.deep + 1,
      collapsed: props.isCollapsed(keyPath, props.deep, props.data),
      addFormVisible: false
    };
    this.handleCollapseMode = this.handleCollapseMode.bind(this);
    this.handleRemoveItem = this.handleRemoveItem.bind(this);
    this.handleAddMode = this.handleAddMode.bind(this);
    this.handleAddValueAdd = this.handleAddValueAdd.bind(this);
    this.handleAddValueCancel = this.handleAddValueCancel.bind(this);
    this.handleEditValue = this.handleEditValue.bind(this);
    this.onChildUpdate = this.onChildUpdate.bind(this);
    this.renderCollapsed = this.renderCollapsed.bind(this);
    this.renderNotCollapsed = this.renderNotCollapsed.bind(this);
  }
  static getDerivedStateFromProps(props, state) {
    return props.data !== state.data ? { data: props.data } : null;
  }
  onChildUpdate(childKey, childData) {
    const { data, keyPath } = this.state;
    data[childKey] = childData;
    this.setState({
      data
    });
    const { onUpdate } = this.props;
    const size = keyPath.length;
    onUpdate(keyPath[size - 1], data);
  }
  handleAddMode() {
    this.setState({
      addFormVisible: true
    });
  }
  handleCollapseMode() {
    this.setState((state) => ({
      collapsed: !state.collapsed
    }));
  }
  handleRemoveItem(index) {
    return () => {
      const { beforeRemoveAction, logger: logger4 } = this.props;
      const { data, keyPath, nextDeep: deep } = this.state;
      const oldValue = data[index];
      beforeRemoveAction(index, keyPath, deep, oldValue).then(() => {
        const deltaUpdateResult = {
          keyPath,
          deep,
          key: index,
          oldValue,
          type: REMOVE_DELTA_TYPE
        };
        data.splice(index, 1);
        this.setState({ data });
        const { onUpdate, onDeltaUpdate } = this.props;
        onUpdate(keyPath[keyPath.length - 1], data);
        onDeltaUpdate(deltaUpdateResult);
      }).catch(logger4.error);
    };
  }
  handleAddValueAdd({ newValue }) {
    const { data, keyPath, nextDeep: deep } = this.state;
    const { beforeAddAction, logger: logger4 } = this.props;
    beforeAddAction(data.length, keyPath, deep, newValue).then(() => {
      const newData = [...data, newValue];
      this.setState({
        data: newData
      });
      this.handleAddValueCancel();
      const { onUpdate, onDeltaUpdate } = this.props;
      onUpdate(keyPath[keyPath.length - 1], newData);
      onDeltaUpdate({
        type: ADD_DELTA_TYPE,
        keyPath,
        deep,
        key: newData.length - 1,
        newValue
      });
    }).catch(logger4.error);
  }
  handleAddValueCancel() {
    this.setState({
      addFormVisible: false
    });
  }
  handleEditValue({ key, value: value2 }) {
    return new Promise((resolve, reject) => {
      const { beforeUpdateAction } = this.props;
      const { data, keyPath, nextDeep: deep } = this.state;
      const oldValue = data[key];
      beforeUpdateAction(key, keyPath, deep, oldValue, value2).then(() => {
        data[key] = value2;
        this.setState({
          data
        });
        const { onUpdate, onDeltaUpdate } = this.props;
        onUpdate(keyPath[keyPath.length - 1], data);
        onDeltaUpdate({
          type: UPDATE_DELTA_TYPE,
          keyPath,
          deep,
          key,
          newValue: value2,
          oldValue
        });
        resolve(void 0);
      }).catch(reject);
    });
  }
  renderCollapsed() {
    const { name, data, keyPath, deep } = this.state;
    const { handleRemove, readOnly, getStyle, dataType, minusMenuElement } = this.props;
    const { minus, collapsed } = getStyle(name, data, keyPath, deep, dataType);
    const isReadOnly = readOnly(name, data, keyPath, deep, dataType);
    const removeItemButton = (0, import_react19.cloneElement)(minusMenuElement, {
      onClick: handleRemove,
      className: "rejt-minus-menu",
      style: minus
    });
    return /* @__PURE__ */ import_react19.default.createElement("span", {
      className: "rejt-collapsed"
    }, /* @__PURE__ */ import_react19.default.createElement("span", {
      className: "rejt-collapsed-text",
      style: collapsed,
      onClick: this.handleCollapseMode
    }, "[...] ", data.length, " ", data.length === 1 ? "item" : "items"), !isReadOnly && removeItemButton);
  }
  renderNotCollapsed() {
    const { name, data, keyPath, deep, addFormVisible, nextDeep } = this.state;
    const {
      isCollapsed,
      handleRemove,
      onDeltaUpdate,
      readOnly,
      getStyle,
      dataType,
      addButtonElement,
      cancelButtonElement,
      editButtonElement,
      inputElementGenerator,
      textareaElementGenerator,
      minusMenuElement,
      plusMenuElement,
      beforeRemoveAction,
      beforeAddAction,
      beforeUpdateAction,
      logger: logger4,
      onSubmitValueParser
    } = this.props;
    const { minus, plus, delimiter, ul, addForm } = getStyle(name, data, keyPath, deep, dataType);
    const isReadOnly = readOnly(name, data, keyPath, deep, dataType);
    const addItemButton = (0, import_react19.cloneElement)(plusMenuElement, {
      onClick: this.handleAddMode,
      className: "rejt-plus-menu",
      style: plus
    });
    const removeItemButton = (0, import_react19.cloneElement)(minusMenuElement, {
      onClick: handleRemove,
      className: "rejt-minus-menu",
      style: minus
    });
    const onlyValue = true;
    const startObject = "[";
    const endObject = "]";
    return /* @__PURE__ */ import_react19.default.createElement("span", {
      className: "rejt-not-collapsed"
    }, /* @__PURE__ */ import_react19.default.createElement("span", {
      className: "rejt-not-collapsed-delimiter",
      style: delimiter
    }, startObject), !addFormVisible && addItemButton, /* @__PURE__ */ import_react19.default.createElement("ul", {
      className: "rejt-not-collapsed-list",
      style: ul
    }, data.map((item, index) => /* @__PURE__ */ import_react19.default.createElement(JsonNode, {
      key: index,
      name: `${index}`,
      data: item,
      keyPath,
      deep: nextDeep,
      isCollapsed,
      handleRemove: this.handleRemoveItem(index),
      handleUpdateValue: this.handleEditValue,
      onUpdate: this.onChildUpdate,
      onDeltaUpdate,
      readOnly,
      getStyle,
      addButtonElement,
      cancelButtonElement,
      editButtonElement,
      inputElementGenerator,
      textareaElementGenerator,
      minusMenuElement,
      plusMenuElement,
      beforeRemoveAction,
      beforeAddAction,
      beforeUpdateAction,
      logger: logger4,
      onSubmitValueParser
    }))), !isReadOnly && addFormVisible && /* @__PURE__ */ import_react19.default.createElement("div", {
      className: "rejt-add-form",
      style: addForm
    }, /* @__PURE__ */ import_react19.default.createElement(JsonAddValue, {
      handleAdd: this.handleAddValueAdd,
      handleCancel: this.handleAddValueCancel,
      onlyValue,
      addButtonElement,
      cancelButtonElement,
      inputElementGenerator,
      keyPath,
      deep,
      onSubmitValueParser
    })), /* @__PURE__ */ import_react19.default.createElement("span", {
      className: "rejt-not-collapsed-delimiter",
      style: delimiter
    }, endObject), !isReadOnly && removeItemButton);
  }
  render() {
    const { name, collapsed, data, keyPath, deep } = this.state;
    const { dataType, getStyle } = this.props;
    const value2 = collapsed ? this.renderCollapsed() : this.renderNotCollapsed();
    const style = getStyle(name, data, keyPath, deep, dataType);
    return /* @__PURE__ */ import_react19.default.createElement("div", {
      className: "rejt-array-node"
    }, /* @__PURE__ */ import_react19.default.createElement("span", {
      onClick: this.handleCollapseMode
    }, /* @__PURE__ */ import_react19.default.createElement("span", {
      className: "rejt-name",
      style: style.name
    }, name, " :", " ")), value2);
  }
};
JsonArray.defaultProps = {
  keyPath: [],
  deep: 0,
  minusMenuElement: /* @__PURE__ */ import_react19.default.createElement("span", null, " - "),
  plusMenuElement: /* @__PURE__ */ import_react19.default.createElement("span", null, " + ")
};
var JsonFunctionValue = class extends import_react19.Component {
  constructor(props) {
    super(props);
    const keyPath = [...props.keyPath, props.name];
    this.state = {
      value: props.value,
      name: props.name,
      keyPath,
      deep: props.deep,
      editEnabled: false,
      inputRef: null
    };
    this.handleEditMode = this.handleEditMode.bind(this);
    this.refInput = this.refInput.bind(this);
    this.handleCancelEdit = this.handleCancelEdit.bind(this);
    this.handleEdit = this.handleEdit.bind(this);
    this.onKeydown = this.onKeydown.bind(this);
  }
  static getDerivedStateFromProps(props, state) {
    return props.value !== state.value ? { value: props.value } : null;
  }
  componentDidUpdate() {
    const { editEnabled, inputRef, name, value: value2, keyPath, deep } = this.state;
    const { readOnly, dataType } = this.props;
    const readOnlyResult = readOnly(name, value2, keyPath, deep, dataType);
    if (editEnabled && !readOnlyResult && typeof inputRef.focus === "function") {
      inputRef.focus();
    }
  }
  componentDidMount() {
    document.addEventListener("keydown", this.onKeydown);
  }
  componentWillUnmount() {
    document.removeEventListener("keydown", this.onKeydown);
  }
  onKeydown(event) {
    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey || event.repeat)
      return;
    if (event.code === "Enter" || event.key === "Enter") {
      event.preventDefault();
      this.handleEdit();
    }
    if (event.code === "Escape" || event.key === "Escape") {
      event.preventDefault();
      this.handleCancelEdit();
    }
  }
  handleEdit() {
    const { handleUpdateValue, originalValue, logger: logger4, onSubmitValueParser, keyPath } = this.props;
    const { inputRef, name, deep } = this.state;
    if (!inputRef)
      return;
    const newValue = onSubmitValueParser(true, keyPath, deep, name, inputRef.value);
    const result = {
      value: newValue,
      key: name
    };
    handleUpdateValue(result).then(() => {
      if (!isComponentWillChange(originalValue, newValue)) {
        this.handleCancelEdit();
      }
    }).catch(logger4.error);
  }
  handleEditMode() {
    this.setState({
      editEnabled: true
    });
  }
  refInput(node) {
    this.state.inputRef = node;
  }
  handleCancelEdit() {
    this.setState({
      editEnabled: false
    });
  }
  render() {
    const { name, value: value2, editEnabled, keyPath, deep } = this.state;
    const {
      handleRemove,
      originalValue,
      readOnly,
      dataType,
      getStyle,
      editButtonElement,
      cancelButtonElement,
      textareaElementGenerator,
      minusMenuElement,
      keyPath: comeFromKeyPath
    } = this.props;
    const style = getStyle(name, originalValue, keyPath, deep, dataType);
    let result = null;
    let minusElement = null;
    const resultOnlyResult = readOnly(name, originalValue, keyPath, deep, dataType);
    if (editEnabled && !resultOnlyResult) {
      const textareaElement = textareaElementGenerator(
        VALUE,
        comeFromKeyPath,
        deep,
        name,
        originalValue,
        dataType
      );
      const editButtonElementLayout = (0, import_react19.cloneElement)(editButtonElement, {
        onClick: this.handleEdit
      });
      const cancelButtonElementLayout = (0, import_react19.cloneElement)(cancelButtonElement, {
        onClick: this.handleCancelEdit
      });
      const textareaElementLayout = (0, import_react19.cloneElement)(textareaElement, {
        ref: this.refInput,
        defaultValue: originalValue
      });
      result = /* @__PURE__ */ import_react19.default.createElement("span", {
        className: "rejt-edit-form",
        style: style.editForm
      }, textareaElementLayout, " ", cancelButtonElementLayout, editButtonElementLayout);
      minusElement = null;
    } else {
      result = /* @__PURE__ */ import_react19.default.createElement("span", {
        className: "rejt-value",
        style: style.value,
        onClick: resultOnlyResult ? null : this.handleEditMode
      }, value2);
      const minusMenuLayout = (0, import_react19.cloneElement)(minusMenuElement, {
        onClick: handleRemove,
        className: "rejt-minus-menu",
        style: style.minus
      });
      minusElement = resultOnlyResult ? null : minusMenuLayout;
    }
    return /* @__PURE__ */ import_react19.default.createElement("li", {
      className: "rejt-function-value-node",
      style: style.li
    }, /* @__PURE__ */ import_react19.default.createElement("span", {
      className: "rejt-name",
      style: style.name
    }, name, " :", " "), result, minusElement);
  }
};
JsonFunctionValue.defaultProps = {
  keyPath: [],
  deep: 0,
  handleUpdateValue: () => {
  },
  editButtonElement: /* @__PURE__ */ import_react19.default.createElement("button", null, "e"),
  cancelButtonElement: /* @__PURE__ */ import_react19.default.createElement("button", null, "c"),
  minusMenuElement: /* @__PURE__ */ import_react19.default.createElement("span", null, " - ")
};
var JsonNode = class extends import_react19.Component {
  constructor(props) {
    super(props);
    this.state = {
      data: props.data,
      name: props.name,
      keyPath: props.keyPath,
      deep: props.deep
    };
  }
  static getDerivedStateFromProps(props, state) {
    return props.data !== state.data ? { data: props.data } : null;
  }
  render() {
    const { data, name, keyPath, deep } = this.state;
    const {
      isCollapsed,
      handleRemove,
      handleUpdateValue,
      onUpdate,
      onDeltaUpdate,
      readOnly,
      getStyle,
      addButtonElement,
      cancelButtonElement,
      editButtonElement,
      inputElementGenerator,
      textareaElementGenerator,
      minusMenuElement,
      plusMenuElement,
      beforeRemoveAction,
      beforeAddAction,
      beforeUpdateAction,
      logger: logger4,
      onSubmitValueParser
    } = this.props;
    const readOnlyTrue = () => true;
    const dataType = getObjectType(data);
    switch (dataType) {
      case ERROR:
        return /* @__PURE__ */ import_react19.default.createElement(JsonObject, {
          data,
          name,
          isCollapsed,
          keyPath,
          deep,
          handleRemove,
          onUpdate,
          onDeltaUpdate,
          readOnly: readOnlyTrue,
          dataType,
          getStyle,
          addButtonElement,
          cancelButtonElement,
          editButtonElement,
          inputElementGenerator,
          textareaElementGenerator,
          minusMenuElement,
          plusMenuElement,
          beforeRemoveAction,
          beforeAddAction,
          beforeUpdateAction,
          logger: logger4,
          onSubmitValueParser
        });
      case OBJECT:
        return /* @__PURE__ */ import_react19.default.createElement(JsonObject, {
          data,
          name,
          isCollapsed,
          keyPath,
          deep,
          handleRemove,
          onUpdate,
          onDeltaUpdate,
          readOnly,
          dataType,
          getStyle,
          addButtonElement,
          cancelButtonElement,
          editButtonElement,
          inputElementGenerator,
          textareaElementGenerator,
          minusMenuElement,
          plusMenuElement,
          beforeRemoveAction,
          beforeAddAction,
          beforeUpdateAction,
          logger: logger4,
          onSubmitValueParser
        });
      case ARRAY:
        return /* @__PURE__ */ import_react19.default.createElement(JsonArray, {
          data,
          name,
          isCollapsed,
          keyPath,
          deep,
          handleRemove,
          onUpdate,
          onDeltaUpdate,
          readOnly,
          dataType,
          getStyle,
          addButtonElement,
          cancelButtonElement,
          editButtonElement,
          inputElementGenerator,
          textareaElementGenerator,
          minusMenuElement,
          plusMenuElement,
          beforeRemoveAction,
          beforeAddAction,
          beforeUpdateAction,
          logger: logger4,
          onSubmitValueParser
        });
      case STRING:
        return /* @__PURE__ */ import_react19.default.createElement(JsonValue, {
          name,
          value: `"${data}"`,
          originalValue: data,
          keyPath,
          deep,
          handleRemove,
          handleUpdateValue,
          readOnly,
          dataType,
          getStyle,
          cancelButtonElement,
          editButtonElement,
          inputElementGenerator,
          minusMenuElement,
          logger: logger4,
          onSubmitValueParser
        });
      case NUMBER:
        return /* @__PURE__ */ import_react19.default.createElement(JsonValue, {
          name,
          value: data,
          originalValue: data,
          keyPath,
          deep,
          handleRemove,
          handleUpdateValue,
          readOnly,
          dataType,
          getStyle,
          cancelButtonElement,
          editButtonElement,
          inputElementGenerator,
          minusMenuElement,
          logger: logger4,
          onSubmitValueParser
        });
      case BOOLEAN:
        return /* @__PURE__ */ import_react19.default.createElement(JsonValue, {
          name,
          value: data ? "true" : "false",
          originalValue: data,
          keyPath,
          deep,
          handleRemove,
          handleUpdateValue,
          readOnly,
          dataType,
          getStyle,
          cancelButtonElement,
          editButtonElement,
          inputElementGenerator,
          minusMenuElement,
          logger: logger4,
          onSubmitValueParser
        });
      case DATE:
        return /* @__PURE__ */ import_react19.default.createElement(JsonValue, {
          name,
          value: data.toISOString(),
          originalValue: data,
          keyPath,
          deep,
          handleRemove,
          handleUpdateValue,
          readOnly: readOnlyTrue,
          dataType,
          getStyle,
          cancelButtonElement,
          editButtonElement,
          inputElementGenerator,
          minusMenuElement,
          logger: logger4,
          onSubmitValueParser
        });
      case NULL:
        return /* @__PURE__ */ import_react19.default.createElement(JsonValue, {
          name,
          value: "null",
          originalValue: "null",
          keyPath,
          deep,
          handleRemove,
          handleUpdateValue,
          readOnly,
          dataType,
          getStyle,
          cancelButtonElement,
          editButtonElement,
          inputElementGenerator,
          minusMenuElement,
          logger: logger4,
          onSubmitValueParser
        });
      case UNDEFINED:
        return /* @__PURE__ */ import_react19.default.createElement(JsonValue, {
          name,
          value: "undefined",
          originalValue: "undefined",
          keyPath,
          deep,
          handleRemove,
          handleUpdateValue,
          readOnly,
          dataType,
          getStyle,
          cancelButtonElement,
          editButtonElement,
          inputElementGenerator,
          minusMenuElement,
          logger: logger4,
          onSubmitValueParser
        });
      case FUNCTION:
        return /* @__PURE__ */ import_react19.default.createElement(JsonFunctionValue, {
          name,
          value: data.toString(),
          originalValue: data,
          keyPath,
          deep,
          handleRemove,
          handleUpdateValue,
          readOnly,
          dataType,
          getStyle,
          cancelButtonElement,
          editButtonElement,
          textareaElementGenerator,
          minusMenuElement,
          logger: logger4,
          onSubmitValueParser
        });
      case SYMBOL:
        return /* @__PURE__ */ import_react19.default.createElement(JsonValue, {
          name,
          value: data.toString(),
          originalValue: data,
          keyPath,
          deep,
          handleRemove,
          handleUpdateValue,
          readOnly: readOnlyTrue,
          dataType,
          getStyle,
          cancelButtonElement,
          editButtonElement,
          inputElementGenerator,
          minusMenuElement,
          logger: logger4,
          onSubmitValueParser
        });
      default:
        return null;
    }
  }
};
JsonNode.defaultProps = {
  keyPath: [],
  deep: 0
};
var JsonObject = class extends import_react19.Component {
  constructor(props) {
    super(props);
    const keyPath = props.deep === -1 ? [] : [...props.keyPath, props.name];
    this.state = {
      name: props.name,
      data: props.data,
      keyPath,
      deep: props.deep,
      nextDeep: props.deep + 1,
      collapsed: props.isCollapsed(keyPath, props.deep, props.data),
      addFormVisible: false
    };
    this.handleCollapseMode = this.handleCollapseMode.bind(this);
    this.handleRemoveValue = this.handleRemoveValue.bind(this);
    this.handleAddMode = this.handleAddMode.bind(this);
    this.handleAddValueAdd = this.handleAddValueAdd.bind(this);
    this.handleAddValueCancel = this.handleAddValueCancel.bind(this);
    this.handleEditValue = this.handleEditValue.bind(this);
    this.onChildUpdate = this.onChildUpdate.bind(this);
    this.renderCollapsed = this.renderCollapsed.bind(this);
    this.renderNotCollapsed = this.renderNotCollapsed.bind(this);
  }
  static getDerivedStateFromProps(props, state) {
    return props.data !== state.data ? { data: props.data } : null;
  }
  onChildUpdate(childKey, childData) {
    const { data, keyPath } = this.state;
    data[childKey] = childData;
    this.setState({
      data
    });
    const { onUpdate } = this.props;
    const size = keyPath.length;
    onUpdate(keyPath[size - 1], data);
  }
  handleAddMode() {
    this.setState({
      addFormVisible: true
    });
  }
  handleAddValueCancel() {
    this.setState({
      addFormVisible: false
    });
  }
  handleAddValueAdd({ key, newValue }) {
    const { data, keyPath, nextDeep: deep } = this.state;
    const { beforeAddAction, logger: logger4 } = this.props;
    beforeAddAction(key, keyPath, deep, newValue).then(() => {
      data[key] = newValue;
      this.setState({
        data
      });
      this.handleAddValueCancel();
      const { onUpdate, onDeltaUpdate } = this.props;
      onUpdate(keyPath[keyPath.length - 1], data);
      onDeltaUpdate({
        type: ADD_DELTA_TYPE,
        keyPath,
        deep,
        key,
        newValue
      });
    }).catch(logger4.error);
  }
  handleRemoveValue(key) {
    return () => {
      const { beforeRemoveAction, logger: logger4 } = this.props;
      const { data, keyPath, nextDeep: deep } = this.state;
      const oldValue = data[key];
      beforeRemoveAction(key, keyPath, deep, oldValue).then(() => {
        const deltaUpdateResult = {
          keyPath,
          deep,
          key,
          oldValue,
          type: REMOVE_DELTA_TYPE
        };
        delete data[key];
        this.setState({ data });
        const { onUpdate, onDeltaUpdate } = this.props;
        onUpdate(keyPath[keyPath.length - 1], data);
        onDeltaUpdate(deltaUpdateResult);
      }).catch(logger4.error);
    };
  }
  handleCollapseMode() {
    this.setState((state) => ({
      collapsed: !state.collapsed
    }));
  }
  handleEditValue({ key, value: value2 }) {
    return new Promise((resolve, reject) => {
      const { beforeUpdateAction } = this.props;
      const { data, keyPath, nextDeep: deep } = this.state;
      const oldValue = data[key];
      beforeUpdateAction(key, keyPath, deep, oldValue, value2).then(() => {
        data[key] = value2;
        this.setState({
          data
        });
        const { onUpdate, onDeltaUpdate } = this.props;
        onUpdate(keyPath[keyPath.length - 1], data);
        onDeltaUpdate({
          type: UPDATE_DELTA_TYPE,
          keyPath,
          deep,
          key,
          newValue: value2,
          oldValue
        });
        resolve();
      }).catch(reject);
    });
  }
  renderCollapsed() {
    const { name, keyPath, deep, data } = this.state;
    const { handleRemove, readOnly, dataType, getStyle, minusMenuElement } = this.props;
    const { minus, collapsed } = getStyle(name, data, keyPath, deep, dataType);
    const keyList = Object.getOwnPropertyNames(data);
    const isReadOnly = readOnly(name, data, keyPath, deep, dataType);
    const removeItemButton = (0, import_react19.cloneElement)(minusMenuElement, {
      onClick: handleRemove,
      className: "rejt-minus-menu",
      style: minus
    });
    return /* @__PURE__ */ import_react19.default.createElement("span", {
      className: "rejt-collapsed"
    }, /* @__PURE__ */ import_react19.default.createElement("span", {
      className: "rejt-collapsed-text",
      style: collapsed,
      onClick: this.handleCollapseMode
    }, "{...}", " ", keyList.length, " ", keyList.length === 1 ? "key" : "keys"), !isReadOnly && removeItemButton);
  }
  renderNotCollapsed() {
    const { name, data, keyPath, deep, nextDeep, addFormVisible } = this.state;
    const {
      isCollapsed,
      handleRemove,
      onDeltaUpdate,
      readOnly,
      getStyle,
      dataType,
      addButtonElement,
      cancelButtonElement,
      editButtonElement,
      inputElementGenerator,
      textareaElementGenerator,
      minusMenuElement,
      plusMenuElement,
      beforeRemoveAction,
      beforeAddAction,
      beforeUpdateAction,
      logger: logger4,
      onSubmitValueParser
    } = this.props;
    const { minus, plus, addForm, ul, delimiter } = getStyle(name, data, keyPath, deep, dataType);
    const keyList = Object.getOwnPropertyNames(data);
    const isReadOnly = readOnly(name, data, keyPath, deep, dataType);
    const addItemButton = (0, import_react19.cloneElement)(plusMenuElement, {
      onClick: this.handleAddMode,
      className: "rejt-plus-menu",
      style: plus
    });
    const removeItemButton = (0, import_react19.cloneElement)(minusMenuElement, {
      onClick: handleRemove,
      className: "rejt-minus-menu",
      style: minus
    });
    const list = keyList.map((key) => /* @__PURE__ */ import_react19.default.createElement(JsonNode, {
      key,
      name: key,
      data: data[key],
      keyPath,
      deep: nextDeep,
      isCollapsed,
      handleRemove: this.handleRemoveValue(key),
      handleUpdateValue: this.handleEditValue,
      onUpdate: this.onChildUpdate,
      onDeltaUpdate,
      readOnly,
      getStyle,
      addButtonElement,
      cancelButtonElement,
      editButtonElement,
      inputElementGenerator,
      textareaElementGenerator,
      minusMenuElement,
      plusMenuElement,
      beforeRemoveAction,
      beforeAddAction,
      beforeUpdateAction,
      logger: logger4,
      onSubmitValueParser
    }));
    const startObject = "{";
    const endObject = "}";
    return /* @__PURE__ */ import_react19.default.createElement("span", {
      className: "rejt-not-collapsed"
    }, /* @__PURE__ */ import_react19.default.createElement("span", {
      className: "rejt-not-collapsed-delimiter",
      style: delimiter
    }, startObject), !isReadOnly && addItemButton, /* @__PURE__ */ import_react19.default.createElement("ul", {
      className: "rejt-not-collapsed-list",
      style: ul
    }, list), !isReadOnly && addFormVisible && /* @__PURE__ */ import_react19.default.createElement("div", {
      className: "rejt-add-form",
      style: addForm
    }, /* @__PURE__ */ import_react19.default.createElement(JsonAddValue, {
      handleAdd: this.handleAddValueAdd,
      handleCancel: this.handleAddValueCancel,
      addButtonElement,
      cancelButtonElement,
      inputElementGenerator,
      keyPath,
      deep,
      onSubmitValueParser
    })), /* @__PURE__ */ import_react19.default.createElement("span", {
      className: "rejt-not-collapsed-delimiter",
      style: delimiter
    }, endObject), !isReadOnly && removeItemButton);
  }
  render() {
    const { name, collapsed, data, keyPath, deep } = this.state;
    const { getStyle, dataType } = this.props;
    const value2 = collapsed ? this.renderCollapsed() : this.renderNotCollapsed();
    const style = getStyle(name, data, keyPath, deep, dataType);
    return /* @__PURE__ */ import_react19.default.createElement("div", {
      className: "rejt-object-node"
    }, /* @__PURE__ */ import_react19.default.createElement("span", {
      onClick: this.handleCollapseMode
    }, /* @__PURE__ */ import_react19.default.createElement("span", {
      className: "rejt-name",
      style: style.name
    }, name, " :", " ")), value2);
  }
};
JsonObject.defaultProps = {
  keyPath: [],
  deep: 0,
  minusMenuElement: /* @__PURE__ */ import_react19.default.createElement("span", null, " - "),
  plusMenuElement: /* @__PURE__ */ import_react19.default.createElement("span", null, " + ")
};
var JsonValue = class extends import_react19.Component {
  constructor(props) {
    super(props);
    const keyPath = [...props.keyPath, props.name];
    this.state = {
      value: props.value,
      name: props.name,
      keyPath,
      deep: props.deep,
      editEnabled: false,
      inputRef: null
    };
    this.handleEditMode = this.handleEditMode.bind(this);
    this.refInput = this.refInput.bind(this);
    this.handleCancelEdit = this.handleCancelEdit.bind(this);
    this.handleEdit = this.handleEdit.bind(this);
    this.onKeydown = this.onKeydown.bind(this);
  }
  static getDerivedStateFromProps(props, state) {
    return props.value !== state.value ? { value: props.value } : null;
  }
  componentDidUpdate() {
    const { editEnabled, inputRef, name, value: value2, keyPath, deep } = this.state;
    const { readOnly, dataType } = this.props;
    const isReadOnly = readOnly(name, value2, keyPath, deep, dataType);
    if (editEnabled && !isReadOnly && typeof inputRef.focus === "function") {
      inputRef.focus();
    }
  }
  componentDidMount() {
    document.addEventListener("keydown", this.onKeydown);
  }
  componentWillUnmount() {
    document.removeEventListener("keydown", this.onKeydown);
  }
  onKeydown(event) {
    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey || event.repeat)
      return;
    if (event.code === "Enter" || event.key === "Enter") {
      event.preventDefault();
      this.handleEdit();
    }
    if (event.code === "Escape" || event.key === "Escape") {
      event.preventDefault();
      this.handleCancelEdit();
    }
  }
  handleEdit() {
    const { handleUpdateValue, originalValue, logger: logger4, onSubmitValueParser, keyPath } = this.props;
    const { inputRef, name, deep } = this.state;
    if (!inputRef)
      return;
    const newValue = onSubmitValueParser(true, keyPath, deep, name, inputRef.value);
    const result = {
      value: newValue,
      key: name
    };
    handleUpdateValue(result).then(() => {
      if (!isComponentWillChange(originalValue, newValue)) {
        this.handleCancelEdit();
      }
    }).catch(logger4.error);
  }
  handleEditMode() {
    this.setState({
      editEnabled: true
    });
  }
  refInput(node) {
    this.state.inputRef = node;
  }
  handleCancelEdit() {
    this.setState({
      editEnabled: false
    });
  }
  render() {
    const { name, value: value2, editEnabled, keyPath, deep } = this.state;
    const {
      handleRemove,
      originalValue,
      readOnly,
      dataType,
      getStyle,
      editButtonElement,
      cancelButtonElement,
      inputElementGenerator,
      minusMenuElement,
      keyPath: comeFromKeyPath
    } = this.props;
    const style = getStyle(name, originalValue, keyPath, deep, dataType);
    const isReadOnly = readOnly(name, originalValue, keyPath, deep, dataType);
    const isEditing = editEnabled && !isReadOnly;
    const inputElement = inputElementGenerator(
      VALUE,
      comeFromKeyPath,
      deep,
      name,
      originalValue,
      dataType
    );
    const editButtonElementLayout = (0, import_react19.cloneElement)(editButtonElement, {
      onClick: this.handleEdit
    });
    const cancelButtonElementLayout = (0, import_react19.cloneElement)(cancelButtonElement, {
      onClick: this.handleCancelEdit
    });
    const inputElementLayout = (0, import_react19.cloneElement)(inputElement, {
      ref: this.refInput,
      defaultValue: JSON.stringify(originalValue)
    });
    const minusMenuLayout = (0, import_react19.cloneElement)(minusMenuElement, {
      onClick: handleRemove,
      className: "rejt-minus-menu",
      style: style.minus
    });
    return /* @__PURE__ */ import_react19.default.createElement("li", {
      className: "rejt-value-node",
      style: style.li
    }, /* @__PURE__ */ import_react19.default.createElement("span", {
      className: "rejt-name",
      style: style.name
    }, name, " : "), isEditing ? /* @__PURE__ */ import_react19.default.createElement("span", {
      className: "rejt-edit-form",
      style: style.editForm
    }, inputElementLayout, " ", cancelButtonElementLayout, editButtonElementLayout) : /* @__PURE__ */ import_react19.default.createElement("span", {
      className: "rejt-value",
      style: style.value,
      onClick: isReadOnly ? null : this.handleEditMode
    }, String(value2)), !isReadOnly && !isEditing && minusMenuLayout);
  }
};
JsonValue.defaultProps = {
  keyPath: [],
  deep: 0,
  handleUpdateValue: () => Promise.resolve(),
  editButtonElement: /* @__PURE__ */ import_react19.default.createElement("button", null, "e"),
  cancelButtonElement: /* @__PURE__ */ import_react19.default.createElement("button", null, "c"),
  minusMenuElement: /* @__PURE__ */ import_react19.default.createElement("span", null, " - ")
};

// src/controls/react-editable-json-tree/utils/styles.ts
var object = {
  minus: {
    color: "red"
  },
  plus: {
    color: "green"
  },
  collapsed: {
    color: "grey"
  },
  delimiter: {},
  ul: {
    padding: "0px",
    margin: "0 0 0 25px",
    listStyle: "none"
  },
  name: {
    color: "#2287CD"
  },
  addForm: {}
};
var array = {
  minus: {
    color: "red"
  },
  plus: {
    color: "green"
  },
  collapsed: {
    color: "grey"
  },
  delimiter: {},
  ul: {
    padding: "0px",
    margin: "0 0 0 25px",
    listStyle: "none"
  },
  name: {
    color: "#2287CD"
  },
  addForm: {}
};
var value = {
  minus: {
    color: "red"
  },
  editForm: {},
  value: {
    color: "#7bba3d"
  },
  li: {
    minHeight: "22px",
    lineHeight: "22px",
    outline: "0px"
  },
  name: {
    color: "#2287CD"
  }
};

// src/controls/react-editable-json-tree/utils/parse.ts
function parse3(string) {
  let result = string;
  if (result.indexOf("function") === 0) {
    return (0, eval)(`(${result})`);
  }
  try {
    result = JSON.parse(string);
  } catch (e) {
  }
  return result;
}

// src/controls/react-editable-json-tree/index.tsx
var JsonTree = class extends import_react20.Component {
  constructor(props) {
    super(props);
    this.state = {
      data: props.data,
      rootName: props.rootName
    };
    this.onUpdate = this.onUpdate.bind(this);
    this.removeRoot = this.removeRoot.bind(this);
  }
  static getDerivedStateFromProps(props, state) {
    if (props.data !== state.data || props.rootName !== state.rootName) {
      return {
        data: props.data,
        rootName: props.rootName
      };
    }
    return null;
  }
  onUpdate(key, data) {
    this.setState({ data });
    this.props.onFullyUpdate(data);
  }
  removeRoot() {
    this.onUpdate(null, null);
  }
  render() {
    const { data, rootName } = this.state;
    const {
      isCollapsed,
      onDeltaUpdate,
      readOnly,
      getStyle,
      addButtonElement,
      cancelButtonElement,
      editButtonElement,
      inputElement,
      textareaElement,
      minusMenuElement,
      plusMenuElement,
      beforeRemoveAction,
      beforeAddAction,
      beforeUpdateAction,
      logger: logger4,
      onSubmitValueParser,
      fallback = null
    } = this.props;
    const dataType = getObjectType(data);
    let readOnlyFunction = readOnly;
    if (getObjectType(readOnly) === "Boolean") {
      readOnlyFunction = () => readOnly;
    }
    let inputElementFunction = inputElement;
    if (inputElement && getObjectType(inputElement) !== "Function") {
      inputElementFunction = () => inputElement;
    }
    let textareaElementFunction = textareaElement;
    if (textareaElement && getObjectType(textareaElement) !== "Function") {
      textareaElementFunction = () => textareaElement;
    }
    if (dataType === "Object" || dataType === "Array") {
      return /* @__PURE__ */ import_react20.default.createElement("div", {
        className: "rejt-tree"
      }, /* @__PURE__ */ import_react20.default.createElement(JsonNode, {
        data,
        name: rootName,
        deep: -1,
        isCollapsed,
        onUpdate: this.onUpdate,
        onDeltaUpdate,
        readOnly: readOnlyFunction,
        getStyle,
        addButtonElement,
        cancelButtonElement,
        editButtonElement,
        inputElementGenerator: inputElementFunction,
        textareaElementGenerator: textareaElementFunction,
        minusMenuElement,
        plusMenuElement,
        handleRemove: this.removeRoot,
        beforeRemoveAction,
        beforeAddAction,
        beforeUpdateAction,
        logger: logger4,
        onSubmitValueParser
      }));
    }
    return fallback;
  }
};
JsonTree.defaultProps = {
  rootName: "root",
  isCollapsed: (keyPath, deep) => deep !== -1,
  getStyle: (keyName, data, keyPath, deep, dataType) => {
    switch (dataType) {
      case "Object":
      case "Error":
        return object;
      case "Array":
        return array;
      default:
        return value;
    }
  },
  readOnly: () => false,
  onFullyUpdate: () => {
  },
  onDeltaUpdate: () => {
  },
  beforeRemoveAction: () => Promise.resolve(),
  beforeAddAction: () => Promise.resolve(),
  beforeUpdateAction: () => Promise.resolve(),
  logger: { error: () => {
  } },
  onSubmitValueParser: (isEditMode, keyPath, deep, name, rawValue) => parse3(rawValue),
  inputElement: () => /* @__PURE__ */ import_react20.default.createElement("input", null),
  textareaElement: () => /* @__PURE__ */ import_react20.default.createElement("textarea", null),
  fallback: null
};

// src/controls/Object.tsx
init_helpers();
var { window: globalWindow2 } = import_global4.default;
var Wrapper5 = import_theming14.styled.div(({ theme }) => ({
  position: "relative",
  display: "flex",
  ".rejt-tree": {
    marginLeft: "1rem",
    fontSize: "13px"
  },
  ".rejt-value-node, .rejt-object-node > .rejt-collapsed, .rejt-array-node > .rejt-collapsed, .rejt-object-node > .rejt-not-collapsed, .rejt-array-node > .rejt-not-collapsed": {
    "& > svg": {
      opacity: 0,
      transition: "opacity 0.2s"
    }
  },
  ".rejt-value-node:hover, .rejt-object-node:hover > .rejt-collapsed, .rejt-array-node:hover > .rejt-collapsed, .rejt-object-node:hover > .rejt-not-collapsed, .rejt-array-node:hover > .rejt-not-collapsed": {
    "& > svg": {
      opacity: 1
    }
  },
  ".rejt-edit-form button": {
    display: "none"
  },
  ".rejt-add-form": {
    marginLeft: 10
  },
  ".rejt-add-value-node": {
    display: "inline-flex",
    alignItems: "center"
  },
  ".rejt-name": {
    lineHeight: "22px"
  },
  ".rejt-not-collapsed-delimiter": {
    lineHeight: "22px"
  },
  ".rejt-plus-menu": {
    marginLeft: 5
  },
  ".rejt-object-node > span > *": {
    position: "relative",
    zIndex: 2
  },
  ".rejt-object-node, .rejt-array-node": {
    position: "relative"
  },
  ".rejt-object-node > span:first-of-type::after, .rejt-array-node > span:first-of-type::after, .rejt-collapsed::before, .rejt-not-collapsed::before": {
    content: '""',
    position: "absolute",
    top: 0,
    display: "block",
    width: "100%",
    marginLeft: "-1rem",
    padding: "0 4px 0 1rem",
    height: 22
  },
  ".rejt-collapsed::before, .rejt-not-collapsed::before": {
    zIndex: 1,
    background: "transparent",
    borderRadius: 4,
    transition: "background 0.2s",
    pointerEvents: "none",
    opacity: 0.1
  },
  ".rejt-object-node:hover, .rejt-array-node:hover": {
    "& > .rejt-collapsed::before, & > .rejt-not-collapsed::before": {
      background: theme.color.secondary
    }
  },
  ".rejt-collapsed::after, .rejt-not-collapsed::after": {
    content: '""',
    position: "absolute",
    display: "inline-block",
    pointerEvents: "none",
    width: 0,
    height: 0
  },
  ".rejt-collapsed::after": {
    left: -8,
    top: 8,
    borderTop: "3px solid transparent",
    borderBottom: "3px solid transparent",
    borderLeft: "3px solid rgba(153,153,153,0.6)"
  },
  ".rejt-not-collapsed::after": {
    left: -10,
    top: 10,
    borderTop: "3px solid rgba(153,153,153,0.6)",
    borderLeft: "3px solid transparent",
    borderRight: "3px solid transparent"
  },
  ".rejt-value": {
    display: "inline-block",
    border: "1px solid transparent",
    borderRadius: 4,
    margin: "1px 0",
    padding: "0 4px",
    cursor: "text",
    color: theme.color.defaultText
  },
  ".rejt-value-node:hover > .rejt-value": {
    background: theme.background.app,
    borderColor: theme.color.border
  }
}));
var Button = import_theming14.styled.button(({ theme, primary }) => ({
  border: 0,
  height: 20,
  margin: 1,
  borderRadius: 4,
  background: primary ? theme.color.secondary : "transparent",
  color: primary ? theme.color.lightest : theme.color.dark,
  fontWeight: primary ? "bold" : "normal",
  cursor: "pointer",
  order: primary ? "initial" : 9
}));
var ActionIcon = (0, import_theming14.styled)(import_components14.Icons)(({ theme, icon, disabled }) => ({
  display: "inline-block",
  verticalAlign: "middle",
  width: 15,
  height: 15,
  padding: 3,
  marginLeft: 5,
  cursor: disabled ? "not-allowed" : "pointer",
  color: theme.color.mediumdark,
  "&:hover": disabled ? {} : {
    color: icon === "subtract" ? theme.color.negative : theme.color.ancillary
  },
  "svg + &": {
    marginLeft: 0
  }
}));
var Input = import_theming14.styled.input(({ theme, placeholder }) => ({
  outline: 0,
  margin: placeholder ? 1 : "1px 0",
  padding: "3px 4px",
  color: theme.color.defaultText,
  background: theme.background.app,
  border: `1px solid ${theme.color.border}`,
  borderRadius: 4,
  lineHeight: "14px",
  width: placeholder === "Key" ? 80 : 120,
  "&:focus": {
    border: `1px solid ${theme.color.secondary}`
  }
}));
var RawButton = (0, import_theming14.styled)(import_components14.IconButton)(({ theme }) => ({
  position: "absolute",
  zIndex: 2,
  top: 2,
  right: 2,
  height: 21,
  padding: "0 3px",
  background: theme.background.bar,
  border: `1px solid ${theme.color.border}`,
  borderRadius: 3,
  color: theme.color.mediumdark,
  fontSize: "9px",
  fontWeight: "bold",
  textDecoration: "none",
  span: {
    marginLeft: 3,
    marginTop: 1
  }
}));
var RawInput = (0, import_theming14.styled)(import_components14.Form.Textarea)(({ theme }) => ({
  flex: 1,
  padding: "7px 6px",
  fontFamily: theme.typography.fonts.mono,
  fontSize: "12px",
  lineHeight: "18px",
  "&::placeholder": {
    fontFamily: theme.typography.fonts.base,
    fontSize: "13px"
  },
  "&:placeholder-shown": {
    padding: "7px 10px"
  }
}));
var ENTER_EVENT = { bubbles: true, cancelable: true, key: "Enter", code: "Enter", keyCode: 13 };
var dispatchEnterKey = (event) => {
  event.currentTarget.dispatchEvent(new globalWindow2.KeyboardEvent("keydown", ENTER_EVENT));
};
var selectValue = (event) => {
  event.currentTarget.select();
};
var getCustomStyleFunction = (theme) => () => ({
  name: {
    color: theme.color.secondary
  },
  collapsed: {
    color: theme.color.dark
  },
  ul: {
    listStyle: "none",
    margin: "0 0 0 1rem",
    padding: 0
  },
  li: {
    outline: 0
  }
});
var ObjectControl = ({ name, value: value2, onChange }) => {
  const theme = (0, import_theming14.useTheme)();
  const data = (0, import_react21.useMemo)(() => value2 && (0, import_cloneDeep.default)(value2), [value2]);
  const hasData = data !== null && data !== void 0;
  const [showRaw, setShowRaw] = (0, import_react21.useState)(!hasData);
  const [parseError, setParseError] = (0, import_react21.useState)(null);
  const updateRaw = (0, import_react21.useCallback)(
    (raw) => {
      try {
        if (raw)
          onChange(JSON.parse(raw));
        setParseError(void 0);
      } catch (e) {
        setParseError(e);
      }
    },
    [onChange]
  );
  const [forceVisible, setForceVisible] = (0, import_react21.useState)(false);
  const onForceVisible = (0, import_react21.useCallback)(() => {
    onChange({});
    setForceVisible(true);
  }, [setForceVisible]);
  const htmlElRef = (0, import_react21.useRef)(null);
  (0, import_react21.useEffect)(() => {
    if (forceVisible && htmlElRef.current)
      htmlElRef.current.select();
  }, [forceVisible]);
  if (!hasData) {
    return /* @__PURE__ */ import_react21.default.createElement(import_components14.Form.Button, {
      id: getControlSetterButtonId(name),
      onClick: onForceVisible
    }, "Set object");
  }
  const rawJSONForm = /* @__PURE__ */ import_react21.default.createElement(RawInput, {
    ref: htmlElRef,
    id: getControlId(name),
    name,
    defaultValue: value2 === null ? "" : JSON.stringify(value2, null, 2),
    onBlur: (event) => updateRaw(event.target.value),
    placeholder: "Edit JSON string...",
    autoFocus: forceVisible,
    valid: parseError ? "error" : null
  });
  return /* @__PURE__ */ import_react21.default.createElement(Wrapper5, null, ["Object", "Array"].includes(getObjectType(data)) && /* @__PURE__ */ import_react21.default.createElement(RawButton, {
    href: "#",
    onClick: (e) => {
      e.preventDefault();
      setShowRaw((v) => !v);
    }
  }, /* @__PURE__ */ import_react21.default.createElement(import_components14.Icons, {
    icon: showRaw ? "eyeclose" : "eye"
  }), /* @__PURE__ */ import_react21.default.createElement("span", null, "RAW")), !showRaw ? /* @__PURE__ */ import_react21.default.createElement(JsonTree, {
    data,
    rootName: name,
    onFullyUpdate: onChange,
    getStyle: getCustomStyleFunction(theme),
    cancelButtonElement: /* @__PURE__ */ import_react21.default.createElement(Button, {
      type: "button"
    }, "Cancel"),
    editButtonElement: /* @__PURE__ */ import_react21.default.createElement(Button, {
      type: "submit"
    }, "Save"),
    addButtonElement: /* @__PURE__ */ import_react21.default.createElement(Button, {
      type: "submit",
      primary: true
    }, "Save"),
    plusMenuElement: /* @__PURE__ */ import_react21.default.createElement(ActionIcon, {
      icon: "add"
    }),
    minusMenuElement: /* @__PURE__ */ import_react21.default.createElement(ActionIcon, {
      icon: "subtract"
    }),
    inputElement: (_, __, ___, key) => key ? /* @__PURE__ */ import_react21.default.createElement(Input, {
      onFocus: selectValue,
      onBlur: dispatchEnterKey
    }) : /* @__PURE__ */ import_react21.default.createElement(Input, null),
    fallback: rawJSONForm
  }) : rawJSONForm);
};

// src/controls/Range.tsx
var import_react22 = __toESM(require("react"));
var import_theming15 = require("@storybook/theming");
var import_polished5 = require("polished");
init_helpers();
var RangeInput = import_theming15.styled.input(
  ({ theme, min, max, value: value2 }) => ({
    "&": {
      width: "100%",
      backgroundColor: "transparent",
      appearance: "none"
    },
    "&::-webkit-slider-runnable-track": {
      background: theme.base === "light" ? `linear-gradient(to right, 
            ${theme.color.green} 0%, ${theme.color.green} ${(value2 - min) / (max - min) * 100}%, 
            ${(0, import_polished5.darken)(0.02, theme.input.background)} ${(value2 - min) / (max - min) * 100}%, 
            ${(0, import_polished5.darken)(0.02, theme.input.background)} 100%)` : `linear-gradient(to right, 
            ${theme.color.green} 0%, ${theme.color.green} ${(value2 - min) / (max - min) * 100}%, 
            ${(0, import_polished5.lighten)(0.02, theme.input.background)} ${(value2 - min) / (max - min) * 100}%, 
            ${(0, import_polished5.lighten)(0.02, theme.input.background)} 100%)`,
      boxShadow: `${theme.appBorderColor} 0 0 0 1px inset`,
      borderRadius: 6,
      width: "100%",
      height: 6,
      cursor: "pointer"
    },
    "&::-webkit-slider-thumb": {
      marginTop: "-6px",
      width: 16,
      height: 16,
      border: `1px solid ${(0, import_polished5.rgba)(theme.appBorderColor, 0.2)}`,
      borderRadius: "50px",
      boxShadow: `0 1px 3px 0px ${(0, import_polished5.rgba)(theme.appBorderColor, 0.2)}`,
      cursor: "grab",
      appearance: "none",
      background: `${theme.input.background}`,
      transition: "all 150ms ease-out",
      "&:hover": {
        background: `${(0, import_polished5.darken)(0.05, theme.input.background)}`,
        transform: "scale3d(1.1, 1.1, 1.1) translateY(-1px)",
        transition: "all 50ms ease-out"
      },
      "&:active": {
        background: `${theme.input.background}`,
        transform: "scale3d(1, 1, 1) translateY(0px)",
        cursor: "grabbing"
      }
    },
    "&:focus": {
      outline: "none",
      "&::-webkit-slider-runnable-track": {
        borderColor: (0, import_polished5.rgba)(theme.color.secondary, 0.4)
      },
      "&::-webkit-slider-thumb": {
        borderColor: theme.color.secondary,
        boxShadow: `0 0px 5px 0px ${theme.color.secondary}`
      }
    },
    "&::-moz-range-track": {
      background: theme.base === "light" ? `linear-gradient(to right, 
            ${theme.color.green} 0%, ${theme.color.green} ${(value2 - min) / (max - min) * 100}%, 
            ${(0, import_polished5.darken)(0.02, theme.input.background)} ${(value2 - min) / (max - min) * 100}%, 
            ${(0, import_polished5.darken)(0.02, theme.input.background)} 100%)` : `linear-gradient(to right, 
            ${theme.color.green} 0%, ${theme.color.green} ${(value2 - min) / (max - min) * 100}%, 
            ${(0, import_polished5.lighten)(0.02, theme.input.background)} ${(value2 - min) / (max - min) * 100}%, 
            ${(0, import_polished5.lighten)(0.02, theme.input.background)} 100%)`,
      boxShadow: `${theme.appBorderColor} 0 0 0 1px inset`,
      borderRadius: 6,
      width: "100%",
      height: 6,
      cursor: "pointer",
      outline: "none"
    },
    "&::-moz-range-thumb": {
      width: 16,
      height: 16,
      border: `1px solid ${(0, import_polished5.rgba)(theme.color.border, 0.2)}`,
      borderRadius: "50px",
      boxShadow: `0 1px 3px 0px ${(0, import_polished5.rgba)(theme.color.border, 0.2)}`,
      cursor: "grab",
      background: `${theme.input.background}`,
      transition: "all 150ms ease-out",
      "&:hover": {
        background: `${(0, import_polished5.darken)(0.05, theme.input.background)}`,
        transform: "scale3d(1.1, 1.1, 1.1) translateY(-1px)",
        transition: "all 50ms ease-out"
      },
      "&:active": {
        background: `${theme.input.background}`,
        transform: "scale3d(1, 1, 1) translateY(0px)",
        cursor: "grabbing"
      }
    },
    "&::-ms-track": {
      background: theme.base === "light" ? `linear-gradient(to right, 
            ${theme.color.green} 0%, ${theme.color.green} ${(value2 - min) / (max - min) * 100}%, 
            ${(0, import_polished5.darken)(0.02, theme.input.background)} ${(value2 - min) / (max - min) * 100}%, 
            ${(0, import_polished5.darken)(0.02, theme.input.background)} 100%)` : `linear-gradient(to right, 
            ${theme.color.green} 0%, ${theme.color.green} ${(value2 - min) / (max - min) * 100}%, 
            ${(0, import_polished5.lighten)(0.02, theme.input.background)} ${(value2 - min) / (max - min) * 100}%, 
            ${(0, import_polished5.lighten)(0.02, theme.input.background)} 100%)`,
      boxShadow: `${theme.appBorderColor} 0 0 0 1px inset`,
      color: "transparent",
      width: "100%",
      height: "6px",
      cursor: "pointer"
    },
    "&::-ms-fill-lower": {
      borderRadius: 6
    },
    "&::-ms-fill-upper": {
      borderRadius: 6
    },
    "&::-ms-thumb": {
      width: 16,
      height: 16,
      background: `${theme.input.background}`,
      border: `1px solid ${(0, import_polished5.rgba)(theme.appBorderColor, 0.2)}`,
      borderRadius: 50,
      cursor: "grab",
      marginTop: 0
    },
    "@supports (-ms-ime-align:auto)": { "input[type=range]": { margin: "0" } }
  })
);
var RangeLabel = import_theming15.styled.span({
  paddingLeft: 5,
  paddingRight: 5,
  fontSize: 12,
  whiteSpace: "nowrap",
  fontFeatureSettings: "tnum",
  fontVariantNumeric: "tabular-nums"
});
var RangeWrapper = import_theming15.styled.div({
  display: "flex",
  alignItems: "center",
  width: "100%"
});
function getNumberOfDecimalPlaces(number) {
  const match = number.toString().match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
  return !match ? 0 : Math.max(
    0,
    (match[1] ? match[1].length : 0) - (match[2] ? +match[2] : 0)
  );
}
var RangeControl = ({
  name,
  value: value2,
  onChange,
  min = 0,
  max = 100,
  step = 1,
  onBlur,
  onFocus
}) => {
  const handleChange = (event) => {
    onChange(parse2(event.target.value));
  };
  const hasValue = value2 !== void 0;
  const numberOFDecimalsPlaces = (0, import_react22.useMemo)(() => getNumberOfDecimalPlaces(step), [step]);
  return /* @__PURE__ */ import_react22.default.createElement(RangeWrapper, null, /* @__PURE__ */ import_react22.default.createElement(RangeLabel, null, min), /* @__PURE__ */ import_react22.default.createElement(RangeInput, {
    id: getControlId(name),
    type: "range",
    onChange: handleChange,
    ...{ name, value: value2, min, max, step, onFocus, onBlur }
  }), /* @__PURE__ */ import_react22.default.createElement(RangeLabel, null, `${hasValue ? value2.toFixed(numberOFDecimalsPlaces) : "--"}`, " / ", max));
};

// src/controls/Text.tsx
var import_react23 = __toESM(require("react"));
var import_theming16 = require("@storybook/theming");
var import_components15 = require("@storybook/components");
init_helpers();
var Wrapper6 = import_theming16.styled.label({
  display: "flex"
});
var MaxLength = import_theming16.styled.div(({ isMaxed }) => ({
  marginLeft: "0.75rem",
  paddingTop: "0.35rem",
  color: isMaxed ? "red" : void 0
}));
var TextControl = ({
  name,
  value: value2,
  onChange,
  onFocus,
  onBlur,
  maxLength
}) => {
  const handleChange = (event) => {
    onChange(event.target.value);
  };
  const [forceVisible, setForceVisible] = (0, import_react23.useState)(false);
  const onForceVisible = (0, import_react23.useCallback)(() => {
    onChange("");
    setForceVisible(true);
  }, [setForceVisible]);
  if (value2 === void 0) {
    return /* @__PURE__ */ import_react23.default.createElement(import_components15.Form.Button, {
      id: getControlSetterButtonId(name),
      onClick: onForceVisible
    }, "Set string");
  }
  const isValid = typeof value2 === "string";
  return /* @__PURE__ */ import_react23.default.createElement(Wrapper6, null, /* @__PURE__ */ import_react23.default.createElement(import_components15.Form.Textarea, {
    id: getControlId(name),
    maxLength,
    onChange: handleChange,
    size: "flex",
    placeholder: "Edit string...",
    autoFocus: forceVisible,
    valid: isValid ? null : "error",
    ...{ name, value: isValid ? value2 : "", onFocus, onBlur }
  }), maxLength && /* @__PURE__ */ import_react23.default.createElement(MaxLength, {
    isMaxed: (value2 == null ? void 0 : value2.length) === maxLength
  }, (value2 == null ? void 0 : value2.length) ?? 0, " / ", maxLength));
};

// src/controls/Files.tsx
var import_react24 = __toESM(require("react"));
var import_theming17 = require("@storybook/theming");
var import_components16 = require("@storybook/components");
init_helpers();
var FileInput = (0, import_theming17.styled)(import_components16.Form.Input)({
  padding: 10
});
function revokeOldUrls(urls) {
  urls.forEach((url) => {
    if (url.startsWith("blob:")) {
      URL.revokeObjectURL(url);
    }
  });
}
var FilesControl = ({
  onChange,
  name,
  accept = "image/*",
  value: value2
}) => {
  function handleFileChange(e) {
    if (!e.target.files) {
      return;
    }
    const fileUrls = Array.from(e.target.files).map((file) => URL.createObjectURL(file));
    onChange(fileUrls);
    revokeOldUrls(value2);
  }
  return /* @__PURE__ */ import_react24.default.createElement(FileInput, {
    id: getControlId(name),
    type: "file",
    name,
    multiple: true,
    onChange: handleFileChange,
    accept,
    size: "flex"
  });
};

// src/controls/index.tsx
var LazyColorControl = (0, import_react26.lazy)(() => Promise.resolve().then(() => (init_Color(), Color_exports)));
var ColorControl2 = (props) => /* @__PURE__ */ import_react26.default.createElement(import_react26.Suspense, {
  fallback: /* @__PURE__ */ import_react26.default.createElement("div", null)
}, /* @__PURE__ */ import_react26.default.createElement(LazyColorControl, {
  ...props
}));

// src/components/ArgsTable/ArgControl.tsx
var Controls2 = {
  array: ObjectControl,
  object: ObjectControl,
  boolean: BooleanControl,
  color: ColorControl2,
  date: DateControl,
  number: NumberControl,
  check: OptionsControl,
  "inline-check": OptionsControl,
  radio: OptionsControl,
  "inline-radio": OptionsControl,
  select: OptionsControl,
  "multi-select": OptionsControl,
  range: RangeControl,
  text: TextControl,
  file: FilesControl
};
var NoControl = () => /* @__PURE__ */ import_react27.default.createElement(import_react27.default.Fragment, null, "-");
var ArgControl = ({ row, arg, updateArgs }) => {
  const { key, control } = row;
  const [isFocused, setFocused] = (0, import_react27.useState)(false);
  const [boxedValue, setBoxedValue] = (0, import_react27.useState)({ value: arg });
  (0, import_react27.useEffect)(() => {
    if (!isFocused)
      setBoxedValue({ value: arg });
  }, [isFocused, arg]);
  const onChange = (0, import_react27.useCallback)(
    (argVal) => {
      setBoxedValue({ value: argVal });
      updateArgs({ [key]: argVal });
      return argVal;
    },
    [updateArgs, key]
  );
  const onBlur = (0, import_react27.useCallback)(() => setFocused(false), []);
  const onFocus = (0, import_react27.useCallback)(() => setFocused(true), []);
  if (!control || control.disable)
    return /* @__PURE__ */ import_react27.default.createElement(NoControl, null);
  const props = { name: key, argType: row, value: boxedValue.value, onChange, onBlur, onFocus };
  const Control = Controls2[control.type] || NoControl;
  return /* @__PURE__ */ import_react27.default.createElement(Control, {
    ...props,
    ...control,
    controlType: control.type
  });
};

// src/components/ArgsTable/ArgRow.tsx
var Name = import_theming19.styled.span({ fontWeight: "bold" });
var Required = import_theming19.styled.span(({ theme }) => ({
  color: theme.color.negative,
  fontFamily: theme.typography.fonts.mono,
  cursor: "help"
}));
var Description2 = import_theming19.styled.div(({ theme }) => ({
  "&&": {
    p: {
      margin: "0 0 10px 0"
    },
    a: {
      color: theme.color.secondary
    }
  },
  code: {
    ...(0, import_components18.codeCommon)({ theme }),
    fontSize: 12,
    fontFamily: theme.typography.fonts.mono
  },
  "& code": {
    margin: 0,
    display: "inline-block"
  },
  "& pre > code": {
    whiteSpace: "pre-wrap"
  }
}));
var Type = import_theming19.styled.div(({ theme, hasDescription }) => ({
  color: theme.base === "light" ? (0, import_polished6.transparentize)(0.1, theme.color.defaultText) : (0, import_polished6.transparentize)(0.2, theme.color.defaultText),
  marginTop: hasDescription ? 4 : 0
}));
var TypeWithJsDoc = import_theming19.styled.div(({ theme, hasDescription }) => ({
  color: theme.base === "light" ? (0, import_polished6.transparentize)(0.1, theme.color.defaultText) : (0, import_polished6.transparentize)(0.2, theme.color.defaultText),
  marginTop: hasDescription ? 12 : 0,
  marginBottom: 12
}));
var StyledTd = import_theming19.styled.td(({ theme, expandable }) => ({
  paddingLeft: expandable ? "40px !important" : "20px !important"
}));
var ArgRow = (props) => {
  var _a;
  const { row, updateArgs, compact, expandable, initialExpandedArgs } = props;
  const { name, description } = row;
  const table = row.table || {};
  const type = table.type || row.type;
  const defaultValue = table.defaultValue || row.defaultValue;
  const required = (_a = row.type) == null ? void 0 : _a.required;
  const hasDescription = description != null && description !== "";
  return /* @__PURE__ */ import_react28.default.createElement("tr", null, /* @__PURE__ */ import_react28.default.createElement(StyledTd, {
    expandable
  }, /* @__PURE__ */ import_react28.default.createElement(Name, null, name), required ? /* @__PURE__ */ import_react28.default.createElement(Required, {
    title: "Required"
  }, "*") : null), compact ? null : /* @__PURE__ */ import_react28.default.createElement("td", null, hasDescription && /* @__PURE__ */ import_react28.default.createElement(Description2, null, /* @__PURE__ */ import_react28.default.createElement(import_markdown_to_jsx2.default, null, description)), table.jsDocTags != null ? /* @__PURE__ */ import_react28.default.createElement(import_react28.default.Fragment, null, /* @__PURE__ */ import_react28.default.createElement(TypeWithJsDoc, {
    hasDescription
  }, /* @__PURE__ */ import_react28.default.createElement(ArgValue, {
    value: type,
    initialExpandedArgs
  })), /* @__PURE__ */ import_react28.default.createElement(ArgJsDoc, {
    tags: table.jsDocTags
  })) : /* @__PURE__ */ import_react28.default.createElement(Type, {
    hasDescription
  }, /* @__PURE__ */ import_react28.default.createElement(ArgValue, {
    value: type,
    initialExpandedArgs
  }))), compact ? null : /* @__PURE__ */ import_react28.default.createElement("td", null, /* @__PURE__ */ import_react28.default.createElement(ArgValue, {
    value: defaultValue,
    initialExpandedArgs
  })), updateArgs ? /* @__PURE__ */ import_react28.default.createElement("td", null, /* @__PURE__ */ import_react28.default.createElement(ArgControl, {
    ...props
  })) : null);
};

// src/components/ArgsTable/SectionRow.tsx
var import_react29 = __toESM(require("react"));
var import_polished7 = require("polished");
var import_theming20 = require("@storybook/theming");
var import_components19 = require("@storybook/components");
var ExpanderIcon = (0, import_theming20.styled)(import_components19.Icons)(({ theme }) => ({
  marginRight: 8,
  marginLeft: -10,
  marginTop: -2,
  height: 12,
  width: 12,
  color: theme.base === "light" ? (0, import_polished7.transparentize)(0.25, theme.color.defaultText) : (0, import_polished7.transparentize)(0.3, theme.color.defaultText),
  border: "none",
  display: "inline-block"
}));
var FlexWrapper = import_theming20.styled.span(({ theme }) => ({
  display: "flex",
  lineHeight: "20px",
  alignItems: "center"
}));
var Section = import_theming20.styled.td(({ theme }) => ({
  position: "relative",
  letterSpacing: "0.35em",
  textTransform: "uppercase",
  fontWeight: theme.typography.weight.black,
  fontSize: theme.typography.size.s1 - 1,
  color: theme.base === "light" ? (0, import_polished7.transparentize)(0.4, theme.color.defaultText) : (0, import_polished7.transparentize)(0.6, theme.color.defaultText),
  background: `${theme.background.app} !important`,
  "& ~ td": {
    background: `${theme.background.app} !important`
  }
}));
var Subsection = import_theming20.styled.td(({ theme }) => ({
  position: "relative",
  fontWeight: theme.typography.weight.bold,
  fontSize: theme.typography.size.s2 - 1,
  background: theme.background.content
}));
var StyledTd2 = import_theming20.styled.td(({ theme }) => ({
  position: "relative"
}));
var StyledTr = import_theming20.styled.tr(({ theme }) => ({
  "&:hover > td": {
    backgroundColor: `${theme.background.hoverable} !important`,
    boxShadow: `${theme.color.mediumlight} 0 - 1px 0 0 inset`,
    cursor: "row-resize"
  }
}));
var ClickIntercept = import_theming20.styled.button(() => ({
  background: "none",
  border: "none",
  padding: "0",
  font: "inherit",
  position: "absolute",
  top: 0,
  bottom: 0,
  left: 0,
  right: 0,
  height: "100%",
  width: "100%",
  color: "transparent",
  cursor: "row-resize !important"
}));
var SectionRow = ({
  level = "section",
  label,
  children,
  initialExpanded = true,
  colSpan = 3
}) => {
  const [expanded, setExpanded] = (0, import_react29.useState)(initialExpanded);
  const Level = level === "subsection" ? Subsection : Section;
  const itemCount = (children == null ? void 0 : children.length) || 0;
  const caption = level === "subsection" ? `${itemCount} item${itemCount !== 1 ? "s" : ""}` : "";
  const icon = expanded ? "arrowdown" : "arrowright";
  const helperText = `${expanded ? "Hide" : "Show"} ${level === "subsection" ? itemCount : label} item${itemCount !== 1 ? "s" : ""}`;
  return /* @__PURE__ */ import_react29.default.createElement(import_react29.default.Fragment, null, /* @__PURE__ */ import_react29.default.createElement(StyledTr, {
    title: helperText
  }, /* @__PURE__ */ import_react29.default.createElement(Level, {
    colSpan: 1
  }, /* @__PURE__ */ import_react29.default.createElement(ClickIntercept, {
    onClick: (e) => setExpanded(!expanded),
    tabIndex: 0
  }, helperText), /* @__PURE__ */ import_react29.default.createElement(FlexWrapper, null, /* @__PURE__ */ import_react29.default.createElement(ExpanderIcon, {
    icon
  }), label)), /* @__PURE__ */ import_react29.default.createElement(StyledTd2, {
    colSpan: colSpan - 1
  }, /* @__PURE__ */ import_react29.default.createElement(ClickIntercept, {
    onClick: (e) => setExpanded(!expanded),
    tabIndex: -1,
    style: { outline: "none" }
  }, helperText), expanded ? null : caption)), expanded ? children : null);
};

// src/components/ArgsTable/ArgsTable.tsx
var TableWrapper = import_theming21.styled.table(
  ({ theme, compact, inAddonPanel }) => ({
    "&&": {
      borderCollapse: "collapse",
      borderSpacing: 0,
      color: theme.color.defaultText,
      "td, th": {
        padding: 0,
        border: "none",
        verticalAlign: "top",
        textOverflow: "ellipsis"
      },
      fontSize: theme.typography.size.s2 - 1,
      lineHeight: "20px",
      textAlign: "left",
      width: "100%",
      marginTop: inAddonPanel ? 0 : 25,
      marginBottom: inAddonPanel ? 0 : 40,
      "thead th:first-of-type, td:first-of-type": {
        width: "25%"
      },
      "th:first-of-type, td:first-of-type": {
        paddingLeft: 20
      },
      "th:nth-of-type(2), td:nth-of-type(2)": {
        ...compact ? null : {
          width: "35%"
        }
      },
      "td:nth-of-type(3)": {
        ...compact ? null : {
          width: "15%"
        }
      },
      "th:last-of-type, td:last-of-type": {
        paddingRight: 20,
        ...compact ? null : {
          width: "25%"
        }
      },
      th: {
        color: theme.base === "light" ? (0, import_polished8.transparentize)(0.25, theme.color.defaultText) : (0, import_polished8.transparentize)(0.45, theme.color.defaultText),
        paddingTop: 10,
        paddingBottom: 10,
        paddingLeft: 15,
        paddingRight: 15
      },
      td: {
        paddingTop: "10px",
        paddingBottom: "10px",
        "&:not(:first-of-type)": {
          paddingLeft: 15,
          paddingRight: 15
        },
        "&:last-of-type": {
          paddingRight: 20
        }
      },
      marginLeft: inAddonPanel ? 0 : 1,
      marginRight: inAddonPanel ? 0 : 1,
      [`tr:first-child`]: {
        [`td:first-child, th:first-child`]: {
          borderTopLeftRadius: inAddonPanel ? 0 : theme.appBorderRadius
        },
        [`td:last-child, th:last-child`]: {
          borderTopRightRadius: inAddonPanel ? 0 : theme.appBorderRadius
        }
      },
      [`tr:last-child`]: {
        [`td:first-child, th:first-child`]: {
          borderBottomLeftRadius: inAddonPanel ? 0 : theme.appBorderRadius
        },
        [`td:last-child, th:last-child`]: {
          borderBottomRightRadius: inAddonPanel ? 0 : theme.appBorderRadius
        }
      },
      tbody: {
        boxShadow: !inAddonPanel && (theme.base === "light" ? `rgba(0, 0, 0, 0.10) 0 1px 3px 1px,
          ${(0, import_polished8.transparentize)(0.035, theme.appBorderColor)} 0 0 0 1px` : `rgba(0, 0, 0, 0.20) 0 2px 5px 1px,
          ${(0, import_polished8.opacify)(0.05, theme.appBorderColor)} 0 0 0 1px`),
        borderRadius: theme.appBorderRadius,
        "@media not all and (min-resolution:.001dpcm)": {
          "@supports (-webkit-appearance:none)": {
            borderWidth: 1,
            borderStyle: "solid",
            ...inAddonPanel && {
              borderColor: "transparent"
            },
            ...!inAddonPanel && {
              borderColor: theme.base === "light" ? (0, import_polished8.transparentize)(0.035, theme.appBorderColor) : (0, import_polished8.opacify)(0.05, theme.appBorderColor)
            }
          }
        },
        tr: {
          background: "transparent",
          overflow: "hidden",
          ...inAddonPanel ? {
            borderTopWidth: 1,
            borderTopStyle: "solid",
            borderTopColor: theme.base === "light" ? (0, import_polished8.darken)(0.1, theme.background.content) : (0, import_polished8.lighten)(0.05, theme.background.content)
          } : {
            [`&:not(:first-child)`]: {
              borderTopWidth: 1,
              borderTopStyle: "solid",
              borderTopColor: theme.base === "light" ? (0, import_polished8.darken)(0.1, theme.background.content) : (0, import_polished8.lighten)(0.05, theme.background.content)
            }
          }
        },
        td: {
          background: theme.background.content
        }
      }
    }
  }),
  ({ isLoading, theme }) => isLoading ? {
    "th span, td span, td button": {
      display: "inline",
      backgroundColor: theme.appBorderColor,
      animation: `${theme.animation.glow} 1.5s ease-in-out infinite`,
      color: "transparent",
      boxShadow: "none",
      borderRadius: 0
    }
  } : {}
);
var StyledIconButton = (0, import_theming21.styled)(import_components20.IconButton)(({ theme }) => ({
  color: theme.barTextColor,
  margin: "-4px -12px -4px 0"
}));
var ControlHeadingWrapper = import_theming21.styled.span({
  display: "flex",
  justifyContent: "space-between"
});
var sortFns = {
  alpha: (a, b) => a.name.localeCompare(b.name),
  requiredFirst: (a, b) => {
    var _a, _b;
    return Number(!!((_a = b.type) == null ? void 0 : _a.required)) - Number(!!((_b = a.type) == null ? void 0 : _b.required)) || a.name.localeCompare(b.name);
  },
  none: void 0
};
var rowLoadingData = (key) => ({
  key,
  name: "propertyName",
  description: "This is a short description",
  control: { type: "text" },
  table: {
    type: { summary: "summary" },
    defaultValue: { summary: "defaultValue" }
  }
});
var argsTableLoadingData = {
  rows: {
    row1: rowLoadingData("row1"),
    row2: rowLoadingData("row2"),
    row3: rowLoadingData("row3")
  }
};
var groupRows = (rows, sort) => {
  const sections = { ungrouped: [], ungroupedSubsections: {}, sections: {} };
  if (!rows)
    return sections;
  Object.entries(rows).forEach(([key, row]) => {
    const { category, subcategory } = (row == null ? void 0 : row.table) || {};
    if (category) {
      const section = sections.sections[category] || { ungrouped: [], subsections: {} };
      if (!subcategory) {
        section.ungrouped.push({ key, ...row });
      } else {
        const subsection = section.subsections[subcategory] || [];
        subsection.push({ key, ...row });
        section.subsections[subcategory] = subsection;
      }
      sections.sections[category] = section;
    } else if (subcategory) {
      const subsection = sections.ungroupedSubsections[subcategory] || [];
      subsection.push({ key, ...row });
      sections.ungroupedSubsections[subcategory] = subsection;
    } else {
      sections.ungrouped.push({ key, ...row });
    }
  });
  const sortFn = sortFns[sort];
  const sortSubsection = (record) => {
    if (!sortFn)
      return record;
    return Object.keys(record).reduce(
      (acc, cur) => ({
        ...acc,
        [cur]: record[cur].sort(sortFn)
      }),
      {}
    );
  };
  const sorted = {
    ungrouped: sections.ungrouped.sort(sortFn),
    ungroupedSubsections: sortSubsection(sections.ungroupedSubsections),
    sections: Object.keys(sections.sections).reduce(
      (acc, cur) => ({
        ...acc,
        [cur]: {
          ungrouped: sections.sections[cur].ungrouped.sort(sortFn),
          subsections: sortSubsection(sections.sections[cur].subsections)
        }
      }),
      {}
    )
  };
  return sorted;
};
var safeIncludeConditionalArg = (row, args, globals) => {
  try {
    return (0, import_csf.includeConditionalArg)(row, args, globals);
  } catch (err) {
    import_client_logger5.once.warn(err.message);
    return false;
  }
};
var ArgsTable = (props) => {
  if ("error" in props) {
    return /* @__PURE__ */ import_react30.default.createElement(EmptyBlock, null, props.error, "\xA0", /* @__PURE__ */ import_react30.default.createElement(import_components20.Link, {
      href: "http://storybook.js.org/docs/",
      target: "_blank",
      withArrow: true
    }, "Read the docs"));
  }
  const {
    updateArgs,
    resetArgs,
    compact,
    inAddonPanel,
    initialExpandedArgs,
    sort = "none"
  } = props;
  const isLoading = "isLoading" in props;
  const { rows, args, globals } = "rows" in props ? props : argsTableLoadingData;
  const groups = groupRows(
    (0, import_pickBy.default)(
      rows,
      (row) => {
        var _a;
        return !((_a = row == null ? void 0 : row.table) == null ? void 0 : _a.disable) && safeIncludeConditionalArg(row, args || {}, globals || {});
      }
    ),
    sort
  );
  if (groups.ungrouped.length === 0 && Object.entries(groups.sections).length === 0 && Object.entries(groups.ungroupedSubsections).length === 0) {
    return /* @__PURE__ */ import_react30.default.createElement(EmptyBlock, null, "No inputs found for this component.\xA0", /* @__PURE__ */ import_react30.default.createElement(import_components20.Link, {
      href: "http://storybook.js.org/docs/",
      target: "_blank",
      withArrow: true
    }, "Read the docs"));
  }
  let colSpan = 1;
  if (updateArgs)
    colSpan += 1;
  if (!compact)
    colSpan += 2;
  const expandable = Object.keys(groups.sections).length > 0;
  const common = { updateArgs, compact, inAddonPanel, initialExpandedArgs };
  return /* @__PURE__ */ import_react30.default.createElement(import_components20.ResetWrapper, null, /* @__PURE__ */ import_react30.default.createElement(TableWrapper, {
    "aria-hidden": isLoading,
    ...{ compact, inAddonPanel, isLoading },
    className: "docblock-argstable"
  }, /* @__PURE__ */ import_react30.default.createElement("thead", {
    className: "docblock-argstable-head"
  }, /* @__PURE__ */ import_react30.default.createElement("tr", null, /* @__PURE__ */ import_react30.default.createElement("th", null, /* @__PURE__ */ import_react30.default.createElement("span", null, "Name")), compact ? null : /* @__PURE__ */ import_react30.default.createElement("th", null, /* @__PURE__ */ import_react30.default.createElement("span", null, "Description")), compact ? null : /* @__PURE__ */ import_react30.default.createElement("th", null, /* @__PURE__ */ import_react30.default.createElement("span", null, "Default")), updateArgs ? /* @__PURE__ */ import_react30.default.createElement("th", null, /* @__PURE__ */ import_react30.default.createElement(ControlHeadingWrapper, null, "Control", " ", !isLoading && resetArgs && /* @__PURE__ */ import_react30.default.createElement(StyledIconButton, {
    onClick: () => resetArgs(),
    title: "Reset controls"
  }, /* @__PURE__ */ import_react30.default.createElement(import_components20.Icons, {
    icon: "undo",
    "aria-hidden": true
  })))) : null)), /* @__PURE__ */ import_react30.default.createElement("tbody", {
    className: "docblock-argstable-body"
  }, groups.ungrouped.map((row) => /* @__PURE__ */ import_react30.default.createElement(ArgRow, {
    key: row.key,
    row,
    arg: args && args[row.key],
    ...common
  })), Object.entries(groups.ungroupedSubsections).map(([subcategory, subsection]) => /* @__PURE__ */ import_react30.default.createElement(SectionRow, {
    key: subcategory,
    label: subcategory,
    level: "subsection",
    colSpan
  }, subsection.map((row) => /* @__PURE__ */ import_react30.default.createElement(ArgRow, {
    key: row.key,
    row,
    arg: args && args[row.key],
    expandable,
    ...common
  })))), Object.entries(groups.sections).map(([category, section]) => /* @__PURE__ */ import_react30.default.createElement(SectionRow, {
    key: category,
    label: category,
    level: "section",
    colSpan
  }, section.ungrouped.map((row) => /* @__PURE__ */ import_react30.default.createElement(ArgRow, {
    key: row.key,
    row,
    arg: args && args[row.key],
    ...common
  })), Object.entries(section.subsections).map(([subcategory, subsection]) => /* @__PURE__ */ import_react30.default.createElement(SectionRow, {
    key: subcategory,
    label: subcategory,
    level: "subsection",
    colSpan
  }, subsection.map((row) => /* @__PURE__ */ import_react30.default.createElement(ArgRow, {
    key: row.key,
    row,
    arg: args && args[row.key],
    expandable,
    ...common
  })))))))));
};

// src/components/ArgsTable/TabbedArgsTable.tsx
var import_react31 = __toESM(require("react"));
var import_components21 = require("@storybook/components");
var TabbedArgsTable = ({ tabs, ...props }) => {
  const entries = Object.entries(tabs);
  if (entries.length === 1) {
    return /* @__PURE__ */ import_react31.default.createElement(ArgsTable, {
      ...entries[0][1],
      ...props
    });
  }
  return /* @__PURE__ */ import_react31.default.createElement(import_components21.TabsState, null, entries.map((entry) => {
    const [label, table] = entry;
    const id2 = `prop_table_div_${label}`;
    const Component6 = "div";
    return /* @__PURE__ */ import_react31.default.createElement(Component6, {
      key: id2,
      id: id2,
      title: label
    }, ({ active }) => active ? /* @__PURE__ */ import_react31.default.createElement(ArgsTable, {
      key: `prop_table_${label}`,
      ...table,
      ...props
    }) : null);
  }));
};

// src/components/ArgsTable/NoControlsWarning.tsx
var import_react32 = __toESM(require("react"));
var import_theming22 = require("@storybook/theming");
var import_components22 = require("@storybook/components");
var NoControlsWrapper = import_theming22.styled.div(({ theme }) => ({
  background: theme.background.warning,
  color: theme.color.darkest,
  padding: "10px 15px",
  lineHeight: "20px",
  boxShadow: `${theme.appBorderColor} 0 -1px 0 0 inset`
}));
var NoControlsWarning = () => /* @__PURE__ */ import_react32.default.createElement(NoControlsWrapper, null, "This story is not configured to handle controls.", " ", /* @__PURE__ */ import_react32.default.createElement(import_components22.Link, {
  href: "https://storybook.js.org/docs/react/essentials/controls",
  target: "_blank",
  cancel: false,
  withArrow: true
}, "Learn how to add controls"));

// src/components/Typeset.tsx
var import_react33 = __toESM(require("react"));
var import_polished9 = require("polished");
var import_theming23 = require("@storybook/theming");
var import_components23 = require("@storybook/components");
var Label4 = import_theming23.styled.div(({ theme }) => ({
  marginRight: 30,
  fontSize: `${theme.typography.size.s1}px`,
  color: theme.base === "light" ? (0, import_polished9.transparentize)(0.4, theme.color.defaultText) : (0, import_polished9.transparentize)(0.6, theme.color.defaultText)
}));
var Sample = import_theming23.styled.div({
  overflow: "hidden",
  whiteSpace: "nowrap",
  textOverflow: "ellipsis"
});
var TypeSpecimen = import_theming23.styled.div({
  display: "flex",
  flexDirection: "row",
  alignItems: "baseline",
  "&:not(:last-child)": { marginBottom: "1rem" }
});
var Wrapper8 = import_theming23.styled.div(import_components23.withReset, ({ theme }) => ({
  ...getBlockBackgroundStyle(theme),
  margin: "25px 0 40px",
  padding: "30px 20px"
}));
var Typeset = ({
  fontFamily,
  fontSizes,
  fontWeight,
  sampleText,
  ...props
}) => /* @__PURE__ */ import_react33.default.createElement(Wrapper8, {
  ...props,
  className: "docblock-typeset"
}, fontSizes.map((size) => /* @__PURE__ */ import_react33.default.createElement(TypeSpecimen, {
  key: size
}, /* @__PURE__ */ import_react33.default.createElement(Label4, null, size), /* @__PURE__ */ import_react33.default.createElement(Sample, {
  style: {
    fontFamily,
    fontSize: size,
    fontWeight,
    lineHeight: 1.2
  }
}, sampleText || "Was he a beast if music could move him so?"))));

// src/components/ColorPalette.tsx
var import_react34 = __toESM(require("react"));
var import_polished10 = require("polished");
var import_theming24 = require("@storybook/theming");
var import_components24 = require("@storybook/components");
var ItemTitle = import_theming24.styled.div(({ theme }) => ({
  fontWeight: theme.typography.weight.bold,
  color: theme.color.defaultText
}));
var ItemSubtitle = import_theming24.styled.div(({ theme }) => ({
  color: theme.base === "light" ? (0, import_polished10.transparentize)(0.2, theme.color.defaultText) : (0, import_polished10.transparentize)(0.6, theme.color.defaultText)
}));
var ItemDescription = import_theming24.styled.div({
  flex: "0 0 30%",
  lineHeight: "20px",
  marginTop: 5
});
var SwatchLabel = import_theming24.styled.div(({ theme }) => ({
  flex: 1,
  textAlign: "center",
  fontFamily: theme.typography.fonts.mono,
  fontSize: theme.typography.size.s1,
  lineHeight: 1,
  overflow: "hidden",
  color: theme.base === "light" ? (0, import_polished10.transparentize)(0.4, theme.color.defaultText) : (0, import_polished10.transparentize)(0.6, theme.color.defaultText),
  "> div": {
    display: "inline-block",
    overflow: "hidden",
    maxWidth: "100%",
    textOverflow: "ellipsis"
  },
  span: {
    display: "block",
    marginTop: 2
  }
}));
var SwatchLabels = import_theming24.styled.div({
  display: "flex",
  flexDirection: "row"
});
var Swatch2 = import_theming24.styled.div(({ background }) => ({
  position: "relative",
  flex: 1,
  "&::before": {
    position: "absolute",
    top: 0,
    left: 0,
    width: "100%",
    height: "100%",
    background,
    content: '""'
  }
}));
var SwatchColors = import_theming24.styled.div(({ theme }) => ({
  ...getBlockBackgroundStyle(theme),
  display: "flex",
  flexDirection: "row",
  height: 50,
  marginBottom: 5,
  overflow: "hidden",
  backgroundColor: "white",
  backgroundImage: `repeating-linear-gradient(-45deg, #ccc, #ccc 1px, #fff 1px, #fff 16px)`,
  backgroundClip: "padding-box"
}));
var SwatchSpecimen = import_theming24.styled.div({
  display: "flex",
  flexDirection: "column",
  flex: 1,
  position: "relative",
  marginBottom: 30
});
var Swatches2 = import_theming24.styled.div({
  flex: 1,
  display: "flex",
  flexDirection: "row"
});
var Item = import_theming24.styled.div({
  display: "flex",
  alignItems: "flex-start"
});
var ListName = import_theming24.styled.div({
  flex: "0 0 30%"
});
var ListSwatches = import_theming24.styled.div({
  flex: 1
});
var ListHeading = import_theming24.styled.div(({ theme }) => ({
  display: "flex",
  flexDirection: "row",
  alignItems: "center",
  paddingBottom: 20,
  fontWeight: theme.typography.weight.bold,
  color: theme.base === "light" ? (0, import_polished10.transparentize)(0.4, theme.color.defaultText) : (0, import_polished10.transparentize)(0.6, theme.color.defaultText)
}));
var List = import_theming24.styled.div(({ theme }) => ({
  fontSize: theme.typography.size.s2,
  lineHeight: `20px`,
  display: "flex",
  flexDirection: "column"
}));
function renderSwatch(color, index) {
  return /* @__PURE__ */ import_react34.default.createElement(Swatch2, {
    key: `${color}-${index}`,
    title: color,
    background: color
  });
}
function renderSwatchLabel(color, index, colorDescription) {
  return /* @__PURE__ */ import_react34.default.createElement(SwatchLabel, {
    key: `${color}-${index}`,
    title: color
  }, /* @__PURE__ */ import_react34.default.createElement("div", null, color, colorDescription && /* @__PURE__ */ import_react34.default.createElement("span", null, colorDescription)));
}
function renderSwatchSpecimen(colors) {
  if (Array.isArray(colors)) {
    return /* @__PURE__ */ import_react34.default.createElement(SwatchSpecimen, null, /* @__PURE__ */ import_react34.default.createElement(SwatchColors, null, colors.map((color, index) => renderSwatch(color, index))), /* @__PURE__ */ import_react34.default.createElement(SwatchLabels, null, colors.map((color, index) => renderSwatchLabel(color, index))));
  }
  return /* @__PURE__ */ import_react34.default.createElement(SwatchSpecimen, null, /* @__PURE__ */ import_react34.default.createElement(SwatchColors, null, Object.values(colors).map((color, index) => renderSwatch(color, index))), /* @__PURE__ */ import_react34.default.createElement(SwatchLabels, null, Object.keys(colors).map((color, index) => renderSwatchLabel(color, index, colors[color]))));
}
var ColorItem = ({ title, subtitle, colors }) => {
  return /* @__PURE__ */ import_react34.default.createElement(Item, null, /* @__PURE__ */ import_react34.default.createElement(ItemDescription, null, /* @__PURE__ */ import_react34.default.createElement(ItemTitle, null, title), /* @__PURE__ */ import_react34.default.createElement(ItemSubtitle, null, subtitle)), /* @__PURE__ */ import_react34.default.createElement(Swatches2, null, renderSwatchSpecimen(colors)));
};
var ColorPalette = ({ children, ...props }) => /* @__PURE__ */ import_react34.default.createElement(import_components24.ResetWrapper, null, /* @__PURE__ */ import_react34.default.createElement(List, {
  ...props,
  className: "docblock-colorpalette"
}, /* @__PURE__ */ import_react34.default.createElement(ListHeading, null, /* @__PURE__ */ import_react34.default.createElement(ListName, null, "Name"), /* @__PURE__ */ import_react34.default.createElement(ListSwatches, null, "Swatches")), children));

// src/components/IconGallery.tsx
var import_react35 = __toESM(require("react"));
var import_theming25 = require("@storybook/theming");
var import_components25 = require("@storybook/components");
var ItemLabel = import_theming25.styled.div(({ theme }) => ({
  fontFamily: theme.typography.fonts.base,
  fontSize: theme.typography.size.s2,
  color: theme.color.defaultText,
  marginLeft: 10,
  lineHeight: 1.2
}));
var ItemSpecimen = import_theming25.styled.div(({ theme }) => ({
  ...getBlockBackgroundStyle(theme),
  overflow: "hidden",
  height: 40,
  width: 40,
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  flex: "none",
  "> img, > svg": {
    width: 20,
    height: 20
  }
}));
var Item2 = import_theming25.styled.div({
  display: "inline-flex",
  flexDirection: "row",
  alignItems: "center",
  flex: "0 1 calc(20% - 10px)",
  minWidth: 120,
  margin: "0px 10px 30px 0"
});
var List2 = import_theming25.styled.div({
  display: "flex",
  flexFlow: "row wrap"
});
var IconItem = ({ name, children }) => /* @__PURE__ */ import_react35.default.createElement(Item2, null, /* @__PURE__ */ import_react35.default.createElement(ItemSpecimen, null, children), /* @__PURE__ */ import_react35.default.createElement(ItemLabel, null, name));
var IconGallery = ({ children, ...props }) => /* @__PURE__ */ import_react35.default.createElement(import_components25.ResetWrapper, null, /* @__PURE__ */ import_react35.default.createElement(List2, {
  ...props,
  className: "docblock-icongallery"
}, children));

// src/blocks/Anchor.tsx
var import_react36 = __toESM(require("react"));
var anchorBlockIdFromId = (storyId) => `anchor--${storyId}`;
var Anchor = ({ storyId, children }) => /* @__PURE__ */ import_react36.default.createElement("div", {
  id: anchorBlockIdFromId(storyId)
}, children);

// src/blocks/ArgsTable.tsx
var import_react39 = __toESM(require("react"));
var import_mapValues = __toESM(require("lodash/mapValues"));
var import_store = require("@storybook/store");
var import_core_events = require("@storybook/core-events");

// src/blocks/DocsContext.ts
var import_react37 = require("react");
var import_global5 = require("global");
if (import_global5.window && import_global5.window.__DOCS_CONTEXT__ === void 0) {
  import_global5.window.__DOCS_CONTEXT__ = (0, import_react37.createContext)(null);
  import_global5.window.__DOCS_CONTEXT__.displayName = "DocsContext";
}
var DocsContext = import_global5.window ? import_global5.window.__DOCS_CONTEXT__ : (0, import_react37.createContext)(null);

// src/blocks/types.ts
var import_client_logger6 = require("@storybook/client-logger");
var CURRENT_SELECTION = ".";
var currentSelectionWarning = () => import_client_logger6.once.warn(
  '`of="."` (current selection) is no longer supported in doc blocks. Falling back to primary story'
);
var PRIMARY_STORY = "^";

// src/blocks/utils.ts
var titleCase = (str2) => str2.split("-").map((part) => part.charAt(0).toUpperCase() + part.slice(1)).join("");
var getComponentName = (component) => {
  if (!component) {
    return void 0;
  }
  if (typeof component === "string") {
    if (component.includes("-")) {
      return titleCase(component);
    }
    return component;
  }
  if (component.__docgenInfo && component.__docgenInfo.displayName) {
    return component.__docgenInfo.displayName;
  }
  return component.name;
};
function scrollToElement(element, block = "start") {
  element.scrollIntoView({
    behavior: "smooth",
    block,
    inline: "nearest"
  });
}

// src/blocks/useStory.ts
var import_react38 = require("react");
function useStory(storyId, context) {
  const stories = useStories([storyId], context);
  return stories && stories[0];
}
function useStories(storyIds, context) {
  const [storiesById, setStories] = (0, import_react38.useState)({});
  (0, import_react38.useEffect)(() => {
    Promise.all(
      storyIds.map(async (storyId) => {
        const story = await context.loadStory(storyId);
        setStories(
          (current) => current[storyId] === story ? current : { ...current, [storyId]: story }
        );
      })
    );
  });
  return storyIds.map((storyId) => {
    if (storiesById[storyId])
      return storiesById[storyId];
    try {
      return context.storyById(storyId);
    } catch (err) {
      return null;
    }
  });
}

// src/blocks/ArgsTable.tsx
var useArgs = (storyId, context) => {
  const storyContext = context.getStoryContext(context.storyById());
  const [args, setArgs] = (0, import_react39.useState)(storyContext.args);
  (0, import_react39.useEffect)(() => {
    const cb = (changed) => {
      if (changed.storyId === storyId) {
        setArgs(changed.args);
      }
    };
    context.channel.on(import_core_events.STORY_ARGS_UPDATED, cb);
    return () => context.channel.off(import_core_events.STORY_ARGS_UPDATED, cb);
  }, [storyId]);
  const updateArgs = (0, import_react39.useCallback)(
    (updatedArgs) => context.channel.emit(import_core_events.UPDATE_STORY_ARGS, { storyId, updatedArgs }),
    [storyId]
  );
  const resetArgs = (0, import_react39.useCallback)(
    (argNames) => context.channel.emit(import_core_events.RESET_STORY_ARGS, { storyId, argNames }),
    [storyId]
  );
  return [args, updateArgs, resetArgs];
};
var useGlobals = (context) => {
  const storyContext = context.getStoryContext(context.storyById());
  const [globals, setGlobals] = (0, import_react39.useState)(storyContext.globals);
  (0, import_react39.useEffect)(() => {
    const cb = (changed) => {
      setGlobals(changed.globals);
    };
    context.channel.on(import_core_events.GLOBALS_UPDATED, cb);
    return () => context.channel.off(import_core_events.GLOBALS_UPDATED, cb);
  }, []);
  return [globals];
};
var extractComponentArgTypes = (component, context, include, exclude) => {
  const { parameters } = context.storyById();
  const { extractArgTypes } = parameters.docs || {};
  if (!extractArgTypes) {
    throw new Error("Args unsupported. See Args documentation for your framework." /* ARGS_UNSUPPORTED */);
  }
  let argTypes = extractArgTypes(component);
  argTypes = (0, import_store.filterArgTypes)(argTypes, include, exclude);
  return argTypes;
};
var isShortcut = (value2) => {
  return value2 && [CURRENT_SELECTION, PRIMARY_STORY].includes(value2);
};
var getComponent = (props = {}, context) => {
  const { of } = props;
  const { story } = props;
  const { component } = context.storyById();
  if (isShortcut(of) || isShortcut(story)) {
    return component || null;
  }
  if (!of) {
    throw new Error("No component found." /* NO_COMPONENT */);
  }
  return of;
};
var addComponentTabs = (tabs, components3, context, include, exclude, sort) => ({
  ...tabs,
  ...(0, import_mapValues.default)(components3, (comp) => ({
    rows: extractComponentArgTypes(comp, context, include, exclude),
    sort
  }))
});
var StoryTable = (props) => {
  const context = (0, import_react39.useContext)(DocsContext);
  const {
    story: storyName,
    component,
    subcomponents,
    showComponent,
    include,
    exclude,
    sort
  } = props;
  try {
    let storyId;
    switch (storyName) {
      case CURRENT_SELECTION:
      case PRIMARY_STORY: {
        if (storyName === CURRENT_SELECTION)
          currentSelectionWarning();
        const primaryStory = context.storyById();
        storyId = primaryStory.id;
        break;
      }
      default: {
        storyId = context.storyIdByName(storyName);
      }
    }
    const story = useStory(storyId, context);
    let [args, updateArgs, resetArgs] = useArgs(storyId, context);
    const [globals] = useGlobals(context);
    if (!story)
      return /* @__PURE__ */ import_react39.default.createElement(ArgsTable, {
        isLoading: true,
        updateArgs,
        resetArgs
      });
    const argTypes = (0, import_store.filterArgTypes)(story.argTypes, include, exclude);
    const mainLabel = getComponentName(component) || "Story";
    let tabs = { [mainLabel]: { rows: argTypes, args, globals, updateArgs, resetArgs } };
    const storyHasArgsWithControls = argTypes && Object.values(argTypes).find((v) => !!(v == null ? void 0 : v.control));
    if (!storyHasArgsWithControls) {
      updateArgs = null;
      resetArgs = null;
      tabs = {};
    }
    if (component && (!storyHasArgsWithControls || showComponent)) {
      tabs = addComponentTabs(tabs, { [mainLabel]: component }, context, include, exclude);
    }
    if (subcomponents) {
      if (Array.isArray(subcomponents)) {
        throw new Error(
          `Unexpected subcomponents array. Expected an object whose keys are tab labels and whose values are components.`
        );
      }
      tabs = addComponentTabs(tabs, subcomponents, context, include, exclude);
    }
    return /* @__PURE__ */ import_react39.default.createElement(TabbedArgsTable, {
      tabs,
      sort
    });
  } catch (err) {
    return /* @__PURE__ */ import_react39.default.createElement(ArgsTable, {
      error: err.message
    });
  }
};
var ComponentsTable = (props) => {
  const context = (0, import_react39.useContext)(DocsContext);
  const { components: components3, include, exclude, sort } = props;
  const tabs = addComponentTabs({}, components3, context, include, exclude);
  return /* @__PURE__ */ import_react39.default.createElement(TabbedArgsTable, {
    tabs,
    sort
  });
};
var ArgsTable2 = (props) => {
  const context = (0, import_react39.useContext)(DocsContext);
  const {
    parameters: { controls },
    subcomponents
  } = context.storyById();
  const { include, exclude, components: components3, sort: sortProp } = props;
  const { story: storyName } = props;
  const sort = sortProp || (controls == null ? void 0 : controls.sort);
  const main = getComponent(props, context);
  if (storyName) {
    return /* @__PURE__ */ import_react39.default.createElement(StoryTable, {
      ...props,
      component: main,
      ...{ subcomponents, sort }
    });
  }
  if (!components3 && !subcomponents) {
    let mainProps;
    try {
      mainProps = { rows: extractComponentArgTypes(main, context, include, exclude) };
    } catch (err) {
      mainProps = { error: err.message };
    }
    return /* @__PURE__ */ import_react39.default.createElement(ArgsTable, {
      ...mainProps,
      sort
    });
  }
  if (components3) {
    return /* @__PURE__ */ import_react39.default.createElement(ComponentsTable, {
      ...props,
      ...{ components: components3, sort }
    });
  }
  const mainLabel = getComponentName(main);
  return /* @__PURE__ */ import_react39.default.createElement(ComponentsTable, {
    ...props,
    components: { [mainLabel]: main, ...subcomponents },
    sort
  });
};
ArgsTable2.defaultProps = {
  of: PRIMARY_STORY
};

// src/blocks/Canvas.tsx
var import_react42 = __toESM(require("react"));

// src/blocks/SourceContainer.tsx
var import_react40 = __toESM(require("react"));
var import_dequal = require("dequal");
var import_docs_tools = require("@storybook/docs-tools");
var SourceContext = (0, import_react40.createContext)({ sources: {} });
var SourceContainer = ({ children, channel }) => {
  const [sources, setSources] = (0, import_react40.useState)({});
  (0, import_react40.useEffect)(() => {
    const handleSnippetRendered = (id2, newSource, format2 = false) => {
      if (sources[id2] && sources[id2].code === newSource) {
        return;
      }
      setSources((current) => {
        const newSources = {
          ...current,
          [id2]: { code: newSource, format: format2 }
        };
        if (!(0, import_dequal.dequal)(current, newSources)) {
          return newSources;
        }
        return current;
      });
    };
    channel.on(import_docs_tools.SNIPPET_RENDERED, handleSnippetRendered);
    return () => channel.off(import_docs_tools.SNIPPET_RENDERED, handleSnippetRendered);
  }, []);
  return /* @__PURE__ */ import_react40.default.createElement(SourceContext.Provider, {
    value: { sources }
  }, children);
};

// src/blocks/Source.tsx
var import_react41 = __toESM(require("react"));
var import_docs_tools2 = require("@storybook/docs-tools");

// src/blocks/enhanceSource.ts
var import_store2 = require("@storybook/store");
function extractSource(location, lines) {
  const { startBody: start, endBody: end } = location;
  if (start.line === end.line && lines[start.line - 1] !== void 0) {
    return lines[start.line - 1].substring(start.col, end.col);
  }
  const startLine = lines[start.line - 1];
  const endLine = lines[end.line - 1];
  if (startLine === void 0 || endLine === void 0) {
    return null;
  }
  return [
    startLine.substring(start.col),
    ...lines.slice(start.line, end.line - 1),
    endLine.substring(0, end.col)
  ].join("\n");
}
var storyIdToSanitizedStoryName = (id2) => id2.replace(/^.*?--/, "");
var extract = (targetId, { source, locationsMap }) => {
  if (!locationsMap) {
    return source;
  }
  const sanitizedStoryName = storyIdToSanitizedStoryName(targetId);
  const location = locationsMap[sanitizedStoryName];
  if (!location) {
    return source;
  }
  const lines = source.split("\n");
  return extractSource(location, lines);
};
var enhanceSource = (story) => {
  var _a;
  const { id: id2, parameters } = story;
  const { storySource, docs = {} } = parameters;
  const { transformSource } = docs;
  if (!(storySource == null ? void 0 : storySource.source) || ((_a = docs.source) == null ? void 0 : _a.code)) {
    return null;
  }
  const input = extract(id2, storySource);
  const code = transformSource ? transformSource(input, story) : input;
  return { docs: (0, import_store2.combineParameters)(docs, { source: { code } }) };
};

// src/blocks/Source.tsx
var SourceState = /* @__PURE__ */ ((SourceState2) => {
  SourceState2["OPEN"] = "open";
  SourceState2["CLOSED"] = "closed";
  SourceState2["NONE"] = "none";
  return SourceState2;
})(SourceState || {});
var getSourceState = (stories) => {
  const states = stories.map((story) => {
    var _a, _b;
    return (_b = (_a = story.parameters.docs) == null ? void 0 : _a.source) == null ? void 0 : _b.state;
  }).filter(Boolean);
  if (states.length === 0)
    return "closed" /* CLOSED */;
  return states[0];
};
var getStorySource = (storyId, sourceContext) => {
  const { sources } = sourceContext;
  return (sources == null ? void 0 : sources[storyId]) || { code: "", format: false };
};
var getSnippet = (snippet, story) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
  if (!story) {
    return snippet;
  }
  const { parameters } = story;
  const isArgsStory = parameters.__isArgsStory;
  const type = ((_b = (_a = parameters.docs) == null ? void 0 : _a.source) == null ? void 0 : _b.type) || import_docs_tools2.SourceType.AUTO;
  const userCode = (_d = (_c = parameters.docs) == null ? void 0 : _c.source) == null ? void 0 : _d.code;
  if (userCode !== void 0) {
    return userCode;
  }
  if (type === import_docs_tools2.SourceType.DYNAMIC) {
    return ((_f = (_e = parameters.docs) == null ? void 0 : _e.transformSource) == null ? void 0 : _f.call(_e, snippet, story)) || snippet;
  }
  if (type === import_docs_tools2.SourceType.AUTO && snippet && isArgsStory) {
    return ((_h = (_g = parameters.docs) == null ? void 0 : _g.transformSource) == null ? void 0 : _h.call(_g, snippet, story)) || snippet;
  }
  const enhanced = enhanceSource(story) || parameters;
  return ((_j = (_i = enhanced == null ? void 0 : enhanced.docs) == null ? void 0 : _i.source) == null ? void 0 : _j.code) || "";
};
var getSourceProps = (props, docsContext, sourceContext) => {
  const { id: primaryId, parameters } = docsContext.storyById();
  const codeProps = props;
  const singleProps = props;
  const multiProps = props;
  let source = codeProps.code;
  let { format: format2 } = codeProps;
  const targetIds = multiProps.ids || [singleProps.id || primaryId];
  const storyIds = targetIds.map((targetId) => {
    if (targetId === CURRENT_SELECTION)
      currentSelectionWarning();
    return targetId === CURRENT_SELECTION ? primaryId : targetId;
  });
  const stories = useStories(storyIds, docsContext);
  if (!stories.every(Boolean)) {
    return { error: "Oh no! The source is not available." /* SOURCE_UNAVAILABLE */, state: "none" /* NONE */ };
  }
  if (!source) {
    ({ format: format2 } = getStorySource(storyIds[0], sourceContext));
    source = storyIds.map((storyId, idx) => {
      const { code: storySource } = getStorySource(storyId, sourceContext);
      const storyObj = stories[idx];
      return getSnippet(storySource, storyObj);
    }).join("\n\n");
  }
  const state = getSourceState(stories);
  const { docs: docsParameters = {} } = parameters;
  const { source: sourceParameters = {} } = docsParameters;
  const { language: docsLanguage = null } = sourceParameters;
  return source ? {
    code: source,
    state,
    format: format2,
    language: props.language || docsLanguage || "jsx",
    dark: props.dark || false
  } : { error: "Oh no! The source is not available." /* SOURCE_UNAVAILABLE */, state };
};
var Source2 = (props) => {
  const sourceContext = (0, import_react41.useContext)(SourceContext);
  const docsContext = (0, import_react41.useContext)(DocsContext);
  const sourceProps = getSourceProps(props, docsContext, sourceContext);
  return /* @__PURE__ */ import_react41.default.createElement(Source, {
    ...sourceProps
  });
};

// src/blocks/Canvas.tsx
var getPreviewProps = ({ withSource, mdxSource, children, ...props }, docsContext, sourceContext) => {
  let sourceState = withSource;
  let isLoading = false;
  if (sourceState === "none" /* NONE */) {
    return { isLoading, previewProps: props };
  }
  if (mdxSource) {
    return {
      isLoading,
      previewProps: {
        ...props,
        withSource: getSourceProps({ code: decodeURI(mdxSource) }, docsContext, sourceContext),
        isExpanded: sourceState === "open" /* OPEN */
      }
    };
  }
  const childArray = Array.isArray(children) ? children : [children];
  const storyChildren = childArray.filter(
    (c) => c.props && (c.props.id || c.props.name || c.props.of)
  );
  const targetIds = storyChildren.map(({ props: { id: id2, of, name } }) => {
    if (id2)
      return id2;
    if (of)
      return docsContext.storyIdByModuleExport(of);
    return docsContext.storyIdByName(name);
  });
  const sourceProps = getSourceProps({ ids: targetIds }, docsContext, sourceContext);
  if (!sourceState)
    sourceState = sourceProps.state;
  const storyIds = targetIds.map((targetId) => {
    if (targetId === CURRENT_SELECTION)
      currentSelectionWarning();
    return targetId === CURRENT_SELECTION ? docsContext.storyById().id : targetId;
  });
  const stories = useStories(storyIds, docsContext);
  isLoading = stories.some((s) => !s);
  return {
    isLoading,
    previewProps: {
      ...props,
      withSource: sourceProps,
      isExpanded: sourceState === "open" /* OPEN */
    }
  };
};
var Canvas = (props) => {
  const docsContext = (0, import_react42.useContext)(DocsContext);
  const sourceContext = (0, import_react42.useContext)(SourceContext);
  const { isLoading, previewProps } = getPreviewProps(props, docsContext, sourceContext);
  const { children } = props;
  if (isLoading)
    return /* @__PURE__ */ import_react42.default.createElement(PreviewSkeleton, null);
  return /* @__PURE__ */ import_react42.default.createElement(Preview, {
    ...previewProps
  }, children);
};

// src/blocks/Description.tsx
var import_react43 = __toESM(require("react"));
var import_docs_tools3 = require("@storybook/docs-tools");
var DescriptionType = /* @__PURE__ */ ((DescriptionType2) => {
  DescriptionType2["INFO"] = "info";
  DescriptionType2["NOTES"] = "notes";
  DescriptionType2["DOCGEN"] = "docgen";
  DescriptionType2["LEGACY_5_2"] = "legacy-5.2";
  DescriptionType2["AUTO"] = "auto";
  return DescriptionType2;
})(DescriptionType || {});
var getNotes = (notes) => notes && (typeof notes === "string" ? notes : (0, import_docs_tools3.str)(notes.markdown) || (0, import_docs_tools3.str)(notes.text));
var getInfo = (info) => info && (typeof info === "string" ? info : (0, import_docs_tools3.str)(info.text));
var noDescription = (component) => null;
var getDescriptionProps = ({ of, type, markdown, children }, { storyById }) => {
  const { component, parameters } = storyById();
  if (children || markdown) {
    return { markdown: children || markdown };
  }
  const { notes, info, docs } = parameters;
  const { extractComponentDescription = noDescription, description } = docs || {};
  if (of === CURRENT_SELECTION)
    currentSelectionWarning();
  const target = [CURRENT_SELECTION, PRIMARY_STORY].includes(of) ? component : of;
  const componentDescriptionParameter = description == null ? void 0 : description.component;
  if (componentDescriptionParameter) {
    return { markdown: componentDescriptionParameter };
  }
  switch (type) {
    case "info" /* INFO */:
      return { markdown: getInfo(info) };
    case "notes" /* NOTES */:
      return { markdown: getNotes(notes) };
    case "legacy-5.2" /* LEGACY_5_2 */:
      return {
        markdown: `
${getNotes(notes) || getInfo(info) || ""}

${extractComponentDescription(target) || ""}
`.trim()
      };
    case "docgen" /* DOCGEN */:
    case "auto" /* AUTO */:
    default:
      return { markdown: extractComponentDescription(target, { component, ...parameters }) };
  }
};
var DescriptionContainer = (props) => {
  const context = (0, import_react43.useContext)(DocsContext);
  const { markdown } = getDescriptionProps(props, context);
  return markdown ? /* @__PURE__ */ import_react43.default.createElement(Description, {
    markdown
  }) : null;
};
DescriptionContainer.defaultProps = {
  of: PRIMARY_STORY
};

// src/blocks/Docs.tsx
var import_react55 = __toESM(require("react"));

// src/blocks/DocsContainer.tsx
var import_react44 = __toESM(require("react"));
var import_global6 = __toESM(require("global"));
var import_theming26 = require("@storybook/theming");
var { document: document2, window: globalWindow4 } = import_global6.default;
var DocsContainer = ({
  context,
  theme,
  children
}) => {
  (0, import_react44.useEffect)(() => {
    let url;
    try {
      url = new URL(globalWindow4.parent.location);
      if (url.hash) {
        const element = document2.getElementById(url.hash.substring(1));
        if (element) {
          setTimeout(() => {
            scrollToElement(element);
          }, 200);
        }
      }
    } catch (err) {
    }
  });
  return /* @__PURE__ */ import_react44.default.createElement(DocsContext.Provider, {
    value: context
  }, /* @__PURE__ */ import_react44.default.createElement(SourceContainer, {
    channel: context.channel
  }, /* @__PURE__ */ import_react44.default.createElement(import_theming26.ThemeProvider, {
    theme: (0, import_theming26.ensure)(theme)
  }, /* @__PURE__ */ import_react44.default.createElement(DocsWrapper, {
    className: "sbdocs sbdocs-wrapper"
  }, /* @__PURE__ */ import_react44.default.createElement(DocsContent, {
    className: "sbdocs sbdocs-content"
  }, children)))));
};

// src/blocks/DocsPage.tsx
var import_react54 = __toESM(require("react"));

// src/blocks/Title.tsx
var import_react45 = __toESM(require("react"));
var STORY_KIND_PATH_SEPARATOR = /\s*\/\s*/;
var extractTitle = (title) => {
  const groups = title.trim().split(STORY_KIND_PATH_SEPARATOR);
  return groups && groups[groups.length - 1] || title;
};
var Title2 = ({ children }) => {
  const context = (0, import_react45.useContext)(DocsContext);
  let text = children;
  if (!text) {
    text = extractTitle(context.storyById().title);
  }
  return text ? /* @__PURE__ */ import_react45.default.createElement(Title, {
    className: "sbdocs-title"
  }, text) : null;
};

// src/blocks/Subtitle.tsx
var import_react46 = __toESM(require("react"));
var Subtitle2 = ({ children }) => {
  const docsContext = (0, import_react46.useContext)(DocsContext);
  const { parameters } = docsContext.storyById();
  let text = children;
  if (!text) {
    text = parameters == null ? void 0 : parameters.componentSubtitle;
  }
  return text ? /* @__PURE__ */ import_react46.default.createElement(Subtitle, {
    className: "sbdocs-subtitle"
  }, text) : null;
};

// src/blocks/Primary.tsx
var import_react51 = __toESM(require("react"));

// src/blocks/DocsStory.tsx
var import_react50 = __toESM(require("react"));
var import_util_deprecate = __toESM(require("util-deprecate"));
var import_ts_dedent2 = require("ts-dedent");

// src/blocks/Subheading.tsx
var import_react48 = __toESM(require("react"));
var import_components35 = require("@storybook/components");

// src/blocks/mdx.tsx
var import_react47 = __toESM(require("react"));
var import_core_events2 = require("@storybook/core-events");
var import_components33 = require("@storybook/components");
var import_global7 = __toESM(require("global"));
var import_theming27 = require("@storybook/theming");
var { document: document3 } = import_global7.default;
var assertIsFn = (val) => {
  if (typeof val !== "function") {
    throw new Error(`Expected story function, got: ${val}`);
  }
  return val;
};
var AddContext = (props) => {
  const { children, ...rest } = props;
  const parentContext = import_react47.default.useContext(DocsContext);
  return /* @__PURE__ */ import_react47.default.createElement(DocsContext.Provider, {
    value: { ...parentContext, ...rest }
  }, children);
};
var CodeOrSourceMdx = ({ className, children, ...rest }) => {
  if (typeof className !== "string" && (typeof children !== "string" || !children.match(/[\n\r]/g))) {
    return /* @__PURE__ */ import_react47.default.createElement(import_components33.Code, null, children);
  }
  const language = className && className.split("-");
  return /* @__PURE__ */ import_react47.default.createElement(Source, {
    language: language && language[1] || "plaintext",
    format: false,
    code: children,
    ...rest
  });
};
function navigate(context, url) {
  context.channel.emit(import_core_events2.NAVIGATE_URL, url);
}
var A = import_components33.components.a;
var AnchorInPage = ({ hash, children }) => {
  const context = (0, import_react47.useContext)(DocsContext);
  return /* @__PURE__ */ import_react47.default.createElement(A, {
    href: hash,
    target: "_self",
    onClick: (event) => {
      const id2 = hash.substring(1);
      const element = document3.getElementById(id2);
      if (element) {
        navigate(context, hash);
      }
    }
  }, children);
};
var AnchorMdx = (props) => {
  const { href, target, children, ...rest } = props;
  const context = (0, import_react47.useContext)(DocsContext);
  if (href) {
    if (href.startsWith("#")) {
      return /* @__PURE__ */ import_react47.default.createElement(AnchorInPage, {
        hash: href
      }, children);
    }
    if (target !== "_blank" && !href.startsWith("https://")) {
      return /* @__PURE__ */ import_react47.default.createElement(A, {
        href,
        onClick: (event) => {
          event.preventDefault();
          navigate(context, event.currentTarget.getAttribute("href"));
        },
        target,
        ...rest
      }, children);
    }
  }
  return /* @__PURE__ */ import_react47.default.createElement(A, {
    ...props
  });
};
var SUPPORTED_MDX_HEADERS = ["h1", "h2", "h3", "h4", "h5", "h6"];
var OcticonHeaders = SUPPORTED_MDX_HEADERS.reduce(
  (acc, headerType) => ({
    ...acc,
    [headerType]: (0, import_theming27.styled)(import_components33.components[headerType])({
      "& svg": {
        visibility: "hidden"
      },
      "&:hover svg": {
        visibility: "visible"
      }
    })
  }),
  {}
);
var OcticonAnchor = import_theming27.styled.a(() => ({
  float: "left",
  paddingRight: "4px",
  marginLeft: "-20px",
  color: "inherit"
}));
var HeaderWithOcticonAnchor = ({
  as,
  id: id2,
  children,
  ...rest
}) => {
  const context = (0, import_react47.useContext)(DocsContext);
  const OcticonHeader = OcticonHeaders[as];
  const hash = `#${id2}`;
  return /* @__PURE__ */ import_react47.default.createElement(OcticonHeader, {
    id: id2,
    ...rest
  }, /* @__PURE__ */ import_react47.default.createElement(OcticonAnchor, {
    "aria-hidden": "true",
    href: hash,
    tabIndex: -1,
    target: "_self",
    onClick: (event) => {
      const element = document3.getElementById(id2);
      if (element) {
        navigate(context, hash);
      }
    }
  }, /* @__PURE__ */ import_react47.default.createElement("svg", {
    viewBox: "0 0 16 16",
    version: "1.1",
    width: "16",
    height: "16",
    "aria-hidden": "true",
    fill: "currentColor"
  }, /* @__PURE__ */ import_react47.default.createElement("path", {
    fillRule: "evenodd",
    d: "M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
  }))), children);
};
var HeaderMdx = (props) => {
  const { as, id: id2, children, ...rest } = props;
  if (id2) {
    return /* @__PURE__ */ import_react47.default.createElement(HeaderWithOcticonAnchor, {
      as,
      id: id2,
      ...rest
    }, children);
  }
  const Header = import_components33.components[as];
  return /* @__PURE__ */ import_react47.default.createElement(Header, {
    ...props
  });
};
var HeadersMdx = SUPPORTED_MDX_HEADERS.reduce(
  (acc, headerType) => ({
    ...acc,
    [headerType]: (props) => /* @__PURE__ */ import_react47.default.createElement(HeaderMdx, {
      as: headerType,
      ...props
    })
  }),
  {}
);

// src/blocks/Subheading.tsx
var Subheading = ({ children, disableAnchor }) => {
  if (disableAnchor || typeof children !== "string") {
    return /* @__PURE__ */ import_react48.default.createElement(import_components35.H3, null, children);
  }
  const tagID = children.toLowerCase().replace(/[^a-z0-9]/gi, "-");
  return /* @__PURE__ */ import_react48.default.createElement(HeaderMdx, {
    as: "h3",
    id: tagID
  }, children);
};

// src/blocks/Story.tsx
var import_react49 = __toESM(require("react"));
var storyBlockIdFromId = (storyId) => `story--${storyId}`;
var getStoryId2 = (props, context) => {
  const { id: id2, of, meta } = props;
  if (of) {
    return context.storyIdByModuleExport(of, meta);
  }
  const { name } = props;
  if (id2 === CURRENT_SELECTION)
    currentSelectionWarning();
  const inputId = id2 === CURRENT_SELECTION ? context.storyById().id : id2;
  return inputId || context.storyIdByName(name);
};
var getStoryProps = ({ height, inline }, story) => {
  const { name: storyName, parameters = {} } = story || {};
  const { docs = {} } = parameters;
  if (docs.disable) {
    return null;
  }
  const { inlineStories = false, iframeHeight = 100 } = docs;
  const storyIsInline = typeof inline === "boolean" ? inline : inlineStories;
  return {
    inline: storyIsInline,
    id: story == null ? void 0 : story.id,
    height: height || (storyIsInline ? void 0 : iframeHeight),
    title: storyName,
    ...storyIsInline && {
      parameters
    }
  };
};
var Story2 = (props) => {
  const context = (0, import_react49.useContext)(DocsContext);
  const storyRef = (0, import_react49.useRef)();
  const storyId = getStoryId2(props, context);
  const story = useStory(storyId, context);
  const [showLoader, setShowLoader] = (0, import_react49.useState)(true);
  (0, import_react49.useEffect)(() => {
    let cleanup;
    if (story && storyRef.current) {
      const element = storyRef.current;
      cleanup = context.renderStoryToElement(story, element);
      setShowLoader(false);
    }
    return () => cleanup && cleanup();
  }, [story]);
  if (!story) {
    return /* @__PURE__ */ import_react49.default.createElement(StorySkeleton, null);
  }
  const storyProps = getStoryProps(props, story);
  if (!storyProps) {
    return null;
  }
  if (storyProps.inline) {
    const htmlContents = `<span></span>`;
    const { height } = storyProps;
    return /* @__PURE__ */ import_react49.default.createElement("div", {
      id: storyBlockIdFromId(story.id)
    }, height ? /* @__PURE__ */ import_react49.default.createElement("style", null, `#story--${story.id} { min-height: ${height}px; transform: translateZ(0); overflow: auto }`) : null, showLoader && /* @__PURE__ */ import_react49.default.createElement(StorySkeleton, null), /* @__PURE__ */ import_react49.default.createElement("div", {
      ref: storyRef,
      "data-name": story.name,
      dangerouslySetInnerHTML: { __html: htmlContents }
    }));
  }
  return /* @__PURE__ */ import_react49.default.createElement("div", {
    id: storyBlockIdFromId(story.id)
  }, /* @__PURE__ */ import_react49.default.createElement(Story, {
    ...storyProps
  }));
};
Story2.defaultProps = {
  children: null,
  name: null
};

// src/blocks/DocsStory.tsx
var warnStoryDescription = (0, import_util_deprecate.default)(
  () => {
  },
  import_ts_dedent2.dedent`
    Deprecated parameter: docs.storyDescription => docs.description.story
      
    https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#docs-description-parameter
  `
);
var DocsStory = ({
  id: id2,
  name,
  expanded = true,
  withToolbar = false,
  parameters = {}
}) => {
  var _a;
  let description;
  const { docs } = parameters;
  if (expanded && docs) {
    description = (_a = docs.description) == null ? void 0 : _a.story;
    if (!description) {
      description = docs.storyDescription;
      if (description)
        warnStoryDescription();
    }
  }
  const subheading = expanded && name;
  return /* @__PURE__ */ import_react50.default.createElement(Anchor, {
    storyId: id2
  }, subheading && /* @__PURE__ */ import_react50.default.createElement(Subheading, null, subheading), description && /* @__PURE__ */ import_react50.default.createElement(DescriptionContainer, {
    markdown: description
  }), /* @__PURE__ */ import_react50.default.createElement(Canvas, {
    withToolbar
  }, /* @__PURE__ */ import_react50.default.createElement(Story2, {
    id: id2,
    parameters
  })));
};

// src/blocks/Primary.tsx
var Primary = ({ name }) => {
  const docsContext = (0, import_react51.useContext)(DocsContext);
  const storyId = name && docsContext.storyIdByName(name);
  const story = docsContext.storyById(storyId);
  return story ? /* @__PURE__ */ import_react51.default.createElement(DocsStory, {
    ...story,
    expanded: false,
    withToolbar: true
  }) : null;
};

// src/blocks/Stories.tsx
var import_react53 = __toESM(require("react"));

// src/blocks/Heading.tsx
var import_react52 = __toESM(require("react"));
var import_components37 = require("@storybook/components");
var Heading = ({ children, disableAnchor }) => {
  if (disableAnchor || typeof children !== "string") {
    return /* @__PURE__ */ import_react52.default.createElement(import_components37.H2, null, children);
  }
  const tagID = children.toLowerCase().replace(/[^a-z0-9]/gi, "-");
  return /* @__PURE__ */ import_react52.default.createElement(HeaderMdx, {
    as: "h2",
    id: tagID
  }, children);
};

// src/blocks/Stories.tsx
var Stories = ({ title, includePrimary = false }) => {
  const { componentStories } = (0, import_react53.useContext)(DocsContext);
  let stories = componentStories();
  stories = stories.filter((story) => {
    var _a, _b;
    return !((_b = (_a = story.parameters) == null ? void 0 : _a.docs) == null ? void 0 : _b.disable);
  });
  if (!includePrimary)
    stories = stories.slice(1);
  if (!stories || stories.length === 0) {
    return null;
  }
  return /* @__PURE__ */ import_react53.default.createElement(import_react53.default.Fragment, null, /* @__PURE__ */ import_react53.default.createElement(Heading, null, title), stories.map((story) => story && /* @__PURE__ */ import_react53.default.createElement(DocsStory, {
    key: story.id,
    ...story,
    expanded: true
  })));
};
Stories.defaultProps = {
  title: "Stories"
};

// src/blocks/DocsPage.tsx
var DocsPage = () => /* @__PURE__ */ import_react54.default.createElement(import_react54.default.Fragment, null, /* @__PURE__ */ import_react54.default.createElement(Title2, null), /* @__PURE__ */ import_react54.default.createElement(Subtitle2, null), /* @__PURE__ */ import_react54.default.createElement(DescriptionContainer, null), /* @__PURE__ */ import_react54.default.createElement(Primary, null), /* @__PURE__ */ import_react54.default.createElement(ArgsTable2, {
  story: PRIMARY_STORY
}), /* @__PURE__ */ import_react54.default.createElement(Stories, null));

// src/blocks/Docs.tsx
var Docs = ({ docsParameter, context }) => {
  const Container = docsParameter.container || DocsContainer;
  const Page = docsParameter.page || DocsPage;
  return /* @__PURE__ */ import_react55.default.createElement(Container, {
    context,
    theme: docsParameter.theme
  }, /* @__PURE__ */ import_react55.default.createElement(Page, null));
};

// src/blocks/external/ExternalDocs.tsx
var import_react56 = __toESM(require("react"));
var import_store4 = require("@storybook/store");

// src/blocks/external/ExternalPreview.ts
var import_preview_web2 = require("@storybook/preview-web");
var import_store3 = require("@storybook/store");
var import_channels = require("@storybook/channels");

// src/blocks/external/ExternalDocsContext.ts
var import_preview_web = require("@storybook/preview-web");
var ExternalDocsContext = class extends import_preview_web.DocsContext {
  constructor(channel, store, renderStoryToElement, processMetaExports) {
    super(channel, store, renderStoryToElement, [], true);
    this.channel = channel;
    this.store = store;
    this.renderStoryToElement = renderStoryToElement;
    this.processMetaExports = processMetaExports;
    this.setMeta = (metaExports) => {
      const csfFile = this.processMetaExports(metaExports);
      this.referenceCSFFile(csfFile, true);
    };
  }
  storyIdByModuleExport(storyExport, metaExports) {
    if (metaExports) {
      const csfFile = this.processMetaExports(metaExports);
      this.referenceCSFFile(csfFile, false);
    }
    return super.storyIdByModuleExport(storyExport);
  }
};

// src/blocks/external/ExternalPreview.ts
var ConstantMap = class {
  constructor(prefix) {
    this.prefix = prefix;
    this.entries = /* @__PURE__ */ new Map();
  }
  get(key) {
    if (!this.entries.has(key)) {
      this.entries.set(key, `${this.prefix}${this.entries.size}`);
    }
    return this.entries.get(key);
  }
};
var ExternalPreview = class extends import_preview_web2.Preview {
  constructor(projectAnnotations) {
    super(new import_channels.Channel());
    this.projectAnnotations = projectAnnotations;
    this.importPaths = new ConstantMap("./importPath/");
    this.titles = new ConstantMap("title-");
    this.storyIndex = { v: 4, entries: {} };
    this.moduleExportsByImportPath = {};
    this.processMetaExports = (metaExports) => {
      const importPath = this.importPaths.get(metaExports);
      this.moduleExportsByImportPath[importPath] = metaExports;
      const title = metaExports.default.title || this.titles.get(metaExports);
      const csfFile = this.storyStore.processCSFFileWithCache(
        metaExports,
        importPath,
        title
      );
      Object.values(csfFile.stories).forEach(({ id: id2, name }) => {
        this.storyIndex.entries[id2] = {
          id: id2,
          importPath,
          title,
          name,
          type: "story"
        };
      });
      this.onStoriesChanged({ storyIndex: this.storyIndex });
      return csfFile;
    };
    this.docsContext = () => {
      return new ExternalDocsContext(
        this.channel,
        this.storyStore,
        this.renderStoryToElement.bind(this),
        this.processMetaExports.bind(this)
      );
    };
    this.initialize({
      getStoryIndex: () => this.storyIndex,
      importFn: (path) => {
        return Promise.resolve(this.moduleExportsByImportPath[path]);
      },
      getProjectAnnotations: () => (0, import_store3.composeConfigs)([
        { parameters: { docs: { inlineStories: true } } },
        this.projectAnnotations
      ])
    });
  }
};

// src/blocks/external/ExternalDocs.tsx
function usePreview(projectAnnotations) {
  const previewRef = (0, import_react56.useRef)();
  if (!previewRef.current)
    previewRef.current = new ExternalPreview(projectAnnotations);
  return previewRef.current;
}
var ExternalDocs = ({
  projectAnnotationsList,
  children
}) => {
  var _a;
  const projectAnnotations = (0, import_store4.composeConfigs)(projectAnnotationsList);
  const preview2 = usePreview(projectAnnotations);
  const docsParameter = {
    ...(_a = projectAnnotations.parameters) == null ? void 0 : _a.docs,
    page: () => children
  };
  return /* @__PURE__ */ import_react56.default.createElement(Docs, {
    docsParameter,
    context: preview2.docsContext()
  });
};

// src/blocks/external/ExternalDocsContainer.tsx
var import_react57 = __toESM(require("react"));
var import_theming28 = require("@storybook/theming");
var preview;
var ExternalDocsContainer = ({
  projectAnnotations,
  children
}) => {
  if (!preview)
    preview = new ExternalPreview(projectAnnotations);
  return /* @__PURE__ */ import_react57.default.createElement(DocsContext.Provider, {
    value: preview.docsContext()
  }, /* @__PURE__ */ import_react57.default.createElement(import_theming28.ThemeProvider, {
    theme: (0, import_theming28.ensure)(import_theming28.themes.light)
  }, children));
};

// src/blocks/Meta.tsx
var import_react58 = __toESM(require("react"));
var Meta = ({ of }) => {
  const context = (0, import_react58.useContext)(DocsContext);
  console.log(DocsContext, context);
  if (of)
    context.setMeta(of);
  try {
    const primary = context.storyById();
    return /* @__PURE__ */ import_react58.default.createElement(Anchor, {
      storyId: primary.id
    });
  } catch (err) {
    return null;
  }
};

// src/blocks/Preview.tsx
var import_react59 = __toESM(require("react"));
var import_util_deprecate2 = __toESM(require("util-deprecate"));
var import_ts_dedent3 = require("ts-dedent");
var Preview3 = (0, import_util_deprecate2.default)(
  (props) => /* @__PURE__ */ import_react59.default.createElement(Canvas, {
    ...props
  }),
  import_ts_dedent3.dedent`
    Preview doc block has been renamed to Canvas.

    https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#previewprops-renamed
  `
);

// src/blocks/Props.tsx
var import_react60 = __toESM(require("react"));
var import_util_deprecate3 = __toESM(require("util-deprecate"));
var import_ts_dedent4 = require("ts-dedent");
var Props = (0, import_util_deprecate3.default)(
  (props) => /* @__PURE__ */ import_react60.default.createElement(ArgsTable2, {
    ...props
  }),
  import_ts_dedent4.dedent`
    Props doc block has been renamed to ArgsTable.

    https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#previewprops-renamed
  `
);
Props.defaultProps = {
  of: PRIMARY_STORY
};

// src/blocks/Wrapper.tsx
var import_react61 = __toESM(require("react"));
var Wrapper9 = ({ children }) => /* @__PURE__ */ import_react61.default.createElement("div", {
  style: { fontFamily: "sans-serif" }
}, children);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AddContext,
  Anchor,
  AnchorMdx,
  ArgsTable,
  BooleanControl,
  CURRENT_SELECTION,
  Canvas,
  CodeOrSourceMdx,
  ColorControl,
  ColorItem,
  ColorPalette,
  ComponentsTable,
  DateControl,
  Description,
  DescriptionType,
  Docs,
  DocsContainer,
  DocsContext,
  DocsPage,
  DocsStory,
  ExternalDocs,
  ExternalDocsContainer,
  FilesControl,
  HeaderMdx,
  HeadersMdx,
  Heading,
  IconGallery,
  IconItem,
  Meta,
  NoControlsWarning,
  NumberControl,
  ObjectControl,
  OptionsControl,
  PRIMARY_STORY,
  Preview,
  Primary,
  Props,
  PureArgsTable,
  RangeControl,
  Source,
  SourceContainer,
  SourceContext,
  SourceState,
  Stories,
  Story,
  StoryTable,
  Subheading,
  Subtitle,
  TextControl,
  Title,
  Typeset,
  Wrapper,
  anchorBlockIdFromId,
  assertIsFn,
  currentSelectionWarning,
  extractComponentArgTypes,
  extractTitle,
  format,
  formatDate,
  formatTime,
  getComponent,
  getDescriptionProps,
  getSourceProps,
  getStoryId,
  getStoryProps,
  parse,
  parseDate,
  parseTime,
  storyBlockIdFromId
});
