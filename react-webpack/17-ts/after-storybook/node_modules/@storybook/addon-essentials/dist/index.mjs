var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});

// src/index.ts
import path, { dirname, join } from "path";
import { logger } from "@storybook/node-logger";
import { serverRequire } from "@storybook/core-common";
var requireMain = (configDir) => {
  const absoluteConfigDir = path.isAbsolute(configDir) ? configDir : path.join(process.cwd(), configDir);
  const mainFile = path.join(absoluteConfigDir, "main");
  return serverRequire(mainFile) ?? {};
};
function addons(options) {
  const checkInstalled = (addon, main2) => {
    const existingAddon = main2.addons?.find((entry) => {
      const name = typeof entry === "string" ? entry : entry.name;
      return name?.startsWith(addon);
    });
    if (existingAddon) {
      logger.info(`Found existing addon ${JSON.stringify(existingAddon)}, skipping.`);
    }
    return !!existingAddon;
  };
  const main = requireMain(options.configDir);
  return [
    "docs",
    "controls",
    "actions",
    "backgrounds",
    "viewport",
    "toolbars",
    "measure",
    "outline",
    "highlight"
  ].filter((key) => options[key] !== false).map((key) => `@storybook/addon-${key}`).filter((addon) => !checkInstalled(addon, main)).map((addon) => {
    try {
      return dirname(__require.resolve(join(addon, "package.json")));
    } catch (err) {
    }
    return __require.resolve(addon);
  });
}
export {
  addons
};
