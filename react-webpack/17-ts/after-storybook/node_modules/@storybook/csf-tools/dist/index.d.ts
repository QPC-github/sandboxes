import * as t from '@babel/types';

interface Meta {
    id?: string;
    title?: string;
    component?: string;
    includeStories?: string[] | RegExp;
    excludeStories?: string[] | RegExp;
}
interface Story {
    id: string;
    name: string;
    parameters: Record<string, any>;
}
interface CsfOptions {
    fileName?: string;
    makeTitle: (userTitle: string) => string;
}
declare class NoMetaError extends Error {
    constructor(ast: t.Node, fileName?: string);
}
declare class CsfFile {
    _ast: t.File;
    _fileName: string;
    _makeTitle: (title: string) => string;
    _meta?: Meta;
    _stories: Record<string, Story>;
    _metaAnnotations: Record<string, t.Node>;
    _storyExports: Record<string, t.VariableDeclarator | t.FunctionDeclaration>;
    _storyAnnotations: Record<string, Record<string, t.Node>>;
    _templates: Record<string, t.Expression>;
    _namedExportsOrder?: string[];
    imports: string[];
    constructor(ast: t.File, { fileName, makeTitle }: CsfOptions);
    _parseTitle(value: t.Node): string;
    _parseMeta(declaration: t.ObjectExpression, program: t.Program): void;
    parse(): this;
    get meta(): Meta;
    get stories(): Story[];
}
declare const loadCsf: (code: string, options: CsfOptions) => CsfFile;
declare const formatCsf: (csf: CsfFile) => string;
declare const readCsf: (fileName: string, options: CsfOptions) => Promise<CsfFile>;
declare const writeCsf: (csf: CsfFile, fileName?: string) => Promise<void>;

declare class ConfigFile {
    _ast: t.File;
    _code: string;
    _exports: Record<string, t.Expression>;
    _exportsObject: t.ObjectExpression;
    _quotes: 'single' | 'double' | undefined;
    fileName?: string;
    constructor(ast: t.File, code: string, fileName?: string);
    parse(): this;
    getFieldNode(path: string[]): t.Node;
    getFieldValue(path: string[]): any;
    setFieldNode(path: string[], expr: t.Expression): void;
    _inferQuotes(): "single" | "double";
    setFieldValue(path: string[], value: any): void;
}
declare const loadConfig: (code: string, fileName?: string) => ConfigFile;
declare const formatConfig: (config: ConfigFile) => string;
declare const readConfig: (fileName: string) => Promise<ConfigFile>;
declare const writeConfig: (config: ConfigFile, fileName?: string) => Promise<void>;

declare const getStorySortParameter: (previewCode: string) => any;

export { ConfigFile, CsfFile, CsfOptions, NoMetaError, formatConfig, formatCsf, getStorySortParameter, loadConfig, loadCsf, readConfig, readCsf, writeConfig, writeCsf };
