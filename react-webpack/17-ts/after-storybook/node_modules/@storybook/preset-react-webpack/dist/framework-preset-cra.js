"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/framework-preset-cra.ts
var framework_preset_cra_exports = {};
__export(framework_preset_cra_exports, {
  webpackFinal: () => webpackFinal
});
module.exports = __toCommonJS(framework_preset_cra_exports);
var import_node_logger2 = require("@storybook/node-logger");

// src/cra-config.ts
var import_fs = __toESM(require("fs"));
var import_path = __toESM(require("path"));
var import_semver = __toESM(require("@storybook/semver"));
var import_node_logger = require("@storybook/node-logger");
var appDirectory = import_fs.default.realpathSync(process.cwd());
var reactScriptsPath;
function getReactScriptsPath({ noCache } = {}) {
  if (reactScriptsPath && !noCache)
    return reactScriptsPath;
  let reactScriptsScriptPath = import_fs.default.realpathSync(
    import_path.default.join(appDirectory, "/node_modules/.bin/react-scripts")
  );
  try {
    const pathIsNotResolved = /node_modules[\\/]\.bin[\\/]react-scripts/i.test(
      reactScriptsScriptPath
    );
    if (pathIsNotResolved) {
      const content = import_fs.default.readFileSync(reactScriptsScriptPath, "utf8");
      const packagePathMatch = content.match(
        /"\$basedir[\\/]([^\s]+?[\\/]bin[\\/]react-scripts\.js")/i
      );
      if (packagePathMatch && packagePathMatch.length > 1) {
        reactScriptsScriptPath = import_path.default.join(
          appDirectory,
          "/node_modules/.bin/",
          packagePathMatch[1]
        );
      }
    }
  } catch (e) {
    import_node_logger.logger.warn(`Error occurred during react-scripts package path resolving: ${e}`);
  }
  reactScriptsPath = import_path.default.join(reactScriptsScriptPath, "../..");
  const scriptsPkgJson = import_path.default.join(reactScriptsPath, "package.json");
  if (!import_fs.default.existsSync(scriptsPkgJson)) {
    reactScriptsPath = "react-scripts";
  }
  return reactScriptsPath;
}
function isReactScriptsInstalled(requiredVersion = "2.0.0") {
  try {
    const reactScriptsJson = require(import_path.default.join(getReactScriptsPath(), "package.json"));
    return !import_semver.default.gtr(requiredVersion, reactScriptsJson.version);
  } catch (e) {
    return false;
  }
}

// src/framework-preset-cra.ts
var checkForNewPreset = (presetsList) => {
  const hasNewPreset = presetsList.some((preset) => {
    const presetName = typeof preset === "string" ? preset : preset.name;
    return /@storybook(\/|\\)preset-create-react-app/.test(presetName);
  });
  if (!hasNewPreset) {
    import_node_logger2.logger.warn("Storybook support for Create React App is now a separate preset.");
    import_node_logger2.logger.warn(
      "To use the new preset, install `@storybook/preset-create-react-app` and add it to the list of `addons` in your `.storybook/main.js` config file."
    );
    import_node_logger2.logger.warn("The built-in preset has been disabled in Storybook 6.0.");
  }
};
var webpackFinal = (config, { presetsList }) => {
  var _a, _b;
  if (isReactScriptsInstalled()) {
    if (presetsList) {
      checkForNewPreset(presetsList);
    }
  }
  (_b = (_a = config.module) == null ? void 0 : _a.rules) == null ? void 0 : _b.push(
    ...[
      {
        test: /\.m?js$/,
        type: "javascript/auto"
      },
      {
        test: /\.m?js$/,
        resolve: {
          fullySpecified: false
        }
      }
    ]
  );
  return config;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  webpackFinal
});
