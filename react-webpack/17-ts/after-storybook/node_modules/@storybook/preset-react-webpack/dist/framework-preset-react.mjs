import {
  __require,
  define_process_env_default
} from "./chunk-YQ7GSRLJ.mjs";

// src/framework-preset-react.ts
import path from "path";
import ReactRefreshWebpackPlugin from "@pmmmwh/react-refresh-webpack-plugin";
import { logger } from "@storybook/node-logger";
var useFastRefresh = async (options) => {
  const isDevelopment = options.configType === "DEVELOPMENT";
  const framework = await options.presets.apply("framework");
  const reactOptions = typeof framework === "object" ? framework.options : {};
  return isDevelopment && (reactOptions.fastRefresh || define_process_env_default.FAST_REFRESH === "true");
};
var babel = async (config, options) => {
  if (!await useFastRefresh(options))
    return config;
  return {
    ...config,
    plugins: [
      [__require.resolve("react-refresh/babel"), {}, "storybook-react-refresh"],
      ...config.plugins || []
    ]
  };
};
var storybookReactDirName = path.dirname(
  __require.resolve("@storybook/preset-react-webpack/package.json")
);
var context = storybookReactDirName.includes("node_modules") ? path.join(storybookReactDirName, "../../") : path.join(storybookReactDirName, "../../node_modules");
var hasJsxRuntime = () => {
  try {
    __require.resolve("react/jsx-runtime", { paths: [context] });
    return true;
  } catch (e) {
    return false;
  }
};
var babelDefault = async (config) => {
  const presetReactOptions = hasJsxRuntime() ? { runtime: "automatic" } : {};
  return {
    ...config,
    presets: [
      ...config?.presets || [],
      [__require.resolve("@babel/preset-react"), presetReactOptions]
    ],
    plugins: [...config?.plugins || [], __require.resolve("babel-plugin-add-react-displayname")]
  };
};
var webpackFinal = async (config, options) => {
  if (!await useFastRefresh(options))
    return config;
  const hasReactRefresh = !!config.plugins?.find(
    (p) => p.constructor.name === "ReactRefreshPlugin"
  );
  if (hasReactRefresh) {
    logger.warn("=> React refresh is already set. You don't need to set the option");
    return config;
  }
  logger.info("=> Using React fast refresh");
  return {
    ...config,
    plugins: [
      ...config.plugins || [],
      new ReactRefreshWebpackPlugin({
        overlay: {
          sockIntegration: "whm"
        }
      })
    ]
  };
};
export {
  babel,
  babelDefault,
  webpackFinal
};
