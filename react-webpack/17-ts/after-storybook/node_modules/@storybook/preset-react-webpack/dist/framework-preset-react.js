"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/framework-preset-react.ts
var framework_preset_react_exports = {};
__export(framework_preset_react_exports, {
  babel: () => babel,
  babelDefault: () => babelDefault,
  webpackFinal: () => webpackFinal
});
module.exports = __toCommonJS(framework_preset_react_exports);
var import_path = __toESM(require("path"));
var import_react_refresh_webpack_plugin = __toESM(require("@pmmmwh/react-refresh-webpack-plugin"));
var import_node_logger = require("@storybook/node-logger");
var useFastRefresh = async (options) => {
  const isDevelopment = options.configType === "DEVELOPMENT";
  const framework = await options.presets.apply("framework");
  const reactOptions = typeof framework === "object" ? framework.options : {};
  return isDevelopment && (reactOptions.fastRefresh || process.env.FAST_REFRESH === "true");
};
var babel = async (config, options) => {
  if (!await useFastRefresh(options))
    return config;
  return {
    ...config,
    plugins: [
      [require.resolve("react-refresh/babel"), {}, "storybook-react-refresh"],
      ...config.plugins || []
    ]
  };
};
var storybookReactDirName = import_path.default.dirname(
  require.resolve("@storybook/preset-react-webpack/package.json")
);
var context = storybookReactDirName.includes("node_modules") ? import_path.default.join(storybookReactDirName, "../../") : import_path.default.join(storybookReactDirName, "../../node_modules");
var hasJsxRuntime = () => {
  try {
    require.resolve("react/jsx-runtime", { paths: [context] });
    return true;
  } catch (e) {
    return false;
  }
};
var babelDefault = async (config) => {
  const presetReactOptions = hasJsxRuntime() ? { runtime: "automatic" } : {};
  return {
    ...config,
    presets: [
      ...(config == null ? void 0 : config.presets) || [],
      [require.resolve("@babel/preset-react"), presetReactOptions]
    ],
    plugins: [...(config == null ? void 0 : config.plugins) || [], require.resolve("babel-plugin-add-react-displayname")]
  };
};
var webpackFinal = async (config, options) => {
  var _a;
  if (!await useFastRefresh(options))
    return config;
  const hasReactRefresh = !!((_a = config.plugins) == null ? void 0 : _a.find(
    (p) => p.constructor.name === "ReactRefreshPlugin"
  ));
  if (hasReactRefresh) {
    import_node_logger.logger.warn("=> React refresh is already set. You don't need to set the option");
    return config;
  }
  import_node_logger.logger.info("=> Using React fast refresh");
  return {
    ...config,
    plugins: [
      ...config.plugins || [],
      new import_react_refresh_webpack_plugin.default({
        overlay: {
          sockIntegration: "whm"
        }
      })
    ]
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  babel,
  babelDefault,
  webpackFinal
});
