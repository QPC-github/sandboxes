"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  bail: () => bail,
  build: () => build,
  compilation: () => compilation,
  corePresets: () => corePresets,
  executor: () => executor,
  getConfig: () => getConfig,
  overridePresets: () => overridePresets,
  start: () => start
});
module.exports = __toCommonJS(src_exports);
var import_path3 = require("path");
var import_fs_extra3 = require("fs-extra");
var import_express = __toESM(require("express"));
var import_node_logger = require("@storybook/node-logger");
var import_esbuild_plugin_global_externals = require("@fal-works/esbuild-plugin-global-externals");
var import_esbuild_plugin_pnp = require("@yarnpkg/esbuild-plugin-pnp");
var import_esbuild_plugin_alias = __toESM(require("esbuild-plugin-alias"));

// src/utils/template.ts
var import_path = __toESM(require("path"));
var import_fs_extra = require("fs-extra");
var import_ejs = require("ejs");
var getTemplatePath = async (template) => {
  return (0, import_path.join)(
    (0, import_path.dirname)(require.resolve("@storybook/builder-manager/package.json")),
    "templates",
    template
  );
};
var readTemplate = async (template) => {
  const path2 = await getTemplatePath(template);
  return (0, import_fs_extra.readFile)(path2, "utf8");
};
var renderHTML = async (template, title, customHead, cssFiles, jsFiles, features, refs, logLevel, docsOptions, { versionCheck, releaseNotesData, docsMode, previewUrl, serverChannelUrl }) => {
  const customHeadRef = await customHead;
  const titleRef = await title;
  const templateRef = await template;
  return (0, import_ejs.render)(templateRef, {
    title: titleRef ? `${titleRef} - Storybook` : "Storybook",
    files: { js: jsFiles, css: cssFiles },
    globals: {
      FEATURES: JSON.stringify(await features, null, 2),
      REFS: JSON.stringify(await refs, null, 2),
      LOGLEVEL: JSON.stringify(await logLevel, null, 2),
      DOCS_OPTIONS: JSON.stringify(await docsOptions, null, 2),
      VERSIONCHECK: JSON.stringify(JSON.stringify(versionCheck), null, 2),
      RELEASE_NOTES_DATA: JSON.stringify(JSON.stringify(releaseNotesData), null, 2),
      PREVIEW_URL: JSON.stringify(previewUrl, null, 2),
      SERVER_CHANNEL_URL: JSON.stringify(serverChannelUrl, null, 2)
    },
    head: customHeadRef ? await (0, import_fs_extra.readFile)(customHeadRef, "utf8") : ""
  });
};

// src/utils/globals.ts
var import_globals = require("@storybook/ui/dist/globals");

// src/utils/data.ts
var import_path2 = require("path");
var import_core_common = require("@storybook/core-common");

// src/utils/safeResolve.ts
var safeResolve = (path2) => {
  try {
    return Promise.resolve(require.resolve(path2));
  } catch (e) {
    return Promise.resolve(false);
  }
};

// src/utils/data.ts
var getData = async (options) => {
  const refs = (0, import_core_common.getRefs)(options);
  const features = options.presets.apply("features");
  const logLevel = options.presets.apply("logLevel");
  const title = options.presets.apply("title");
  const docsOptions = options.presets.apply("docs", {});
  const template = readTemplate("template.ejs");
  const customHead = safeResolve((0, import_path2.join)(options.configDir, "manager-head.html"));
  const [instance, config] = await Promise.all([
    executor.get(),
    getConfig(options)
  ]);
  return {
    refs,
    features,
    title,
    docsOptions,
    template,
    customHead,
    instance,
    config,
    logLevel
  };
};

// src/utils/files.ts
var import_fs_extra2 = require("fs-extra");
async function readOrderedFiles(addonsDir) {
  var _a, _b;
  const files = await Promise.all(
    ((_b = (_a = compilation) == null ? void 0 : _a.outputFiles) == null ? void 0 : _b.map(async (file) => {
      await (0, import_fs_extra2.ensureFile)(file.path).then(() => (0, import_fs_extra2.writeFile)(file.path, file.contents));
      return file.path.replace(addonsDir, "./sb-addons");
    })) || []
  );
  const jsFiles = files.filter((file) => file.endsWith(".mjs"));
  const cssFiles = files.filter((file) => file.endsWith(".css"));
  return { cssFiles, jsFiles };
}

// src/index.ts
var compilation;
var asyncIterator;
var getConfig = async (options) => {
  const [addonsEntryPoints, customManagerEntryPoint, tsconfigPath] = await Promise.all([
    options.presets.apply("managerEntries", []),
    safeResolve((0, import_path3.join)(options.configDir, "manager")),
    getTemplatePath("addon.tsconfig.json")
  ]);
  return {
    entryPoints: customManagerEntryPoint ? [...addonsEntryPoints, customManagerEntryPoint] : addonsEntryPoints,
    outdir: (0, import_path3.join)(options.outputDir || "./", "sb-addons"),
    format: "esm",
    write: false,
    outExtension: { ".js": ".mjs" },
    loader: {
      ".js": "jsx",
      ".png": "dataurl",
      ".gif": "dataurl",
      ".jpg": "dataurl",
      ".jpeg": "dataurl",
      ".svg": "dataurl",
      ".webp": "dataurl",
      ".webm": "dataurl"
    },
    target: ["chrome100"],
    platform: "browser",
    bundle: true,
    minify: false,
    sourcemap: true,
    jsxFactory: "React.createElement",
    jsxFragment: "React.Fragment",
    jsx: "transform",
    jsxImportSource: "react",
    tsconfig: tsconfigPath,
    legalComments: "external",
    plugins: [
      (0, import_esbuild_plugin_alias.default)({
        process: require.resolve("process/browser.js"),
        util: require.resolve("util/util.js"),
        assert: require.resolve("browser-assert")
      }),
      (0, import_esbuild_plugin_global_externals.globalExternals)(import_globals.definitions),
      (0, import_esbuild_plugin_pnp.pnpPlugin)()
    ],
    define: {
      "process.env.NODE_ENV": "'production'",
      "process.env": "{}",
      global: "window",
      module: "{}"
    }
  };
};
var executor = {
  get: async () => {
    const { build: build2 } = await import("esbuild");
    return build2;
  }
};
var starter = async function* starterGeneratorFn({
  startTime,
  options,
  router
}) {
  import_node_logger.logger.info("=> Starting manager..");
  const { config, customHead, features, instance, refs, template, title, logLevel, docsOptions } = await getData(options);
  yield;
  const addonsDir = config.outdir;
  await (0, import_fs_extra3.remove)(addonsDir);
  yield;
  compilation = await instance({
    ...config,
    watch: true
  });
  yield;
  const coreDirOrigin = (0, import_path3.join)((0, import_path3.dirname)(require.resolve("@storybook/ui/package.json")), "dist");
  router.use(`/sb-addons`, import_express.default.static(addonsDir));
  router.use(`/sb-manager`, import_express.default.static(coreDirOrigin));
  const { cssFiles, jsFiles } = await readOrderedFiles(addonsDir);
  yield;
  const html = await renderHTML(
    template,
    title,
    customHead,
    cssFiles,
    jsFiles,
    features,
    refs,
    logLevel,
    docsOptions,
    options
  );
  yield;
  router.use(`/`, ({ path: path2 }, res, next) => {
    if (path2 === "/") {
      res.status(200).send(html);
    } else {
      next();
    }
  });
  return {
    bail,
    stats: {
      toJson: () => ({})
    },
    totalTime: process.hrtime(startTime)
  };
};
var builder = async function* builderGeneratorFn({ startTime, options }) {
  if (!options.outputDir) {
    throw new Error("outputDir is required");
  }
  import_node_logger.logger.info("=> Building manager..");
  const { config, customHead, features, instance, refs, template, title, logLevel, docsOptions } = await getData(options);
  yield;
  const addonsDir = config.outdir;
  const coreDirOrigin = (0, import_path3.join)((0, import_path3.dirname)(require.resolve("@storybook/ui/package.json")), "dist");
  const coreDirTarget = (0, import_path3.join)(options.outputDir, `sb-manager`);
  compilation = await instance({
    ...config,
    minify: true,
    watch: false
  });
  yield;
  const managerFiles = (0, import_fs_extra3.copy)(coreDirOrigin, coreDirTarget);
  const { cssFiles, jsFiles } = await readOrderedFiles(addonsDir);
  yield;
  const html = await renderHTML(
    template,
    title,
    customHead,
    cssFiles,
    jsFiles,
    features,
    refs,
    logLevel,
    docsOptions,
    options
  );
  await Promise.all([
    (0, import_fs_extra3.writeFile)((0, import_path3.join)(options.outputDir, "index.html"), html),
    managerFiles
  ]);
  import_node_logger.logger.trace({ message: "=> Manager built", time: process.hrtime(startTime) });
  return {
    toJson: () => ({})
  };
};
var bail = async () => {
  if (asyncIterator) {
    try {
      await asyncIterator.throw(new Error());
    } catch (e) {
    }
  }
  if (compilation && compilation.stop) {
    try {
      compilation.stop();
      import_node_logger.logger.warn("Force closed manager build");
    } catch (err) {
      import_node_logger.logger.warn("Unable to close manager build!");
    }
  }
};
var start = async (options) => {
  asyncIterator = starter(options);
  let result;
  do {
    result = await asyncIterator.next();
  } while (!result.done);
  return result.value;
};
var build = async (options) => {
  asyncIterator = builder(options);
  let result;
  do {
    result = await asyncIterator.next();
  } while (!result.done);
  return result.value;
};
var corePresets = [];
var overridePresets = [];
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  bail,
  build,
  compilation,
  corePresets,
  executor,
  getConfig,
  overridePresets,
  start
});
