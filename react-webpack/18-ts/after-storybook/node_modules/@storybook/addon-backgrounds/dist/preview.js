var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/preview.tsx
var preview_exports = {};
__export(preview_exports, {
  decorators: () => decorators,
  parameters: () => parameters
});
module.exports = __toCommonJS(preview_exports);

// src/decorators/withBackground.ts
var import_addons = require("@storybook/addons");

// src/constants.ts
var ADDON_ID = "storybook/background";
var PARAM_KEY = "backgrounds";
var EVENTS = {
  UPDATE: `${ADDON_ID}/update`
};

// src/helpers/index.ts
var import_global = __toESM(require("global"));
var import_ts_dedent = require("ts-dedent");
var import_client_logger = require("@storybook/client-logger");
var { document, window } = import_global.default;
var isReduceMotionEnabled = () => {
  const prefersReduceMotion = window.matchMedia("(prefers-reduced-motion: reduce)");
  return prefersReduceMotion.matches;
};
var getBackgroundColorByName = (currentSelectedValue, backgrounds = [], defaultName) => {
  if (currentSelectedValue === "transparent") {
    return "transparent";
  }
  if (backgrounds.find((background) => background.value === currentSelectedValue)) {
    return currentSelectedValue;
  }
  const defaultBackground = backgrounds.find((background) => background.name === defaultName);
  if (defaultBackground) {
    return defaultBackground.value;
  }
  if (defaultName) {
    const availableColors = backgrounds.map((background) => background.name).join(", ");
    import_client_logger.logger.warn(
      import_ts_dedent.dedent`
        Backgrounds Addon: could not find the default color "${defaultName}".
        These are the available colors for your story based on your configuration:
        ${availableColors}.
      `
    );
  }
  return "transparent";
};
var clearStyles = (selector) => {
  const selectors = Array.isArray(selector) ? selector : [selector];
  selectors.forEach(clearStyle);
};
var clearStyle = (selector) => {
  const element = document.getElementById(selector);
  if (element) {
    element.parentElement.removeChild(element);
  }
};
var addGridStyle = (selector, css) => {
  const existingStyle = document.getElementById(selector);
  if (existingStyle) {
    if (existingStyle.innerHTML !== css) {
      existingStyle.innerHTML = css;
    }
  } else {
    const style = document.createElement("style");
    style.setAttribute("id", selector);
    style.innerHTML = css;
    document.head.appendChild(style);
  }
};
var addBackgroundStyle = (selector, css, storyId) => {
  const existingStyle = document.getElementById(selector);
  if (existingStyle) {
    if (existingStyle.innerHTML !== css) {
      existingStyle.innerHTML = css;
    }
  } else {
    const style = document.createElement("style");
    style.setAttribute("id", selector);
    style.innerHTML = css;
    const gridStyleSelector = `addon-backgrounds-grid${storyId ? `-docs-${storyId}` : ""}`;
    const existingGridStyle = document.getElementById(gridStyleSelector);
    if (existingGridStyle) {
      existingGridStyle.parentElement.insertBefore(style, existingGridStyle);
    } else {
      document.head.appendChild(style);
    }
  }
};

// src/decorators/withBackground.ts
var withBackground = (StoryFn, context) => {
  var _a;
  const { globals, parameters: parameters2 } = context;
  const globalsBackgroundColor = (_a = globals[PARAM_KEY]) == null ? void 0 : _a.value;
  const backgroundsConfig = parameters2[PARAM_KEY];
  const selectedBackgroundColor = (0, import_addons.useMemo)(() => {
    if (backgroundsConfig.disable) {
      return "transparent";
    }
    return getBackgroundColorByName(
      globalsBackgroundColor,
      backgroundsConfig.values,
      backgroundsConfig.default
    );
  }, [backgroundsConfig, globalsBackgroundColor]);
  const isActive = (0, import_addons.useMemo)(
    () => selectedBackgroundColor && selectedBackgroundColor !== "transparent",
    [selectedBackgroundColor]
  );
  const selector = context.viewMode === "docs" ? `#anchor--${context.id} .docs-story` : ".sb-show-main";
  const backgroundStyles = (0, import_addons.useMemo)(() => {
    const transitionStyle = "transition: background-color 0.3s;";
    return `
      ${selector} {
        background: ${selectedBackgroundColor} !important;
        ${isReduceMotionEnabled() ? "" : transitionStyle}
      }
    `;
  }, [selectedBackgroundColor, selector]);
  (0, import_addons.useEffect)(() => {
    const selectorId = context.viewMode === "docs" ? `addon-backgrounds-docs-${context.id}` : `addon-backgrounds-color`;
    if (!isActive) {
      clearStyles(selectorId);
      return;
    }
    addBackgroundStyle(
      selectorId,
      backgroundStyles,
      context.viewMode === "docs" ? context.id : null
    );
  }, [isActive, backgroundStyles, context]);
  return StoryFn();
};

// src/decorators/withGrid.ts
var import_ts_dedent2 = require("ts-dedent");
var import_util_deprecate = __toESM(require("util-deprecate"));
var import_addons2 = require("@storybook/addons");
var deprecatedCellSizeWarning = (0, import_util_deprecate.default)(
  () => {
  },
  import_ts_dedent2.dedent`
    Backgrounds Addon: The cell size parameter has been changed.

    - parameters.grid.cellSize should now be parameters.backgrounds.grid.cellSize
    See https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#deprecated-grid-parameter
  `
);
var withGrid = (StoryFn, context) => {
  var _a, _b;
  const { globals, parameters: parameters2 } = context;
  const gridParameters = parameters2[PARAM_KEY].grid;
  const isActive = ((_a = globals[PARAM_KEY]) == null ? void 0 : _a.grid) === true && gridParameters.disable !== true;
  const { cellAmount, cellSize, opacity } = gridParameters;
  const isInDocs = context.viewMode === "docs";
  let gridSize;
  if ((_b = parameters2.grid) == null ? void 0 : _b.cellSize) {
    gridSize = parameters2.grid.cellSize;
    deprecatedCellSizeWarning();
  } else {
    gridSize = cellSize;
  }
  const isLayoutPadded = parameters2.layout === void 0 || parameters2.layout === "padded";
  const defaultOffset = isLayoutPadded ? 16 : 0;
  const offsetX = gridParameters.offsetX ?? (isInDocs ? 20 : defaultOffset);
  const offsetY = gridParameters.offsetY ?? (isInDocs ? 20 : defaultOffset);
  const gridStyles = (0, import_addons2.useMemo)(() => {
    const selector = context.viewMode === "docs" ? `#anchor--${context.id} .docs-story` : ".sb-show-main";
    const backgroundSize = [
      `${gridSize * cellAmount}px ${gridSize * cellAmount}px`,
      `${gridSize * cellAmount}px ${gridSize * cellAmount}px`,
      `${gridSize}px ${gridSize}px`,
      `${gridSize}px ${gridSize}px`
    ].join(", ");
    return `
      ${selector} {
        background-size: ${backgroundSize} !important;
        background-position: ${offsetX}px ${offsetY}px, ${offsetX}px ${offsetY}px, ${offsetX}px ${offsetY}px, ${offsetX}px ${offsetY}px !important;
        background-blend-mode: difference !important;
        background-image: linear-gradient(rgba(130, 130, 130, ${opacity}) 1px, transparent 1px),
         linear-gradient(90deg, rgba(130, 130, 130, ${opacity}) 1px, transparent 1px),
         linear-gradient(rgba(130, 130, 130, ${opacity / 2}) 1px, transparent 1px),
         linear-gradient(90deg, rgba(130, 130, 130, ${opacity / 2}) 1px, transparent 1px) !important;
      }
    `;
  }, [gridSize]);
  (0, import_addons2.useEffect)(() => {
    const selectorId = context.viewMode === "docs" ? `addon-backgrounds-grid-docs-${context.id}` : `addon-backgrounds-grid`;
    if (!isActive) {
      clearStyles(selectorId);
      return;
    }
    addGridStyle(selectorId, gridStyles);
  }, [isActive, gridStyles, context]);
  return StoryFn();
};

// src/preview.tsx
var decorators = [withGrid, withBackground];
var parameters = {
  backgrounds: {
    grid: {
      cellSize: 20,
      opacity: 0.5,
      cellAmount: 5
    },
    values: [
      { name: "light", value: "#F8F8F8" },
      { name: "dark", value: "#333333" }
    ]
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  decorators,
  parameters
});
