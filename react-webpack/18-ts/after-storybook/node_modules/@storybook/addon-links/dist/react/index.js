"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/react/index.ts
var react_exports = {};
__export(react_exports, {
  default: () => react_default
});
module.exports = __toCommonJS(react_exports);

// src/react/components/link.tsx
var import_react = __toESM(require("react"));

// src/utils.ts
var import_global = __toESM(require("global"));
var import_addons = require("@storybook/addons");
var import_core_events = require("@storybook/core-events");
var import_csf = require("@storybook/csf");

// src/constants.ts
var ADDON_ID = "storybook/links";
var PARAM_KEY = `links`;
var constants_default = {
  NAVIGATE: `${ADDON_ID}/navigate`,
  REQUEST: `${ADDON_ID}/request`,
  RECEIVE: `${ADDON_ID}/receive`
};

// src/utils.ts
var { document, HTMLElement } = import_global.default;
function parseQuery(queryString) {
  const query = {};
  const pairs = (queryString[0] === "?" ? queryString.substring(1) : queryString).split("&").filter(Boolean);
  for (let i = 0; i < pairs.length; i++) {
    const pair = pairs[i].split("=");
    query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || "");
  }
  return query;
}
var navigate = (params) => import_addons.addons.getChannel().emit(import_core_events.SELECT_STORY, params);
var hrefTo = (title, name) => {
  return new Promise((resolve) => {
    const { location } = document;
    const query = parseQuery(location.search);
    const existingId = [].concat(query.id)[0];
    const titleToLink = title || existingId.split("--", 2)[0];
    const id = (0, import_csf.toId)(titleToLink, name);
    const url = `${location.origin + location.pathname}?${Object.entries({ ...query, id }).map((item) => `${item[0]}=${item[1]}`).join("&")}`;
    resolve(url);
  });
};
var linksListener = (e) => {
  const { target } = e;
  if (!(target instanceof HTMLElement)) {
    return;
  }
  const element = target;
  const { sbKind: kind, sbStory: story } = element.dataset;
  if (kind || story) {
    e.preventDefault();
    navigate({ kind, story });
  }
};
var hasListener = false;
var on = () => {
  if (!hasListener) {
    hasListener = true;
    document.addEventListener("click", linksListener);
  }
};
var off = () => {
  if (hasListener) {
    hasListener = false;
    document.removeEventListener("click", linksListener);
  }
};
var withLinks = (0, import_addons.makeDecorator)({
  name: "withLinks",
  parameterName: PARAM_KEY,
  wrapper: (getStory, context) => {
    on();
    import_addons.addons.getChannel().once(import_core_events.STORY_CHANGED, off);
    return getStory(context);
  }
});

// src/react/components/link.tsx
var LEFT_BUTTON = 0;
var isPlainLeftClick = (e) => e.button === LEFT_BUTTON && !e.altKey && !e.ctrlKey && !e.metaKey && !e.shiftKey;
var cancelled = (e, cb = (_e) => {
}) => {
  if (isPlainLeftClick(e)) {
    e.preventDefault();
    cb(e);
  }
};
var LinkTo = class extends import_react.PureComponent {
  constructor() {
    super(...arguments);
    this.state = {
      href: "/"
    };
    this.updateHref = async () => {
      const { kind, story } = this.props;
      if (kind && story) {
        const href = await hrefTo(kind, story);
        this.setState({ href });
      }
    };
    this.handleClick = () => {
      const { kind, story } = this.props;
      if (kind && story) {
        navigate({ kind, story });
      }
    };
  }
  componentDidMount() {
    this.updateHref();
  }
  componentDidUpdate(prevProps) {
    const { kind, story } = this.props;
    if (prevProps.kind !== kind || prevProps.story !== story) {
      this.updateHref();
    }
  }
  render() {
    const { kind, story, children, ...rest } = this.props;
    const { href } = this.state;
    return /* @__PURE__ */ import_react.default.createElement("a", {
      href,
      onClick: (e) => cancelled(e, this.handleClick),
      ...rest
    }, children);
  }
};
LinkTo.defaultProps = {
  kind: null,
  story: null,
  children: void 0
};

// src/react/index.ts
var react_default = LinkTo;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
