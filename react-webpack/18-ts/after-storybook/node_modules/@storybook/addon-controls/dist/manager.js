"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// src/manager.tsx
var import_react2 = __toESM(require("react"));
var import_addons = require("@storybook/addons");
var import_components = require("@storybook/components");
var import_api2 = require("@storybook/api");

// src/ControlsPanel.tsx
var import_react = __toESM(require("react"));
var import_api = require("@storybook/api");
var import_blocks = require("@storybook/blocks");

// src/constants.ts
var ADDON_ID = "addon-controls";
var PARAM_KEY = "controls";

// src/ControlsPanel.tsx
var ControlsPanel = () => {
  const [args, updateArgs, resetArgs] = (0, import_api.useArgs)();
  const [globals] = (0, import_api.useGlobals)();
  const rows = (0, import_api.useArgTypes)();
  const isArgsStory = (0, import_api.useParameter)("__isArgsStory", false);
  const {
    expanded,
    sort,
    presetColors,
    hideNoControlsWarning = false
  } = (0, import_api.useParameter)(PARAM_KEY, {});
  const { path } = (0, import_api.useStorybookState)();
  const hasControls = Object.values(rows).some((arg) => arg == null ? void 0 : arg.control);
  const showWarning = !(hasControls && isArgsStory) && !hideNoControlsWarning;
  const withPresetColors = Object.entries(rows).reduce((acc, [key, arg]) => {
    var _a, _b;
    if (((_a = arg == null ? void 0 : arg.control) == null ? void 0 : _a.type) !== "color" || ((_b = arg == null ? void 0 : arg.control) == null ? void 0 : _b.presetColors))
      acc[key] = arg;
    else
      acc[key] = { ...arg, control: { ...arg.control, presetColors } };
    return acc;
  }, {});
  return /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, showWarning && /* @__PURE__ */ import_react.default.createElement(import_blocks.NoControlsWarning, null), /* @__PURE__ */ import_react.default.createElement(import_blocks.PureArgsTable, {
    ...{
      key: path,
      compact: !expanded && hasControls,
      rows: withPresetColors,
      args,
      globals,
      updateArgs,
      resetArgs,
      inAddonPanel: true,
      sort
    }
  }));
};

// src/manager.tsx
import_addons.addons.register(ADDON_ID, (api) => {
  import_addons.addons.addPanel(ADDON_ID, {
    title() {
      const rows = (0, import_api2.useArgTypes)();
      const controlsCount = Object.values(rows).filter((argType) => argType == null ? void 0 : argType.control).length;
      const suffix = controlsCount === 0 ? "" : ` (${controlsCount})`;
      return `Controls${suffix}`;
    },
    type: import_addons.types.PANEL,
    paramKey: PARAM_KEY,
    render: ({ key, active }) => {
      if (!active || !api.getCurrentStoryData()) {
        return null;
      }
      return /* @__PURE__ */ import_react2.default.createElement(import_components.AddonPanel, {
        key,
        active
      }, /* @__PURE__ */ import_react2.default.createElement(ControlsPanel, null));
    }
  });
});
