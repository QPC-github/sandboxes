import {
  __require
} from "./chunk-YQ7GSRLJ.mjs";

// src/framework-preset-react-docs.ts
import ReactDocgenTypescriptPlugin from "@storybook/react-docgen-typescript-plugin";
import { hasDocsOrControls } from "@storybook/docs-tools";
var babel = async (config, options) => {
  if (!hasDocsOrControls(options))
    return config;
  const typescriptOptions = await options.presets.apply(
    "typescript",
    {}
  );
  const { reactDocgen } = typescriptOptions || {};
  if (typeof reactDocgen !== "string") {
    return config;
  }
  return {
    ...config,
    overrides: [
      ...config?.overrides || [],
      {
        test: reactDocgen === "react-docgen" ? /\.(cjs|mjs|tsx?|jsx?)$/ : /\.(cjs|mjs|jsx?)$/,
        plugins: [[__require.resolve("babel-plugin-react-docgen")]]
      }
    ]
  };
};
var webpackFinal = async (config, options) => {
  if (!hasDocsOrControls(options))
    return config;
  const typescriptOptions = await options.presets.apply(
    "typescript",
    {}
  );
  const { reactDocgen, reactDocgenTypescriptOptions } = typescriptOptions || {};
  if (reactDocgen !== "react-docgen-typescript") {
    return config;
  }
  return {
    ...config,
    plugins: [
      ...config.plugins || [],
      new ReactDocgenTypescriptPlugin({
        ...reactDocgenTypescriptOptions,
        savePropValueAsString: true
      })
    ]
  };
};
export {
  babel,
  webpackFinal
};
