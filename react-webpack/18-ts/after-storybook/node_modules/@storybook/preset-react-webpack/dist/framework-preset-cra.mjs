import {
  __require
} from "./chunk-YQ7GSRLJ.mjs";

// src/framework-preset-cra.ts
import { logger as logger2 } from "@storybook/node-logger";

// src/cra-config.ts
import fs from "fs";
import path from "path";
import semver from "@storybook/semver";
import { logger } from "@storybook/node-logger";
var appDirectory = fs.realpathSync(process.cwd());
var reactScriptsPath;
function getReactScriptsPath({ noCache } = {}) {
  if (reactScriptsPath && !noCache)
    return reactScriptsPath;
  let reactScriptsScriptPath = fs.realpathSync(
    path.join(appDirectory, "/node_modules/.bin/react-scripts")
  );
  try {
    const pathIsNotResolved = /node_modules[\\/]\.bin[\\/]react-scripts/i.test(
      reactScriptsScriptPath
    );
    if (pathIsNotResolved) {
      const content = fs.readFileSync(reactScriptsScriptPath, "utf8");
      const packagePathMatch = content.match(
        /"\$basedir[\\/]([^\s]+?[\\/]bin[\\/]react-scripts\.js")/i
      );
      if (packagePathMatch && packagePathMatch.length > 1) {
        reactScriptsScriptPath = path.join(
          appDirectory,
          "/node_modules/.bin/",
          packagePathMatch[1]
        );
      }
    }
  } catch (e) {
    logger.warn(`Error occurred during react-scripts package path resolving: ${e}`);
  }
  reactScriptsPath = path.join(reactScriptsScriptPath, "../..");
  const scriptsPkgJson = path.join(reactScriptsPath, "package.json");
  if (!fs.existsSync(scriptsPkgJson)) {
    reactScriptsPath = "react-scripts";
  }
  return reactScriptsPath;
}
function isReactScriptsInstalled(requiredVersion = "2.0.0") {
  try {
    const reactScriptsJson = __require(path.join(getReactScriptsPath(), "package.json"));
    return !semver.gtr(requiredVersion, reactScriptsJson.version);
  } catch (e) {
    return false;
  }
}

// src/framework-preset-cra.ts
var checkForNewPreset = (presetsList) => {
  const hasNewPreset = presetsList.some((preset) => {
    const presetName = typeof preset === "string" ? preset : preset.name;
    return /@storybook(\/|\\)preset-create-react-app/.test(presetName);
  });
  if (!hasNewPreset) {
    logger2.warn("Storybook support for Create React App is now a separate preset.");
    logger2.warn(
      "To use the new preset, install `@storybook/preset-create-react-app` and add it to the list of `addons` in your `.storybook/main.js` config file."
    );
    logger2.warn("The built-in preset has been disabled in Storybook 6.0.");
  }
};
var webpackFinal = (config, { presetsList }) => {
  if (isReactScriptsInstalled()) {
    if (presetsList) {
      checkForNewPreset(presetsList);
    }
  }
  config.module?.rules?.push(
    ...[
      {
        test: /\.m?js$/,
        type: "javascript/auto"
      },
      {
        test: /\.m?js$/,
        resolve: {
          fullySpecified: false
        }
      }
    ]
  );
  return config;
};
export {
  webpackFinal
};
