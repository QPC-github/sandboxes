import {
  getControlId,
  getControlSetterButtonId
} from "./chunk-XODJ6PPZ.mjs";

// src/components/Source.tsx
import React2 from "react";
import { styled as styled2, ThemeProvider, convert, themes } from "@storybook/theming";
import { SyntaxHighlighter } from "@storybook/components";

// src/components/EmptyBlock.tsx
import React from "react";
import { transparentize } from "polished";
import { styled } from "@storybook/theming";
import { withReset } from "@storybook/components";
var Wrapper = styled.div(withReset, ({ theme }) => ({
  backgroundColor: theme.base === "light" ? "rgba(0,0,0,.01)" : "rgba(255,255,255,.01)",
  borderRadius: theme.appBorderRadius,
  border: `1px dashed ${theme.appBorderColor}`,
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  padding: 20,
  margin: "25px 0 40px",
  color: transparentize(0.3, theme.color.defaultText),
  fontSize: theme.typography.size.s2
}));
var EmptyBlock = (props) => /* @__PURE__ */ React.createElement(Wrapper, {
  ...props,
  className: "docblock-emptyblock"
});

// src/components/Source.tsx
var StyledSyntaxHighlighter = styled2(SyntaxHighlighter)(
  ({ theme }) => ({
    fontSize: `${theme.typography.size.s2 - 1}px`,
    lineHeight: "19px",
    margin: "25px 0 40px",
    borderRadius: theme.appBorderRadius,
    boxShadow: theme.base === "light" ? "rgba(0, 0, 0, 0.10) 0 1px 3px 0" : "rgba(0, 0, 0, 0.20) 0 2px 5px 0",
    "pre.prismjs": {
      padding: 20,
      background: "inherit"
    }
  })
);
var SourceSkeletonWrapper = styled2.div(({ theme }) => ({
  background: theme.background.content,
  borderRadius: theme.appBorderRadius,
  border: `1px solid ${theme.appBorderColor}`,
  boxShadow: theme.base === "light" ? "rgba(0, 0, 0, 0.10) 0 1px 3px 0" : "rgba(0, 0, 0, 0.20) 0 2px 5px 0",
  margin: "25px 0 40px",
  padding: "20px 20px 20px 22px"
}));
var SourceSkeletonPlaceholder = styled2.div(({ theme }) => ({
  animation: `${theme.animation.glow} 1.5s ease-in-out infinite`,
  background: theme.appBorderColor,
  height: 17,
  marginTop: 1,
  width: "60%",
  [`&:first-child`]: {
    margin: 0
  }
}));
var SourceSkeleton = () => /* @__PURE__ */ React2.createElement(SourceSkeletonWrapper, null, /* @__PURE__ */ React2.createElement(SourceSkeletonPlaceholder, null), /* @__PURE__ */ React2.createElement(SourceSkeletonPlaceholder, {
  style: { width: "80%" }
}), /* @__PURE__ */ React2.createElement(SourceSkeletonPlaceholder, {
  style: { width: "30%" }
}), /* @__PURE__ */ React2.createElement(SourceSkeletonPlaceholder, {
  style: { width: "80%" }
}));
var Source = (props) => {
  const { isLoading, error } = props;
  if (isLoading) {
    return /* @__PURE__ */ React2.createElement(SourceSkeleton, null);
  }
  if (error) {
    return /* @__PURE__ */ React2.createElement(EmptyBlock, null, error);
  }
  const { language, code, dark, format: format2, ...rest } = props;
  const syntaxHighlighter = /* @__PURE__ */ React2.createElement(StyledSyntaxHighlighter, {
    bordered: true,
    copyable: true,
    format: format2,
    language,
    className: "docblock-source",
    ...rest
  }, code);
  if (typeof dark === "undefined") {
    return syntaxHighlighter;
  }
  const overrideTheme = dark ? themes.dark : themes.light;
  return /* @__PURE__ */ React2.createElement(ThemeProvider, {
    theme: convert(overrideTheme)
  }, syntaxHighlighter);
};
Source.defaultProps = {
  format: false
};

// src/components/Description.tsx
import React3 from "react";
import Markdown from "markdown-to-jsx";
import { components, ResetWrapper } from "@storybook/components";
var Description = ({ markdown }) => /* @__PURE__ */ React3.createElement(ResetWrapper, null, /* @__PURE__ */ React3.createElement(Markdown, {
  options: { forceBlock: true, overrides: components }
}, markdown));

// src/components/DocsPage.tsx
import { withReset as withReset2 } from "@storybook/components";
import { styled as styled3 } from "@storybook/theming";
import { transparentize as transparentize2 } from "polished";
import React4 from "react";
var breakpoint = 600;
var Title = styled3.h1(withReset2, ({ theme }) => ({
  color: theme.color.defaultText,
  fontSize: theme.typography.size.m3,
  fontWeight: theme.typography.weight.black,
  lineHeight: "32px",
  [`@media (min-width: ${breakpoint}px)`]: {
    fontSize: theme.typography.size.l1,
    lineHeight: "36px",
    marginBottom: ".5rem"
  }
}));
var Subtitle = styled3.h2(withReset2, ({ theme }) => ({
  fontWeight: theme.typography.weight.regular,
  fontSize: theme.typography.size.s3,
  lineHeight: "20px",
  borderBottom: "none",
  marginBottom: 15,
  [`@media (min-width: ${breakpoint}px)`]: {
    fontSize: theme.typography.size.m1,
    lineHeight: "28px",
    marginBottom: 24
  },
  color: transparentize2(0.25, theme.color.defaultText)
}));
var DocsContent = styled3.div({
  maxWidth: 1e3,
  width: "100%"
});
var DocsWrapper = styled3.div(({ theme }) => ({
  background: theme.background.content,
  display: "flex",
  justifyContent: "center",
  padding: "4rem 20px",
  minHeight: "100vh",
  boxSizing: "border-box",
  [`@media (min-width: ${breakpoint}px)`]: {}
}));

// src/components/Preview.tsx
import React8, {
  Children,
  useCallback,
  useState
} from "react";
import { darken } from "polished";
import { styled as styled5 } from "@storybook/theming";
import global3 from "global";
import { ActionBar, Zoom as Zoom2 } from "@storybook/components";

// src/components/BlockBackgroundStyles.tsx
var getBlockBackgroundStyle = (theme) => ({
  borderRadius: theme.appBorderRadius,
  background: theme.background.content,
  boxShadow: theme.base === "light" ? "rgba(0, 0, 0, 0.10) 0 1px 3px 0" : "rgba(0, 0, 0, 0.20) 0 2px 5px 0",
  border: `1px solid ${theme.appBorderColor}`
});

// src/components/Toolbar.tsx
import React5, { Fragment } from "react";
import { styled as styled4 } from "@storybook/theming";
import {
  FlexBar,
  Icons,
  IconButton,
  IconButtonSkeleton,
  getStoryHref
} from "@storybook/components";
var Zoom = ({ zoom, resetZoom }) => /* @__PURE__ */ React5.createElement(React5.Fragment, null, /* @__PURE__ */ React5.createElement(IconButton, {
  key: "zoomin",
  onClick: (e) => {
    e.preventDefault();
    zoom(0.8);
  },
  title: "Zoom in"
}, /* @__PURE__ */ React5.createElement(Icons, {
  icon: "zoom"
})), /* @__PURE__ */ React5.createElement(IconButton, {
  key: "zoomout",
  onClick: (e) => {
    e.preventDefault();
    zoom(1.25);
  },
  title: "Zoom out"
}, /* @__PURE__ */ React5.createElement(Icons, {
  icon: "zoomout"
})), /* @__PURE__ */ React5.createElement(IconButton, {
  key: "zoomreset",
  onClick: (e) => {
    e.preventDefault();
    resetZoom();
  },
  title: "Reset zoom"
}, /* @__PURE__ */ React5.createElement(Icons, {
  icon: "zoomreset"
})));
var Eject = ({ baseUrl, storyId }) => /* @__PURE__ */ React5.createElement(IconButton, {
  key: "opener",
  href: getStoryHref(baseUrl, storyId),
  target: "_blank",
  title: "Open canvas in new tab"
}, /* @__PURE__ */ React5.createElement(Icons, {
  icon: "share"
}));
var Bar = styled4(FlexBar)({
  position: "absolute",
  left: 0,
  right: 0,
  top: 0,
  transition: "transform .2s linear"
});
var Toolbar = ({
  isLoading,
  storyId,
  baseUrl,
  zoom,
  resetZoom,
  ...rest
}) => /* @__PURE__ */ React5.createElement(Bar, {
  ...rest
}, /* @__PURE__ */ React5.createElement(Fragment, {
  key: "left"
}, isLoading ? [1, 2, 3].map((key) => /* @__PURE__ */ React5.createElement(IconButtonSkeleton, {
  key
})) : /* @__PURE__ */ React5.createElement(Zoom, {
  ...{ zoom, resetZoom }
})), /* @__PURE__ */ React5.createElement(Fragment, {
  key: "right"
}, storyId && (isLoading ? /* @__PURE__ */ React5.createElement(IconButtonSkeleton, null) : /* @__PURE__ */ React5.createElement(Eject, {
  ...{ storyId, baseUrl }
}))));

// src/components/ZoomContext.tsx
import { createContext } from "react";
var ZoomContext = createContext({
  scale: 1
});

// src/components/Story.tsx
import global2 from "global";
import React7, { createElement, Fragment as Fragment2 } from "react";
import { Loader, getStoryHref as getStoryHref2 } from "@storybook/components";

// src/components/IFrame.tsx
import React6, { Component } from "react";
import global from "global";
var { window: globalWindow } = global;
var IFrame = class extends Component {
  constructor() {
    super(...arguments);
    this.iframe = null;
  }
  componentDidMount() {
    const { id } = this.props;
    this.iframe = globalWindow.document.getElementById(id);
  }
  shouldComponentUpdate(nextProps) {
    const { scale } = nextProps;
    if (scale !== this.props.scale) {
      this.setIframeBodyStyle({
        width: `${scale * 100}%`,
        height: `${scale * 100}%`,
        transform: `scale(${1 / scale})`,
        transformOrigin: "top left"
      });
    }
    return false;
  }
  setIframeBodyStyle(style) {
    return Object.assign(this.iframe.contentDocument.body.style, style);
  }
  render() {
    const { id, title, src, allowFullScreen, scale, ...rest } = this.props;
    return /* @__PURE__ */ React6.createElement("iframe", {
      id,
      title,
      src,
      allowFullScreen,
      loading: "lazy",
      ...rest
    });
  }
};

// src/components/Story.tsx
var { PREVIEW_URL } = global2;
var BASE_URL = PREVIEW_URL || "iframe.html";
var MISSING_STORY = (id) => id ? `Story "${id}" doesn't exist.` : "No component or story to display" /* NO_STORY */;
var InlineStory = ({ storyFn, height, id }) => /* @__PURE__ */ React7.createElement(Fragment2, null, height ? /* @__PURE__ */ React7.createElement("style", null, `#story--${id} { min-height: ${height}; transform: translateZ(0); overflow: auto }`) : null, /* @__PURE__ */ React7.createElement(Fragment2, null, storyFn ? createElement(storyFn) : /* @__PURE__ */ React7.createElement(EmptyBlock, null, MISSING_STORY(id))));
var IFrameStory = ({ id, title, height = "500px" }) => /* @__PURE__ */ React7.createElement("div", {
  style: { width: "100%", height }
}, /* @__PURE__ */ React7.createElement(ZoomContext.Consumer, null, ({ scale }) => {
  return /* @__PURE__ */ React7.createElement(IFrame, {
    key: "iframe",
    id: `iframe--${id}`,
    title,
    src: getStoryHref2(BASE_URL, id, { viewMode: "story" }),
    allowFullScreen: true,
    scale,
    style: {
      width: "100%",
      height: "100%",
      border: "0 none"
    }
  });
}));
var Story = ({ children, error, inline, ...props }) => {
  const { id, title, height } = props;
  if (error) {
    return /* @__PURE__ */ React7.createElement(EmptyBlock, null, error);
  }
  return inline ? /* @__PURE__ */ React7.createElement(InlineStory, {
    ...props
  }) : /* @__PURE__ */ React7.createElement(IFrameStory, {
    id,
    title,
    height
  });
};
var StorySkeleton = () => /* @__PURE__ */ React7.createElement(Loader, null);

// src/components/Preview.tsx
var ChildrenContainer = styled5.div(
  ({ isColumn, columns, layout }) => ({
    display: isColumn || !columns ? "block" : "flex",
    position: "relative",
    flexWrap: "wrap",
    overflow: "auto",
    flexDirection: isColumn ? "column" : "row",
    "& .innerZoomElementWrapper > *": isColumn ? {
      width: layout !== "fullscreen" ? "calc(100% - 20px)" : "100%",
      display: "block"
    } : {
      maxWidth: layout !== "fullscreen" ? "calc(100% - 20px)" : "100%",
      display: "inline-block"
    }
  }),
  ({ layout = "padded" }) => layout === "centered" || layout === "padded" ? {
    padding: "30px 20px",
    margin: -10,
    "& .innerZoomElementWrapper > *": {
      width: "auto",
      border: "10px solid transparent!important"
    }
  } : {},
  ({ layout = "padded" }) => layout === "centered" ? {
    display: "flex",
    justifyContent: "center",
    justifyItems: "center",
    alignContent: "center",
    alignItems: "center"
  } : {},
  ({ columns }) => columns && columns > 1 ? { ".innerZoomElementWrapper > *": { minWidth: `calc(100% / ${columns} - 20px)` } } : {}
);
var StyledSource = styled5(Source)(({ theme }) => ({
  margin: 0,
  borderTopLeftRadius: 0,
  borderTopRightRadius: 0,
  borderBottomLeftRadius: theme.appBorderRadius,
  borderBottomRightRadius: theme.appBorderRadius,
  border: "none",
  background: theme.base === "light" ? "rgba(0, 0, 0, 0.85)" : darken(0.05, theme.background.content),
  color: theme.color.lightest,
  button: {
    background: theme.base === "light" ? "rgba(0, 0, 0, 0.85)" : darken(0.05, theme.background.content)
  }
}));
var PreviewContainer = styled5.div(
  ({ theme, withSource, isExpanded }) => ({
    position: "relative",
    overflow: "hidden",
    margin: "25px 0 40px",
    ...getBlockBackgroundStyle(theme),
    borderBottomLeftRadius: withSource && isExpanded && 0,
    borderBottomRightRadius: withSource && isExpanded && 0,
    borderBottomWidth: isExpanded && 0
  }),
  ({ withToolbar }) => withToolbar && { paddingTop: 40 }
);
var getSource = (withSource, expanded, setExpanded) => {
  switch (true) {
    case !!(withSource && withSource.error): {
      return {
        source: null,
        actionItem: {
          title: "No code available",
          className: "docblock-code-toggle docblock-code-toggle--disabled",
          disabled: true,
          onClick: () => setExpanded(false)
        }
      };
    }
    case expanded: {
      return {
        source: /* @__PURE__ */ React8.createElement(StyledSource, {
          ...withSource,
          dark: true
        }),
        actionItem: {
          title: "Hide code",
          className: "docblock-code-toggle docblock-code-toggle--expanded",
          onClick: () => setExpanded(false)
        }
      };
    }
    default: {
      return {
        source: /* @__PURE__ */ React8.createElement(StyledSource, {
          ...withSource,
          dark: true
        }),
        actionItem: {
          title: "Show code",
          className: "docblock-code-toggle",
          onClick: () => setExpanded(true)
        }
      };
    }
  }
};
function getStoryId(children) {
  if (Children.count(children) === 1) {
    const elt = children;
    if (elt.props) {
      return elt.props.id;
    }
  }
  return null;
}
var PositionedToolbar = styled5(Toolbar)({
  position: "absolute",
  top: 0,
  left: 0,
  right: 0,
  height: 40
});
var Relative = styled5.div({
  overflow: "hidden",
  position: "relative"
});
var getLayout = (children) => {
  return children.reduce((result, c) => {
    if (result) {
      return result;
    }
    if (typeof c === "string" || typeof c === "number") {
      return "padded";
    }
    return c.props && c.props.parameters && c.props.parameters.layout || "padded";
  }, void 0);
};
var Preview = ({
  isLoading,
  isColumn,
  columns,
  children,
  withSource,
  withToolbar = false,
  isExpanded = false,
  additionalActions,
  className,
  ...props
}) => {
  const [expanded, setExpanded] = useState(isExpanded);
  const { source, actionItem } = getSource(withSource, expanded, setExpanded);
  const [scale, setScale] = useState(1);
  const previewClasses = [className].concat(["sbdocs", "sbdocs-preview"]);
  const defaultActionItems = withSource ? [actionItem] : [];
  const [additionalActionItems, setAdditionalActionItems] = useState(
    additionalActions ? [...additionalActions] : []
  );
  const actionItems = [...defaultActionItems, ...additionalActionItems];
  const layout = getLayout(Children.count(children) === 1 ? [children] : children);
  const { window: globalWindow5 } = global3;
  const copyToClipboard = useCallback(async (text) => {
    const { createCopyToClipboardFunction } = await import("@storybook/components");
    createCopyToClipboardFunction();
  }, []);
  const onCopyCapture = (e) => {
    e.preventDefault();
    if (additionalActionItems.filter((item) => item.title === "Copied").length === 0) {
      copyToClipboard(source.props.code).then(() => {
        setAdditionalActionItems([
          ...additionalActionItems,
          {
            title: "Copied",
            onClick: () => {
            }
          }
        ]);
        globalWindow5.setTimeout(
          () => setAdditionalActionItems(
            additionalActionItems.filter((item) => item.title !== "Copied")
          ),
          1500
        );
      });
    }
  };
  return /* @__PURE__ */ React8.createElement(PreviewContainer, {
    ...{ withSource, withToolbar },
    ...props,
    className: previewClasses.join(" ")
  }, withToolbar && /* @__PURE__ */ React8.createElement(PositionedToolbar, {
    isLoading,
    border: true,
    zoom: (z) => setScale(scale * z),
    resetZoom: () => setScale(1),
    storyId: getStoryId(children),
    baseUrl: "./iframe.html"
  }), /* @__PURE__ */ React8.createElement(ZoomContext.Provider, {
    value: { scale }
  }, /* @__PURE__ */ React8.createElement(Relative, {
    className: "docs-story",
    onCopyCapture: withSource && onCopyCapture
  }, /* @__PURE__ */ React8.createElement(ChildrenContainer, {
    isColumn: isColumn || !Array.isArray(children),
    columns,
    layout
  }, /* @__PURE__ */ React8.createElement(Zoom2.Element, {
    scale
  }, Array.isArray(children) ? children.map((child, i) => /* @__PURE__ */ React8.createElement("div", {
    key: i
  }, child)) : /* @__PURE__ */ React8.createElement("div", null, children))), /* @__PURE__ */ React8.createElement(ActionBar, {
    actionItems
  }))), withSource && expanded && source);
};
var StyledPreview = styled5(Preview)(() => ({
  ".docs-story": {
    paddingTop: 32,
    paddingBottom: 40
  }
}));
var PreviewSkeleton = () => /* @__PURE__ */ React8.createElement(StyledPreview, {
  isLoading: true,
  withToolbar: true
}, /* @__PURE__ */ React8.createElement(StorySkeleton, null));

// src/components/ArgsTable/ArgsTable.tsx
import React28 from "react";
import pickBy from "lodash/pickBy";
import { styled as styled20 } from "@storybook/theming";
import { opacify as opacify2, transparentize as transparentize6, darken as darken3, lighten as lighten2 } from "polished";
import { includeConditionalArg } from "@storybook/csf";
import { once as once2 } from "@storybook/client-logger";
import { IconButton as IconButton3, Icons as Icons6, Link, ResetWrapper as ResetWrapper2 } from "@storybook/components";

// src/components/ArgsTable/ArgRow.tsx
import React26 from "react";
import Markdown2 from "markdown-to-jsx";
import { transparentize as transparentize4 } from "polished";
import { styled as styled18 } from "@storybook/theming";
import { codeCommon as codeCommon3 } from "@storybook/components";

// src/components/ArgsTable/ArgJsDoc.tsx
import React9 from "react";
import { styled as styled6 } from "@storybook/theming";
import { codeCommon } from "@storybook/components";
var Table = styled6.table(({ theme }) => ({
  "&&": {
    borderCollapse: "collapse",
    borderSpacing: 0,
    border: "none",
    tr: {
      border: "none !important",
      background: "none"
    },
    "td, th": {
      padding: 0,
      border: "none",
      width: "auto!important"
    },
    marginTop: 0,
    marginBottom: 0,
    "th:first-of-type, td:first-of-type": {
      paddingLeft: 0
    },
    "th:last-of-type, td:last-of-type": {
      paddingRight: 0
    },
    td: {
      paddingTop: 0,
      paddingBottom: 4,
      "&:not(:first-of-type)": {
        paddingLeft: 10,
        paddingRight: 0
      }
    },
    tbody: {
      boxShadow: "none",
      border: "none"
    },
    code: codeCommon({ theme }),
    "& code": {
      margin: 0,
      display: "inline-block",
      fontSize: theme.typography.size.s1
    }
  }
}));
var ArgJsDoc = ({ tags }) => {
  const params = (tags.params || []).filter((x) => x.description);
  const hasDisplayableParams = params.length !== 0;
  const hasDisplayableReturns = tags.returns != null && tags.returns.description != null;
  if (!hasDisplayableParams && !hasDisplayableReturns) {
    return null;
  }
  return /* @__PURE__ */ React9.createElement(Table, null, /* @__PURE__ */ React9.createElement("tbody", null, hasDisplayableParams && params.map((x) => {
    return /* @__PURE__ */ React9.createElement("tr", {
      key: x.name
    }, /* @__PURE__ */ React9.createElement("td", null, /* @__PURE__ */ React9.createElement("code", null, x.name)), /* @__PURE__ */ React9.createElement("td", null, x.description));
  }), hasDisplayableReturns && /* @__PURE__ */ React9.createElement("tr", {
    key: "returns"
  }, /* @__PURE__ */ React9.createElement("td", null, /* @__PURE__ */ React9.createElement("code", null, "Returns")), /* @__PURE__ */ React9.createElement("td", null, tags.returns.description))));
};

// src/components/ArgsTable/ArgValue.tsx
import React10, { useState as useState2 } from "react";
import memoize from "memoizerific";
import uniq from "lodash/uniq";
import { styled as styled7 } from "@storybook/theming";
import { WithTooltipPure, Icons as Icons2, SyntaxHighlighter as SyntaxHighlighter2, codeCommon as codeCommon2 } from "@storybook/components";
var ITEMS_BEFORE_EXPANSION = 8;
var Summary = styled7.div(({ isExpanded }) => ({
  display: "flex",
  flexDirection: isExpanded ? "column" : "row",
  flexWrap: "wrap",
  alignItems: "flex-start",
  marginBottom: "-4px",
  minWidth: 100
}));
var Text = styled7.span(codeCommon2, ({ theme, simple = false }) => ({
  flex: "0 0 auto",
  fontFamily: theme.typography.fonts.mono,
  fontSize: theme.typography.size.s1,
  wordBreak: "break-word",
  whiteSpace: "normal",
  maxWidth: "100%",
  margin: 0,
  marginRight: "4px",
  marginBottom: "4px",
  paddingTop: "2px",
  paddingBottom: "2px",
  lineHeight: "13px",
  ...simple && {
    background: "transparent",
    border: "0 none",
    paddingLeft: 0
  }
}));
var ExpandButton = styled7.button(({ theme }) => ({
  fontFamily: theme.typography.fonts.mono,
  color: theme.color.secondary,
  marginBottom: "4px",
  background: "none",
  border: "none"
}));
var Expandable = styled7.div(codeCommon2, ({ theme }) => ({
  fontFamily: theme.typography.fonts.mono,
  color: theme.color.secondary,
  fontSize: theme.typography.size.s1,
  margin: 0,
  whiteSpace: "nowrap",
  display: "flex",
  alignItems: "center"
}));
var Detail = styled7.div(({ theme, width }) => ({
  width,
  minWidth: 200,
  maxWidth: 800,
  padding: 15,
  fontFamily: theme.typography.fonts.mono,
  fontSize: theme.typography.size.s1,
  boxSizing: "content-box",
  "& code": {
    padding: "0 !important"
  }
}));
var ArrowIcon = styled7(Icons2)({
  height: 10,
  width: 10,
  minWidth: 10,
  marginLeft: 4
});
var EmptyArg = () => {
  return /* @__PURE__ */ React10.createElement("span", null, "-");
};
var ArgText = ({ text, simple }) => {
  return /* @__PURE__ */ React10.createElement(Text, {
    simple
  }, text);
};
var calculateDetailWidth = memoize(1e3)((detail) => {
  const lines = detail.split(/\r?\n/);
  return `${Math.max(...lines.map((x) => x.length))}ch`;
});
var getSummaryItems = (summary) => {
  if (!summary)
    return [summary];
  const splittedItems = summary.split("|");
  const summaryItems = splittedItems.map((value2) => value2.trim());
  return uniq(summaryItems);
};
var renderSummaryItems = (summaryItems, isExpanded = true) => {
  let items = summaryItems;
  if (!isExpanded) {
    items = summaryItems.slice(0, ITEMS_BEFORE_EXPANSION);
  }
  return items.map((item) => /* @__PURE__ */ React10.createElement(ArgText, {
    key: item,
    text: item === "" ? '""' : item
  }));
};
var ArgSummary = ({ value: value2, initialExpandedArgs }) => {
  const { summary, detail } = value2;
  const [isOpen, setIsOpen] = useState2(false);
  const [isExpanded, setIsExpanded] = useState2(initialExpandedArgs || false);
  if (summary === void 0 || summary === null)
    return null;
  const summaryAsString = typeof summary.toString === "function" ? summary.toString() : summary;
  if (detail == null) {
    const cannotBeSafelySplitted = /[(){}[\]<>]/.test(summaryAsString);
    if (cannotBeSafelySplitted) {
      return /* @__PURE__ */ React10.createElement(ArgText, {
        text: summaryAsString
      });
    }
    const summaryItems = getSummaryItems(summaryAsString);
    const itemsCount = summaryItems.length;
    const hasManyItems = itemsCount > ITEMS_BEFORE_EXPANSION;
    return hasManyItems ? /* @__PURE__ */ React10.createElement(Summary, {
      isExpanded
    }, renderSummaryItems(summaryItems, isExpanded), /* @__PURE__ */ React10.createElement(ExpandButton, {
      onClick: () => setIsExpanded(!isExpanded)
    }, isExpanded ? "Show less..." : `Show ${itemsCount - ITEMS_BEFORE_EXPANSION} more...`)) : /* @__PURE__ */ React10.createElement(Summary, null, renderSummaryItems(summaryItems));
  }
  return /* @__PURE__ */ React10.createElement(WithTooltipPure, {
    closeOnClick: true,
    trigger: "click",
    placement: "bottom",
    tooltipShown: isOpen,
    onVisibilityChange: (isVisible) => {
      setIsOpen(isVisible);
    },
    tooltip: /* @__PURE__ */ React10.createElement(Detail, {
      width: calculateDetailWidth(detail)
    }, /* @__PURE__ */ React10.createElement(SyntaxHighlighter2, {
      language: "jsx",
      format: false
    }, detail))
  }, /* @__PURE__ */ React10.createElement(Expandable, {
    className: "sbdocs-expandable"
  }, /* @__PURE__ */ React10.createElement("span", null, summaryAsString), /* @__PURE__ */ React10.createElement(ArrowIcon, {
    icon: isOpen ? "arrowup" : "arrowdown"
  })));
};
var ArgValue = ({ value: value2, initialExpandedArgs }) => {
  return value2 == null ? /* @__PURE__ */ React10.createElement(EmptyArg, null) : /* @__PURE__ */ React10.createElement(ArgSummary, {
    value: value2,
    initialExpandedArgs
  });
};

// src/components/ArgsTable/ArgControl.tsx
import React25, { useCallback as useCallback6, useState as useState8, useEffect as useEffect4 } from "react";

// src/controls/index.tsx
import React24, { lazy, Suspense } from "react";

// src/controls/Boolean.tsx
import React11, { useCallback as useCallback2 } from "react";
import { opacify, transparentize as transparentize3 } from "polished";
import { styled as styled8 } from "@storybook/theming";
import { Form } from "@storybook/components";
var Label = styled8.label(({ theme }) => ({
  lineHeight: "18px",
  alignItems: "center",
  marginBottom: 8,
  display: "inline-block",
  position: "relative",
  whiteSpace: "nowrap",
  background: theme.boolean.background,
  borderRadius: "3em",
  padding: 1,
  input: {
    appearance: "none",
    width: "100%",
    height: "100%",
    position: "absolute",
    left: 0,
    top: 0,
    margin: 0,
    padding: 0,
    border: "none",
    background: "transparent",
    cursor: "pointer",
    borderRadius: "3em",
    "&:focus": {
      outline: "none",
      boxShadow: `${theme.color.secondary} 0 0 0 1px inset !important`
    }
  },
  span: {
    textAlign: "center",
    fontSize: theme.typography.size.s1,
    fontWeight: theme.typography.weight.bold,
    lineHeight: "1",
    cursor: "pointer",
    display: "inline-block",
    padding: "7px 15px",
    transition: "all 100ms ease-out",
    userSelect: "none",
    borderRadius: "3em",
    color: transparentize3(0.5, theme.color.defaultText),
    background: "transparent",
    "&:hover": {
      boxShadow: `${opacify(0.3, theme.appBorderColor)} 0 0 0 1px inset`
    },
    "&:active": {
      boxShadow: `${opacify(0.05, theme.appBorderColor)} 0 0 0 2px inset`,
      color: opacify(1, theme.appBorderColor)
    },
    "&:first-of-type": {
      paddingRight: 8
    },
    "&:last-of-type": {
      paddingLeft: 8
    }
  },
  "input:checked ~ span:last-of-type, input:not(:checked) ~ span:first-of-type": {
    background: theme.boolean.selectedBackground,
    boxShadow: theme.base === "light" ? `${opacify(0.1, theme.appBorderColor)} 0 0 2px` : `${theme.appBorderColor} 0 0 0 1px`,
    color: theme.color.defaultText,
    padding: "7px 15px"
  }
}));
var parse = (value2) => value2 === "true";
var BooleanControl = ({ name, value: value2, onChange, onBlur, onFocus }) => {
  const onSetFalse = useCallback2(() => onChange(false), [onChange]);
  if (value2 === void 0) {
    return /* @__PURE__ */ React11.createElement(Form.Button, {
      id: getControlSetterButtonId(name),
      onClick: onSetFalse
    }, "Set boolean");
  }
  const parsedValue = typeof value2 === "string" ? parse(value2) : value2;
  return /* @__PURE__ */ React11.createElement(Label, {
    htmlFor: name,
    title: parsedValue ? "Change to false" : "Change to true"
  }, /* @__PURE__ */ React11.createElement("input", {
    id: getControlId(name),
    type: "checkbox",
    onChange: (e) => onChange(e.target.checked),
    checked: parsedValue,
    ...{ name, onBlur, onFocus }
  }), /* @__PURE__ */ React11.createElement("span", null, "False"), /* @__PURE__ */ React11.createElement("span", null, "True"));
};

// src/controls/Date.tsx
import React12, { useState as useState3, useRef, useEffect } from "react";
import { styled as styled9 } from "@storybook/theming";
import { Form as Form2 } from "@storybook/components";
var parseDate = (value2) => {
  const [year, month, day] = value2.split("-");
  const result = new Date();
  result.setFullYear(parseInt(year, 10), parseInt(month, 10) - 1, parseInt(day, 10));
  return result;
};
var parseTime = (value2) => {
  const [hours, minutes] = value2.split(":");
  const result = new Date();
  result.setHours(parseInt(hours, 10));
  result.setMinutes(parseInt(minutes, 10));
  return result;
};
var formatDate = (value2) => {
  const date = new Date(value2);
  const year = `000${date.getFullYear()}`.slice(-4);
  const month = `0${date.getMonth() + 1}`.slice(-2);
  const day = `0${date.getDate()}`.slice(-2);
  return `${year}-${month}-${day}`;
};
var formatTime = (value2) => {
  const date = new Date(value2);
  const hours = `0${date.getHours()}`.slice(-2);
  const minutes = `0${date.getMinutes()}`.slice(-2);
  return `${hours}:${minutes}`;
};
var FlexSpaced = styled9.div(({ theme }) => ({
  flex: 1,
  display: "flex",
  input: {
    marginLeft: 10,
    flex: 1,
    height: 32,
    "&::-webkit-calendar-picker-indicator": {
      opacity: 0.5,
      height: 12,
      filter: theme.base === "light" ? void 0 : "invert(1)"
    }
  },
  "input:first-of-type": {
    marginLeft: 0,
    flexGrow: 4
  },
  "input:last-of-type": {
    flexGrow: 3
  }
}));
var DateControl = ({ name, value: value2, onChange, onFocus, onBlur }) => {
  const [valid, setValid] = useState3(true);
  const dateRef = useRef();
  const timeRef = useRef();
  useEffect(() => {
    if (valid !== false) {
      if (dateRef && dateRef.current) {
        dateRef.current.value = formatDate(value2);
      }
      if (timeRef && timeRef.current) {
        timeRef.current.value = formatTime(value2);
      }
    }
  }, [value2]);
  const onDateChange = (e) => {
    const parsed = parseDate(e.target.value);
    const result = new Date(value2);
    result.setFullYear(parsed.getFullYear(), parsed.getMonth(), parsed.getDate());
    const time = result.getTime();
    if (time)
      onChange(time);
    setValid(!!time);
  };
  const onTimeChange = (e) => {
    const parsed = parseTime(e.target.value);
    const result = new Date(value2);
    result.setHours(parsed.getHours());
    result.setMinutes(parsed.getMinutes());
    const time = result.getTime();
    if (time)
      onChange(time);
    setValid(!!time);
  };
  const controlId = getControlId(name);
  return /* @__PURE__ */ React12.createElement(FlexSpaced, null, /* @__PURE__ */ React12.createElement(Form2.Input, {
    type: "date",
    max: "9999-12-31",
    ref: dateRef,
    id: `${controlId}-date`,
    name: `${controlId}-date`,
    onChange: onDateChange,
    ...{ onFocus, onBlur }
  }), /* @__PURE__ */ React12.createElement(Form2.Input, {
    type: "time",
    id: `${controlId}-time`,
    name: `${controlId}-time`,
    ref: timeRef,
    onChange: onTimeChange,
    ...{ onFocus, onBlur }
  }), !valid ? /* @__PURE__ */ React12.createElement("div", null, "invalid") : null);
};

// src/controls/Number.tsx
import React13, { useState as useState4, useCallback as useCallback3, useEffect as useEffect2, useRef as useRef2 } from "react";
import { styled as styled10 } from "@storybook/theming";
import { Form as Form3 } from "@storybook/components";
var Wrapper2 = styled10.label({
  display: "flex"
});
var parse2 = (value2) => {
  const result = parseFloat(value2);
  return Number.isNaN(result) ? void 0 : result;
};
var format = (value2) => value2 != null ? String(value2) : "";
var NumberControl = ({
  name,
  value: value2,
  onChange,
  min,
  max,
  step,
  onBlur,
  onFocus
}) => {
  const [inputValue, setInputValue] = useState4(typeof value2 === "number" ? value2 : "");
  const [forceVisible, setForceVisible] = useState4(false);
  const [parseError, setParseError] = useState4(null);
  const handleChange = useCallback3(
    (event) => {
      setInputValue(event.target.value);
      const result = parseFloat(event.target.value);
      if (Number.isNaN(result)) {
        setParseError(new Error(`'${event.target.value}' is not a number`));
      } else {
        onChange(result);
        setParseError(null);
      }
    },
    [onChange, setParseError]
  );
  const onForceVisible = useCallback3(() => {
    setInputValue("0");
    onChange(0);
    setForceVisible(true);
  }, [setForceVisible]);
  const htmlElRef = useRef2(null);
  useEffect2(() => {
    if (forceVisible && htmlElRef.current)
      htmlElRef.current.select();
  }, [forceVisible]);
  useEffect2(() => {
    const newInputValue = typeof value2 === "number" ? value2 : "";
    if (inputValue !== newInputValue) {
      setInputValue(value2);
    }
  }, [value2]);
  if (!forceVisible && value2 === void 0) {
    return /* @__PURE__ */ React13.createElement(Form3.Button, {
      id: getControlSetterButtonId(name),
      onClick: onForceVisible
    }, "Set number");
  }
  return /* @__PURE__ */ React13.createElement(Wrapper2, null, /* @__PURE__ */ React13.createElement(Form3.Input, {
    ref: htmlElRef,
    id: getControlId(name),
    type: "number",
    onChange: handleChange,
    size: "flex",
    placeholder: "Edit number...",
    value: inputValue,
    valid: parseError ? "error" : null,
    autoFocus: forceVisible,
    ...{ name, min, max, step, onFocus, onBlur }
  }));
};

// src/controls/options/Options.tsx
import React17 from "react";
import { dedent } from "ts-dedent";
import { once } from "@storybook/client-logger";

// src/controls/options/Checkbox.tsx
import React14, { useState as useState5 } from "react";
import { styled as styled11 } from "@storybook/theming";
import { logger } from "@storybook/client-logger";

// src/controls/options/helpers.ts
var selectedKey = (value2, options) => {
  const entry = options && Object.entries(options).find(([_key, val]) => val === value2);
  return entry ? entry[0] : void 0;
};
var selectedKeys = (value2, options) => value2 && options ? Object.entries(options).filter((entry) => value2.includes(entry[1])).map((entry) => entry[0]) : [];
var selectedValues = (keys, options) => keys && options && keys.map((key) => options[key]);

// src/controls/options/Checkbox.tsx
var Wrapper3 = styled11.div(
  ({ isInline }) => isInline ? {
    display: "flex",
    flexWrap: "wrap",
    alignItems: "flex-start",
    label: {
      display: "inline-flex",
      marginRight: 15
    }
  } : {
    label: {
      display: "flex"
    }
  }
);
var Text2 = styled11.span({});
var Label2 = styled11.label({
  lineHeight: "20px",
  alignItems: "center",
  marginBottom: 8,
  "&:last-child": {
    marginBottom: 0
  },
  input: {
    margin: 0,
    marginRight: 6
  }
});
var CheckboxControl = ({
  name,
  options,
  value: value2,
  onChange,
  isInline
}) => {
  if (!options) {
    logger.warn(`Checkbox with no options: ${name}`);
    return /* @__PURE__ */ React14.createElement(React14.Fragment, null, "-");
  }
  const initial = selectedKeys(value2, options);
  const [selected, setSelected] = useState5(initial);
  const handleChange = (e) => {
    const option = e.target.value;
    const updated = [...selected];
    if (updated.includes(option)) {
      updated.splice(updated.indexOf(option), 1);
    } else {
      updated.push(option);
    }
    onChange(selectedValues(updated, options));
    setSelected(updated);
  };
  const controlId = getControlId(name);
  return /* @__PURE__ */ React14.createElement(Wrapper3, {
    isInline
  }, Object.keys(options).map((key, index) => {
    const id = `${controlId}-${index}`;
    return /* @__PURE__ */ React14.createElement(Label2, {
      key: id,
      htmlFor: id
    }, /* @__PURE__ */ React14.createElement("input", {
      type: "checkbox",
      id,
      name: id,
      value: key,
      onChange: handleChange,
      checked: selected?.includes(key)
    }), /* @__PURE__ */ React14.createElement(Text2, null, key));
  }));
};

// src/controls/options/Radio.tsx
import React15 from "react";
import { styled as styled12 } from "@storybook/theming";
import { logger as logger2 } from "@storybook/client-logger";
var Wrapper4 = styled12.div(
  ({ isInline }) => isInline ? {
    display: "flex",
    flexWrap: "wrap",
    alignItems: "flex-start",
    label: {
      display: "inline-flex",
      marginRight: 15
    }
  } : {
    label: {
      display: "flex"
    }
  }
);
var Text3 = styled12.span({});
var Label3 = styled12.label({
  lineHeight: "20px",
  alignItems: "center",
  marginBottom: 8,
  "&:last-child": {
    marginBottom: 0
  },
  input: {
    margin: 0,
    marginRight: 6
  }
});
var RadioControl = ({ name, options, value: value2, onChange, isInline }) => {
  if (!options) {
    logger2.warn(`Radio with no options: ${name}`);
    return /* @__PURE__ */ React15.createElement(React15.Fragment, null, "-");
  }
  const selection = selectedKey(value2, options);
  const controlId = getControlId(name);
  return /* @__PURE__ */ React15.createElement(Wrapper4, {
    isInline
  }, Object.keys(options).map((key, index) => {
    const id = `${controlId}-${index}`;
    return /* @__PURE__ */ React15.createElement(Label3, {
      key: id,
      htmlFor: id
    }, /* @__PURE__ */ React15.createElement("input", {
      type: "radio",
      id,
      name: id,
      value: key,
      onChange: (e) => onChange(options[e.currentTarget.value]),
      checked: key === selection
    }), /* @__PURE__ */ React15.createElement(Text3, null, key));
  }));
};

// src/controls/options/Select.tsx
import React16 from "react";
import { styled as styled13 } from "@storybook/theming";
import { logger as logger3 } from "@storybook/client-logger";
import { Icons as Icons3 } from "@storybook/components";
var styleResets = {
  appearance: "none",
  border: "0 none",
  boxSizing: "inherit",
  display: " block",
  margin: " 0",
  background: "transparent",
  padding: 0,
  fontSize: "inherit",
  position: "relative"
};
var OptionsSelect = styled13.select(({ theme }) => ({
  ...styleResets,
  boxSizing: "border-box",
  position: "relative",
  padding: "6px 10px",
  width: "100%",
  color: theme.input.color || "inherit",
  background: theme.input.background,
  borderRadius: theme.input.borderRadius,
  boxShadow: `${theme.input.border} 0 0 0 1px inset`,
  fontSize: theme.typography.size.s2 - 1,
  lineHeight: "20px",
  "&:focus": {
    boxShadow: `${theme.color.secondary} 0 0 0 1px inset`,
    outline: "none"
  },
  "&[disabled]": {
    cursor: "not-allowed",
    opacity: 0.5
  },
  "::placeholder": {
    color: theme.textMutedColor
  },
  "&[multiple]": {
    overflow: "auto",
    padding: 0,
    option: {
      display: "block",
      padding: "6px 10px",
      marginLeft: 1,
      marginRight: 1
    }
  }
}));
var SelectWrapper = styled13.span(({ theme }) => ({
  display: "inline-block",
  lineHeight: "normal",
  overflow: "hidden",
  position: "relative",
  verticalAlign: "top",
  width: "100%",
  svg: {
    position: "absolute",
    zIndex: 1,
    pointerEvents: "none",
    height: "12px",
    marginTop: "-6px",
    right: "12px",
    top: "50%",
    fill: theme.textMutedColor,
    path: {
      fill: theme.textMutedColor
    }
  }
}));
var NO_SELECTION = "Choose option...";
var SingleSelect = ({ name, value: value2, options, onChange }) => {
  const handleChange = (e) => {
    onChange(options[e.currentTarget.value]);
  };
  const selection = selectedKey(value2, options) || NO_SELECTION;
  const controlId = getControlId(name);
  return /* @__PURE__ */ React16.createElement(SelectWrapper, null, /* @__PURE__ */ React16.createElement(Icons3, {
    icon: "arrowdown"
  }), /* @__PURE__ */ React16.createElement(OptionsSelect, {
    id: controlId,
    value: selection,
    onChange: handleChange
  }, /* @__PURE__ */ React16.createElement("option", {
    key: "no-selection",
    disabled: true
  }, NO_SELECTION), Object.keys(options).map((key) => /* @__PURE__ */ React16.createElement("option", {
    key
  }, key))));
};
var MultiSelect = ({ name, value: value2, options, onChange }) => {
  const handleChange = (e) => {
    const selection2 = Array.from(e.currentTarget.options).filter((option) => option.selected).map((option) => option.value);
    onChange(selectedValues(selection2, options));
  };
  const selection = selectedKeys(value2, options);
  const controlId = getControlId(name);
  return /* @__PURE__ */ React16.createElement(SelectWrapper, null, /* @__PURE__ */ React16.createElement(OptionsSelect, {
    id: controlId,
    multiple: true,
    value: selection,
    onChange: handleChange
  }, Object.keys(options).map((key) => /* @__PURE__ */ React16.createElement("option", {
    key
  }, key))));
};
var SelectControl = (props) => {
  const { name, options } = props;
  if (!options) {
    logger3.warn(`Select with no options: ${name}`);
    return /* @__PURE__ */ React16.createElement(React16.Fragment, null, "-");
  }
  return props.isMulti ? /* @__PURE__ */ React16.createElement(MultiSelect, {
    ...props
  }) : /* @__PURE__ */ React16.createElement(SingleSelect, {
    ...props
  });
};

// src/controls/options/Options.tsx
var normalizeOptions = (options, labels) => {
  if (Array.isArray(options)) {
    return options.reduce((acc, item) => {
      acc[labels?.[item] || String(item)] = item;
      return acc;
    }, {});
  }
  return options;
};
var Controls = {
  check: CheckboxControl,
  "inline-check": CheckboxControl,
  radio: RadioControl,
  "inline-radio": RadioControl,
  select: SelectControl,
  "multi-select": SelectControl
};
var OptionsControl = (props) => {
  const { type = "select", options, labels, argType } = props;
  const normalized = {
    ...props,
    options: normalizeOptions(options || argType.options, labels),
    isInline: type.includes("inline"),
    isMulti: type.includes("multi")
  };
  if (options) {
    once.warn(dedent`
      'control.options' is deprecated and will be removed in Storybook 7.0. Define 'options' directly on the argType instead, and use 'control.labels' for custom labels.

      More info: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#deprecated-controloptions
    `);
  }
  const Control = Controls[type];
  if (Control) {
    return /* @__PURE__ */ React17.createElement(Control, {
      ...normalized
    });
  }
  throw new Error(`Unknown options type: ${type}`);
};

// src/controls/Object.tsx
import global4 from "global";
import cloneDeep from "lodash/cloneDeep";
import React20, {
  useCallback as useCallback4,
  useMemo,
  useState as useState6,
  useEffect as useEffect3,
  useRef as useRef3
} from "react";
import { styled as styled14, useTheme } from "@storybook/theming";
import { Form as Form4, Icons as Icons4, IconButton as IconButton2 } from "@storybook/components";

// src/controls/react-editable-json-tree/index.tsx
import React19, { Component as Component3 } from "react";

// src/controls/react-editable-json-tree/JsonNodes.tsx
import React18, { cloneElement, Component as Component2 } from "react";

// src/controls/react-editable-json-tree/types/inputUsageTypes.ts
var VALUE = "value";
var KEY = "key";

// src/controls/react-editable-json-tree/types/dataTypes.ts
var ERROR = "Error";
var OBJECT = "Object";
var ARRAY = "Array";
var STRING = "String";
var NUMBER = "Number";
var BOOLEAN = "Boolean";
var DATE = "Date";
var NULL = "Null";
var UNDEFINED = "Undefined";
var FUNCTION = "Function";
var SYMBOL = "Symbol";

// src/controls/react-editable-json-tree/types/deltaTypes.ts
var ADD_DELTA_TYPE = "ADD_DELTA_TYPE";
var REMOVE_DELTA_TYPE = "REMOVE_DELTA_TYPE";
var UPDATE_DELTA_TYPE = "UPDATE_DELTA_TYPE";

// src/controls/react-editable-json-tree/utils/objectTypes.ts
function getObjectType(obj) {
  if (obj !== null && typeof obj === "object" && !Array.isArray(obj) && typeof obj[Symbol.iterator] === "function") {
    return "Iterable";
  }
  return Object.prototype.toString.call(obj).slice(8, -1);
}
function isComponentWillChange(oldValue, newValue) {
  const oldType = getObjectType(oldValue);
  const newType = getObjectType(newValue);
  return (oldType === "Function" || newType === "Function") && newType !== oldType;
}

// src/controls/react-editable-json-tree/JsonNodes.tsx
var JsonAddValue = class extends Component2 {
  constructor(props) {
    super(props);
    this.state = {
      inputRefKey: null,
      inputRefValue: null
    };
    this.refInputValue = this.refInputValue.bind(this);
    this.refInputKey = this.refInputKey.bind(this);
    this.onKeydown = this.onKeydown.bind(this);
    this.onSubmit = this.onSubmit.bind(this);
  }
  componentDidMount() {
    const { inputRefKey, inputRefValue } = this.state;
    const { onlyValue } = this.props;
    if (inputRefKey && typeof inputRefKey.focus === "function") {
      inputRefKey.focus();
    }
    if (onlyValue && inputRefValue && typeof inputRefValue.focus === "function") {
      inputRefValue.focus();
    }
    document.addEventListener("keydown", this.onKeydown);
  }
  componentWillUnmount() {
    document.removeEventListener("keydown", this.onKeydown);
  }
  onKeydown(event) {
    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey || event.repeat)
      return;
    if (event.code === "Enter" || event.key === "Enter") {
      event.preventDefault();
      this.onSubmit();
    }
    if (event.code === "Escape" || event.key === "Escape") {
      event.preventDefault();
      this.props.handleCancel();
    }
  }
  onSubmit() {
    const { handleAdd, onlyValue, onSubmitValueParser, keyPath, deep } = this.props;
    const { inputRefKey, inputRefValue } = this.state;
    const result = {};
    if (!onlyValue) {
      if (!inputRefKey.value) {
        return;
      }
      result.key = inputRefKey.value;
    }
    result.newValue = onSubmitValueParser(false, keyPath, deep, result.key, inputRefValue.value);
    handleAdd(result);
  }
  refInputKey(node) {
    this.state.inputRefKey = node;
  }
  refInputValue(node) {
    this.state.inputRefValue = node;
  }
  render() {
    const {
      handleCancel,
      onlyValue,
      addButtonElement,
      cancelButtonElement,
      inputElementGenerator,
      keyPath,
      deep
    } = this.props;
    const addButtonElementLayout = cloneElement(addButtonElement, {
      onClick: this.onSubmit
    });
    const cancelButtonElementLayout = cloneElement(cancelButtonElement, {
      onClick: handleCancel
    });
    const inputElementValue = inputElementGenerator(VALUE, keyPath, deep);
    const inputElementValueLayout = cloneElement(inputElementValue, {
      placeholder: "Value",
      ref: this.refInputValue
    });
    let inputElementKeyLayout = null;
    if (!onlyValue) {
      const inputElementKey = inputElementGenerator(KEY, keyPath, deep);
      inputElementKeyLayout = cloneElement(inputElementKey, {
        placeholder: "Key",
        ref: this.refInputKey
      });
    }
    return /* @__PURE__ */ React18.createElement("span", {
      className: "rejt-add-value-node"
    }, inputElementKeyLayout, inputElementValueLayout, cancelButtonElementLayout, addButtonElementLayout);
  }
};
JsonAddValue.defaultProps = {
  onlyValue: false,
  addButtonElement: /* @__PURE__ */ React18.createElement("button", null, "+"),
  cancelButtonElement: /* @__PURE__ */ React18.createElement("button", null, "c")
};
var JsonArray = class extends Component2 {
  constructor(props) {
    super(props);
    const keyPath = [...props.keyPath, props.name];
    this.state = {
      data: props.data,
      name: props.name,
      keyPath,
      deep: props.deep,
      nextDeep: props.deep + 1,
      collapsed: props.isCollapsed(keyPath, props.deep, props.data),
      addFormVisible: false
    };
    this.handleCollapseMode = this.handleCollapseMode.bind(this);
    this.handleRemoveItem = this.handleRemoveItem.bind(this);
    this.handleAddMode = this.handleAddMode.bind(this);
    this.handleAddValueAdd = this.handleAddValueAdd.bind(this);
    this.handleAddValueCancel = this.handleAddValueCancel.bind(this);
    this.handleEditValue = this.handleEditValue.bind(this);
    this.onChildUpdate = this.onChildUpdate.bind(this);
    this.renderCollapsed = this.renderCollapsed.bind(this);
    this.renderNotCollapsed = this.renderNotCollapsed.bind(this);
  }
  static getDerivedStateFromProps(props, state) {
    return props.data !== state.data ? { data: props.data } : null;
  }
  onChildUpdate(childKey, childData) {
    const { data, keyPath } = this.state;
    data[childKey] = childData;
    this.setState({
      data
    });
    const { onUpdate } = this.props;
    const size = keyPath.length;
    onUpdate(keyPath[size - 1], data);
  }
  handleAddMode() {
    this.setState({
      addFormVisible: true
    });
  }
  handleCollapseMode() {
    this.setState((state) => ({
      collapsed: !state.collapsed
    }));
  }
  handleRemoveItem(index) {
    return () => {
      const { beforeRemoveAction, logger: logger4 } = this.props;
      const { data, keyPath, nextDeep: deep } = this.state;
      const oldValue = data[index];
      beforeRemoveAction(index, keyPath, deep, oldValue).then(() => {
        const deltaUpdateResult = {
          keyPath,
          deep,
          key: index,
          oldValue,
          type: REMOVE_DELTA_TYPE
        };
        data.splice(index, 1);
        this.setState({ data });
        const { onUpdate, onDeltaUpdate } = this.props;
        onUpdate(keyPath[keyPath.length - 1], data);
        onDeltaUpdate(deltaUpdateResult);
      }).catch(logger4.error);
    };
  }
  handleAddValueAdd({ newValue }) {
    const { data, keyPath, nextDeep: deep } = this.state;
    const { beforeAddAction, logger: logger4 } = this.props;
    beforeAddAction(data.length, keyPath, deep, newValue).then(() => {
      const newData = [...data, newValue];
      this.setState({
        data: newData
      });
      this.handleAddValueCancel();
      const { onUpdate, onDeltaUpdate } = this.props;
      onUpdate(keyPath[keyPath.length - 1], newData);
      onDeltaUpdate({
        type: ADD_DELTA_TYPE,
        keyPath,
        deep,
        key: newData.length - 1,
        newValue
      });
    }).catch(logger4.error);
  }
  handleAddValueCancel() {
    this.setState({
      addFormVisible: false
    });
  }
  handleEditValue({ key, value: value2 }) {
    return new Promise((resolve, reject) => {
      const { beforeUpdateAction } = this.props;
      const { data, keyPath, nextDeep: deep } = this.state;
      const oldValue = data[key];
      beforeUpdateAction(key, keyPath, deep, oldValue, value2).then(() => {
        data[key] = value2;
        this.setState({
          data
        });
        const { onUpdate, onDeltaUpdate } = this.props;
        onUpdate(keyPath[keyPath.length - 1], data);
        onDeltaUpdate({
          type: UPDATE_DELTA_TYPE,
          keyPath,
          deep,
          key,
          newValue: value2,
          oldValue
        });
        resolve(void 0);
      }).catch(reject);
    });
  }
  renderCollapsed() {
    const { name, data, keyPath, deep } = this.state;
    const { handleRemove, readOnly, getStyle, dataType, minusMenuElement } = this.props;
    const { minus, collapsed } = getStyle(name, data, keyPath, deep, dataType);
    const isReadOnly = readOnly(name, data, keyPath, deep, dataType);
    const removeItemButton = cloneElement(minusMenuElement, {
      onClick: handleRemove,
      className: "rejt-minus-menu",
      style: minus
    });
    return /* @__PURE__ */ React18.createElement("span", {
      className: "rejt-collapsed"
    }, /* @__PURE__ */ React18.createElement("span", {
      className: "rejt-collapsed-text",
      style: collapsed,
      onClick: this.handleCollapseMode
    }, "[...] ", data.length, " ", data.length === 1 ? "item" : "items"), !isReadOnly && removeItemButton);
  }
  renderNotCollapsed() {
    const { name, data, keyPath, deep, addFormVisible, nextDeep } = this.state;
    const {
      isCollapsed,
      handleRemove,
      onDeltaUpdate,
      readOnly,
      getStyle,
      dataType,
      addButtonElement,
      cancelButtonElement,
      editButtonElement,
      inputElementGenerator,
      textareaElementGenerator,
      minusMenuElement,
      plusMenuElement,
      beforeRemoveAction,
      beforeAddAction,
      beforeUpdateAction,
      logger: logger4,
      onSubmitValueParser
    } = this.props;
    const { minus, plus, delimiter, ul, addForm } = getStyle(name, data, keyPath, deep, dataType);
    const isReadOnly = readOnly(name, data, keyPath, deep, dataType);
    const addItemButton = cloneElement(plusMenuElement, {
      onClick: this.handleAddMode,
      className: "rejt-plus-menu",
      style: plus
    });
    const removeItemButton = cloneElement(minusMenuElement, {
      onClick: handleRemove,
      className: "rejt-minus-menu",
      style: minus
    });
    const onlyValue = true;
    const startObject = "[";
    const endObject = "]";
    return /* @__PURE__ */ React18.createElement("span", {
      className: "rejt-not-collapsed"
    }, /* @__PURE__ */ React18.createElement("span", {
      className: "rejt-not-collapsed-delimiter",
      style: delimiter
    }, startObject), !addFormVisible && addItemButton, /* @__PURE__ */ React18.createElement("ul", {
      className: "rejt-not-collapsed-list",
      style: ul
    }, data.map((item, index) => /* @__PURE__ */ React18.createElement(JsonNode, {
      key: index,
      name: `${index}`,
      data: item,
      keyPath,
      deep: nextDeep,
      isCollapsed,
      handleRemove: this.handleRemoveItem(index),
      handleUpdateValue: this.handleEditValue,
      onUpdate: this.onChildUpdate,
      onDeltaUpdate,
      readOnly,
      getStyle,
      addButtonElement,
      cancelButtonElement,
      editButtonElement,
      inputElementGenerator,
      textareaElementGenerator,
      minusMenuElement,
      plusMenuElement,
      beforeRemoveAction,
      beforeAddAction,
      beforeUpdateAction,
      logger: logger4,
      onSubmitValueParser
    }))), !isReadOnly && addFormVisible && /* @__PURE__ */ React18.createElement("div", {
      className: "rejt-add-form",
      style: addForm
    }, /* @__PURE__ */ React18.createElement(JsonAddValue, {
      handleAdd: this.handleAddValueAdd,
      handleCancel: this.handleAddValueCancel,
      onlyValue,
      addButtonElement,
      cancelButtonElement,
      inputElementGenerator,
      keyPath,
      deep,
      onSubmitValueParser
    })), /* @__PURE__ */ React18.createElement("span", {
      className: "rejt-not-collapsed-delimiter",
      style: delimiter
    }, endObject), !isReadOnly && removeItemButton);
  }
  render() {
    const { name, collapsed, data, keyPath, deep } = this.state;
    const { dataType, getStyle } = this.props;
    const value2 = collapsed ? this.renderCollapsed() : this.renderNotCollapsed();
    const style = getStyle(name, data, keyPath, deep, dataType);
    return /* @__PURE__ */ React18.createElement("div", {
      className: "rejt-array-node"
    }, /* @__PURE__ */ React18.createElement("span", {
      onClick: this.handleCollapseMode
    }, /* @__PURE__ */ React18.createElement("span", {
      className: "rejt-name",
      style: style.name
    }, name, " :", " ")), value2);
  }
};
JsonArray.defaultProps = {
  keyPath: [],
  deep: 0,
  minusMenuElement: /* @__PURE__ */ React18.createElement("span", null, " - "),
  plusMenuElement: /* @__PURE__ */ React18.createElement("span", null, " + ")
};
var JsonFunctionValue = class extends Component2 {
  constructor(props) {
    super(props);
    const keyPath = [...props.keyPath, props.name];
    this.state = {
      value: props.value,
      name: props.name,
      keyPath,
      deep: props.deep,
      editEnabled: false,
      inputRef: null
    };
    this.handleEditMode = this.handleEditMode.bind(this);
    this.refInput = this.refInput.bind(this);
    this.handleCancelEdit = this.handleCancelEdit.bind(this);
    this.handleEdit = this.handleEdit.bind(this);
    this.onKeydown = this.onKeydown.bind(this);
  }
  static getDerivedStateFromProps(props, state) {
    return props.value !== state.value ? { value: props.value } : null;
  }
  componentDidUpdate() {
    const { editEnabled, inputRef, name, value: value2, keyPath, deep } = this.state;
    const { readOnly, dataType } = this.props;
    const readOnlyResult = readOnly(name, value2, keyPath, deep, dataType);
    if (editEnabled && !readOnlyResult && typeof inputRef.focus === "function") {
      inputRef.focus();
    }
  }
  componentDidMount() {
    document.addEventListener("keydown", this.onKeydown);
  }
  componentWillUnmount() {
    document.removeEventListener("keydown", this.onKeydown);
  }
  onKeydown(event) {
    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey || event.repeat)
      return;
    if (event.code === "Enter" || event.key === "Enter") {
      event.preventDefault();
      this.handleEdit();
    }
    if (event.code === "Escape" || event.key === "Escape") {
      event.preventDefault();
      this.handleCancelEdit();
    }
  }
  handleEdit() {
    const { handleUpdateValue, originalValue, logger: logger4, onSubmitValueParser, keyPath } = this.props;
    const { inputRef, name, deep } = this.state;
    if (!inputRef)
      return;
    const newValue = onSubmitValueParser(true, keyPath, deep, name, inputRef.value);
    const result = {
      value: newValue,
      key: name
    };
    handleUpdateValue(result).then(() => {
      if (!isComponentWillChange(originalValue, newValue)) {
        this.handleCancelEdit();
      }
    }).catch(logger4.error);
  }
  handleEditMode() {
    this.setState({
      editEnabled: true
    });
  }
  refInput(node) {
    this.state.inputRef = node;
  }
  handleCancelEdit() {
    this.setState({
      editEnabled: false
    });
  }
  render() {
    const { name, value: value2, editEnabled, keyPath, deep } = this.state;
    const {
      handleRemove,
      originalValue,
      readOnly,
      dataType,
      getStyle,
      editButtonElement,
      cancelButtonElement,
      textareaElementGenerator,
      minusMenuElement,
      keyPath: comeFromKeyPath
    } = this.props;
    const style = getStyle(name, originalValue, keyPath, deep, dataType);
    let result = null;
    let minusElement = null;
    const resultOnlyResult = readOnly(name, originalValue, keyPath, deep, dataType);
    if (editEnabled && !resultOnlyResult) {
      const textareaElement = textareaElementGenerator(
        VALUE,
        comeFromKeyPath,
        deep,
        name,
        originalValue,
        dataType
      );
      const editButtonElementLayout = cloneElement(editButtonElement, {
        onClick: this.handleEdit
      });
      const cancelButtonElementLayout = cloneElement(cancelButtonElement, {
        onClick: this.handleCancelEdit
      });
      const textareaElementLayout = cloneElement(textareaElement, {
        ref: this.refInput,
        defaultValue: originalValue
      });
      result = /* @__PURE__ */ React18.createElement("span", {
        className: "rejt-edit-form",
        style: style.editForm
      }, textareaElementLayout, " ", cancelButtonElementLayout, editButtonElementLayout);
      minusElement = null;
    } else {
      result = /* @__PURE__ */ React18.createElement("span", {
        className: "rejt-value",
        style: style.value,
        onClick: resultOnlyResult ? null : this.handleEditMode
      }, value2);
      const minusMenuLayout = cloneElement(minusMenuElement, {
        onClick: handleRemove,
        className: "rejt-minus-menu",
        style: style.minus
      });
      minusElement = resultOnlyResult ? null : minusMenuLayout;
    }
    return /* @__PURE__ */ React18.createElement("li", {
      className: "rejt-function-value-node",
      style: style.li
    }, /* @__PURE__ */ React18.createElement("span", {
      className: "rejt-name",
      style: style.name
    }, name, " :", " "), result, minusElement);
  }
};
JsonFunctionValue.defaultProps = {
  keyPath: [],
  deep: 0,
  handleUpdateValue: () => {
  },
  editButtonElement: /* @__PURE__ */ React18.createElement("button", null, "e"),
  cancelButtonElement: /* @__PURE__ */ React18.createElement("button", null, "c"),
  minusMenuElement: /* @__PURE__ */ React18.createElement("span", null, " - ")
};
var JsonNode = class extends Component2 {
  constructor(props) {
    super(props);
    this.state = {
      data: props.data,
      name: props.name,
      keyPath: props.keyPath,
      deep: props.deep
    };
  }
  static getDerivedStateFromProps(props, state) {
    return props.data !== state.data ? { data: props.data } : null;
  }
  render() {
    const { data, name, keyPath, deep } = this.state;
    const {
      isCollapsed,
      handleRemove,
      handleUpdateValue,
      onUpdate,
      onDeltaUpdate,
      readOnly,
      getStyle,
      addButtonElement,
      cancelButtonElement,
      editButtonElement,
      inputElementGenerator,
      textareaElementGenerator,
      minusMenuElement,
      plusMenuElement,
      beforeRemoveAction,
      beforeAddAction,
      beforeUpdateAction,
      logger: logger4,
      onSubmitValueParser
    } = this.props;
    const readOnlyTrue = () => true;
    const dataType = getObjectType(data);
    switch (dataType) {
      case ERROR:
        return /* @__PURE__ */ React18.createElement(JsonObject, {
          data,
          name,
          isCollapsed,
          keyPath,
          deep,
          handleRemove,
          onUpdate,
          onDeltaUpdate,
          readOnly: readOnlyTrue,
          dataType,
          getStyle,
          addButtonElement,
          cancelButtonElement,
          editButtonElement,
          inputElementGenerator,
          textareaElementGenerator,
          minusMenuElement,
          plusMenuElement,
          beforeRemoveAction,
          beforeAddAction,
          beforeUpdateAction,
          logger: logger4,
          onSubmitValueParser
        });
      case OBJECT:
        return /* @__PURE__ */ React18.createElement(JsonObject, {
          data,
          name,
          isCollapsed,
          keyPath,
          deep,
          handleRemove,
          onUpdate,
          onDeltaUpdate,
          readOnly,
          dataType,
          getStyle,
          addButtonElement,
          cancelButtonElement,
          editButtonElement,
          inputElementGenerator,
          textareaElementGenerator,
          minusMenuElement,
          plusMenuElement,
          beforeRemoveAction,
          beforeAddAction,
          beforeUpdateAction,
          logger: logger4,
          onSubmitValueParser
        });
      case ARRAY:
        return /* @__PURE__ */ React18.createElement(JsonArray, {
          data,
          name,
          isCollapsed,
          keyPath,
          deep,
          handleRemove,
          onUpdate,
          onDeltaUpdate,
          readOnly,
          dataType,
          getStyle,
          addButtonElement,
          cancelButtonElement,
          editButtonElement,
          inputElementGenerator,
          textareaElementGenerator,
          minusMenuElement,
          plusMenuElement,
          beforeRemoveAction,
          beforeAddAction,
          beforeUpdateAction,
          logger: logger4,
          onSubmitValueParser
        });
      case STRING:
        return /* @__PURE__ */ React18.createElement(JsonValue, {
          name,
          value: `"${data}"`,
          originalValue: data,
          keyPath,
          deep,
          handleRemove,
          handleUpdateValue,
          readOnly,
          dataType,
          getStyle,
          cancelButtonElement,
          editButtonElement,
          inputElementGenerator,
          minusMenuElement,
          logger: logger4,
          onSubmitValueParser
        });
      case NUMBER:
        return /* @__PURE__ */ React18.createElement(JsonValue, {
          name,
          value: data,
          originalValue: data,
          keyPath,
          deep,
          handleRemove,
          handleUpdateValue,
          readOnly,
          dataType,
          getStyle,
          cancelButtonElement,
          editButtonElement,
          inputElementGenerator,
          minusMenuElement,
          logger: logger4,
          onSubmitValueParser
        });
      case BOOLEAN:
        return /* @__PURE__ */ React18.createElement(JsonValue, {
          name,
          value: data ? "true" : "false",
          originalValue: data,
          keyPath,
          deep,
          handleRemove,
          handleUpdateValue,
          readOnly,
          dataType,
          getStyle,
          cancelButtonElement,
          editButtonElement,
          inputElementGenerator,
          minusMenuElement,
          logger: logger4,
          onSubmitValueParser
        });
      case DATE:
        return /* @__PURE__ */ React18.createElement(JsonValue, {
          name,
          value: data.toISOString(),
          originalValue: data,
          keyPath,
          deep,
          handleRemove,
          handleUpdateValue,
          readOnly: readOnlyTrue,
          dataType,
          getStyle,
          cancelButtonElement,
          editButtonElement,
          inputElementGenerator,
          minusMenuElement,
          logger: logger4,
          onSubmitValueParser
        });
      case NULL:
        return /* @__PURE__ */ React18.createElement(JsonValue, {
          name,
          value: "null",
          originalValue: "null",
          keyPath,
          deep,
          handleRemove,
          handleUpdateValue,
          readOnly,
          dataType,
          getStyle,
          cancelButtonElement,
          editButtonElement,
          inputElementGenerator,
          minusMenuElement,
          logger: logger4,
          onSubmitValueParser
        });
      case UNDEFINED:
        return /* @__PURE__ */ React18.createElement(JsonValue, {
          name,
          value: "undefined",
          originalValue: "undefined",
          keyPath,
          deep,
          handleRemove,
          handleUpdateValue,
          readOnly,
          dataType,
          getStyle,
          cancelButtonElement,
          editButtonElement,
          inputElementGenerator,
          minusMenuElement,
          logger: logger4,
          onSubmitValueParser
        });
      case FUNCTION:
        return /* @__PURE__ */ React18.createElement(JsonFunctionValue, {
          name,
          value: data.toString(),
          originalValue: data,
          keyPath,
          deep,
          handleRemove,
          handleUpdateValue,
          readOnly,
          dataType,
          getStyle,
          cancelButtonElement,
          editButtonElement,
          textareaElementGenerator,
          minusMenuElement,
          logger: logger4,
          onSubmitValueParser
        });
      case SYMBOL:
        return /* @__PURE__ */ React18.createElement(JsonValue, {
          name,
          value: data.toString(),
          originalValue: data,
          keyPath,
          deep,
          handleRemove,
          handleUpdateValue,
          readOnly: readOnlyTrue,
          dataType,
          getStyle,
          cancelButtonElement,
          editButtonElement,
          inputElementGenerator,
          minusMenuElement,
          logger: logger4,
          onSubmitValueParser
        });
      default:
        return null;
    }
  }
};
JsonNode.defaultProps = {
  keyPath: [],
  deep: 0
};
var JsonObject = class extends Component2 {
  constructor(props) {
    super(props);
    const keyPath = props.deep === -1 ? [] : [...props.keyPath, props.name];
    this.state = {
      name: props.name,
      data: props.data,
      keyPath,
      deep: props.deep,
      nextDeep: props.deep + 1,
      collapsed: props.isCollapsed(keyPath, props.deep, props.data),
      addFormVisible: false
    };
    this.handleCollapseMode = this.handleCollapseMode.bind(this);
    this.handleRemoveValue = this.handleRemoveValue.bind(this);
    this.handleAddMode = this.handleAddMode.bind(this);
    this.handleAddValueAdd = this.handleAddValueAdd.bind(this);
    this.handleAddValueCancel = this.handleAddValueCancel.bind(this);
    this.handleEditValue = this.handleEditValue.bind(this);
    this.onChildUpdate = this.onChildUpdate.bind(this);
    this.renderCollapsed = this.renderCollapsed.bind(this);
    this.renderNotCollapsed = this.renderNotCollapsed.bind(this);
  }
  static getDerivedStateFromProps(props, state) {
    return props.data !== state.data ? { data: props.data } : null;
  }
  onChildUpdate(childKey, childData) {
    const { data, keyPath } = this.state;
    data[childKey] = childData;
    this.setState({
      data
    });
    const { onUpdate } = this.props;
    const size = keyPath.length;
    onUpdate(keyPath[size - 1], data);
  }
  handleAddMode() {
    this.setState({
      addFormVisible: true
    });
  }
  handleAddValueCancel() {
    this.setState({
      addFormVisible: false
    });
  }
  handleAddValueAdd({ key, newValue }) {
    const { data, keyPath, nextDeep: deep } = this.state;
    const { beforeAddAction, logger: logger4 } = this.props;
    beforeAddAction(key, keyPath, deep, newValue).then(() => {
      data[key] = newValue;
      this.setState({
        data
      });
      this.handleAddValueCancel();
      const { onUpdate, onDeltaUpdate } = this.props;
      onUpdate(keyPath[keyPath.length - 1], data);
      onDeltaUpdate({
        type: ADD_DELTA_TYPE,
        keyPath,
        deep,
        key,
        newValue
      });
    }).catch(logger4.error);
  }
  handleRemoveValue(key) {
    return () => {
      const { beforeRemoveAction, logger: logger4 } = this.props;
      const { data, keyPath, nextDeep: deep } = this.state;
      const oldValue = data[key];
      beforeRemoveAction(key, keyPath, deep, oldValue).then(() => {
        const deltaUpdateResult = {
          keyPath,
          deep,
          key,
          oldValue,
          type: REMOVE_DELTA_TYPE
        };
        delete data[key];
        this.setState({ data });
        const { onUpdate, onDeltaUpdate } = this.props;
        onUpdate(keyPath[keyPath.length - 1], data);
        onDeltaUpdate(deltaUpdateResult);
      }).catch(logger4.error);
    };
  }
  handleCollapseMode() {
    this.setState((state) => ({
      collapsed: !state.collapsed
    }));
  }
  handleEditValue({ key, value: value2 }) {
    return new Promise((resolve, reject) => {
      const { beforeUpdateAction } = this.props;
      const { data, keyPath, nextDeep: deep } = this.state;
      const oldValue = data[key];
      beforeUpdateAction(key, keyPath, deep, oldValue, value2).then(() => {
        data[key] = value2;
        this.setState({
          data
        });
        const { onUpdate, onDeltaUpdate } = this.props;
        onUpdate(keyPath[keyPath.length - 1], data);
        onDeltaUpdate({
          type: UPDATE_DELTA_TYPE,
          keyPath,
          deep,
          key,
          newValue: value2,
          oldValue
        });
        resolve();
      }).catch(reject);
    });
  }
  renderCollapsed() {
    const { name, keyPath, deep, data } = this.state;
    const { handleRemove, readOnly, dataType, getStyle, minusMenuElement } = this.props;
    const { minus, collapsed } = getStyle(name, data, keyPath, deep, dataType);
    const keyList = Object.getOwnPropertyNames(data);
    const isReadOnly = readOnly(name, data, keyPath, deep, dataType);
    const removeItemButton = cloneElement(minusMenuElement, {
      onClick: handleRemove,
      className: "rejt-minus-menu",
      style: minus
    });
    return /* @__PURE__ */ React18.createElement("span", {
      className: "rejt-collapsed"
    }, /* @__PURE__ */ React18.createElement("span", {
      className: "rejt-collapsed-text",
      style: collapsed,
      onClick: this.handleCollapseMode
    }, "{...}", " ", keyList.length, " ", keyList.length === 1 ? "key" : "keys"), !isReadOnly && removeItemButton);
  }
  renderNotCollapsed() {
    const { name, data, keyPath, deep, nextDeep, addFormVisible } = this.state;
    const {
      isCollapsed,
      handleRemove,
      onDeltaUpdate,
      readOnly,
      getStyle,
      dataType,
      addButtonElement,
      cancelButtonElement,
      editButtonElement,
      inputElementGenerator,
      textareaElementGenerator,
      minusMenuElement,
      plusMenuElement,
      beforeRemoveAction,
      beforeAddAction,
      beforeUpdateAction,
      logger: logger4,
      onSubmitValueParser
    } = this.props;
    const { minus, plus, addForm, ul, delimiter } = getStyle(name, data, keyPath, deep, dataType);
    const keyList = Object.getOwnPropertyNames(data);
    const isReadOnly = readOnly(name, data, keyPath, deep, dataType);
    const addItemButton = cloneElement(plusMenuElement, {
      onClick: this.handleAddMode,
      className: "rejt-plus-menu",
      style: plus
    });
    const removeItemButton = cloneElement(minusMenuElement, {
      onClick: handleRemove,
      className: "rejt-minus-menu",
      style: minus
    });
    const list = keyList.map((key) => /* @__PURE__ */ React18.createElement(JsonNode, {
      key,
      name: key,
      data: data[key],
      keyPath,
      deep: nextDeep,
      isCollapsed,
      handleRemove: this.handleRemoveValue(key),
      handleUpdateValue: this.handleEditValue,
      onUpdate: this.onChildUpdate,
      onDeltaUpdate,
      readOnly,
      getStyle,
      addButtonElement,
      cancelButtonElement,
      editButtonElement,
      inputElementGenerator,
      textareaElementGenerator,
      minusMenuElement,
      plusMenuElement,
      beforeRemoveAction,
      beforeAddAction,
      beforeUpdateAction,
      logger: logger4,
      onSubmitValueParser
    }));
    const startObject = "{";
    const endObject = "}";
    return /* @__PURE__ */ React18.createElement("span", {
      className: "rejt-not-collapsed"
    }, /* @__PURE__ */ React18.createElement("span", {
      className: "rejt-not-collapsed-delimiter",
      style: delimiter
    }, startObject), !isReadOnly && addItemButton, /* @__PURE__ */ React18.createElement("ul", {
      className: "rejt-not-collapsed-list",
      style: ul
    }, list), !isReadOnly && addFormVisible && /* @__PURE__ */ React18.createElement("div", {
      className: "rejt-add-form",
      style: addForm
    }, /* @__PURE__ */ React18.createElement(JsonAddValue, {
      handleAdd: this.handleAddValueAdd,
      handleCancel: this.handleAddValueCancel,
      addButtonElement,
      cancelButtonElement,
      inputElementGenerator,
      keyPath,
      deep,
      onSubmitValueParser
    })), /* @__PURE__ */ React18.createElement("span", {
      className: "rejt-not-collapsed-delimiter",
      style: delimiter
    }, endObject), !isReadOnly && removeItemButton);
  }
  render() {
    const { name, collapsed, data, keyPath, deep } = this.state;
    const { getStyle, dataType } = this.props;
    const value2 = collapsed ? this.renderCollapsed() : this.renderNotCollapsed();
    const style = getStyle(name, data, keyPath, deep, dataType);
    return /* @__PURE__ */ React18.createElement("div", {
      className: "rejt-object-node"
    }, /* @__PURE__ */ React18.createElement("span", {
      onClick: this.handleCollapseMode
    }, /* @__PURE__ */ React18.createElement("span", {
      className: "rejt-name",
      style: style.name
    }, name, " :", " ")), value2);
  }
};
JsonObject.defaultProps = {
  keyPath: [],
  deep: 0,
  minusMenuElement: /* @__PURE__ */ React18.createElement("span", null, " - "),
  plusMenuElement: /* @__PURE__ */ React18.createElement("span", null, " + ")
};
var JsonValue = class extends Component2 {
  constructor(props) {
    super(props);
    const keyPath = [...props.keyPath, props.name];
    this.state = {
      value: props.value,
      name: props.name,
      keyPath,
      deep: props.deep,
      editEnabled: false,
      inputRef: null
    };
    this.handleEditMode = this.handleEditMode.bind(this);
    this.refInput = this.refInput.bind(this);
    this.handleCancelEdit = this.handleCancelEdit.bind(this);
    this.handleEdit = this.handleEdit.bind(this);
    this.onKeydown = this.onKeydown.bind(this);
  }
  static getDerivedStateFromProps(props, state) {
    return props.value !== state.value ? { value: props.value } : null;
  }
  componentDidUpdate() {
    const { editEnabled, inputRef, name, value: value2, keyPath, deep } = this.state;
    const { readOnly, dataType } = this.props;
    const isReadOnly = readOnly(name, value2, keyPath, deep, dataType);
    if (editEnabled && !isReadOnly && typeof inputRef.focus === "function") {
      inputRef.focus();
    }
  }
  componentDidMount() {
    document.addEventListener("keydown", this.onKeydown);
  }
  componentWillUnmount() {
    document.removeEventListener("keydown", this.onKeydown);
  }
  onKeydown(event) {
    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey || event.repeat)
      return;
    if (event.code === "Enter" || event.key === "Enter") {
      event.preventDefault();
      this.handleEdit();
    }
    if (event.code === "Escape" || event.key === "Escape") {
      event.preventDefault();
      this.handleCancelEdit();
    }
  }
  handleEdit() {
    const { handleUpdateValue, originalValue, logger: logger4, onSubmitValueParser, keyPath } = this.props;
    const { inputRef, name, deep } = this.state;
    if (!inputRef)
      return;
    const newValue = onSubmitValueParser(true, keyPath, deep, name, inputRef.value);
    const result = {
      value: newValue,
      key: name
    };
    handleUpdateValue(result).then(() => {
      if (!isComponentWillChange(originalValue, newValue)) {
        this.handleCancelEdit();
      }
    }).catch(logger4.error);
  }
  handleEditMode() {
    this.setState({
      editEnabled: true
    });
  }
  refInput(node) {
    this.state.inputRef = node;
  }
  handleCancelEdit() {
    this.setState({
      editEnabled: false
    });
  }
  render() {
    const { name, value: value2, editEnabled, keyPath, deep } = this.state;
    const {
      handleRemove,
      originalValue,
      readOnly,
      dataType,
      getStyle,
      editButtonElement,
      cancelButtonElement,
      inputElementGenerator,
      minusMenuElement,
      keyPath: comeFromKeyPath
    } = this.props;
    const style = getStyle(name, originalValue, keyPath, deep, dataType);
    const isReadOnly = readOnly(name, originalValue, keyPath, deep, dataType);
    const isEditing = editEnabled && !isReadOnly;
    const inputElement = inputElementGenerator(
      VALUE,
      comeFromKeyPath,
      deep,
      name,
      originalValue,
      dataType
    );
    const editButtonElementLayout = cloneElement(editButtonElement, {
      onClick: this.handleEdit
    });
    const cancelButtonElementLayout = cloneElement(cancelButtonElement, {
      onClick: this.handleCancelEdit
    });
    const inputElementLayout = cloneElement(inputElement, {
      ref: this.refInput,
      defaultValue: JSON.stringify(originalValue)
    });
    const minusMenuLayout = cloneElement(minusMenuElement, {
      onClick: handleRemove,
      className: "rejt-minus-menu",
      style: style.minus
    });
    return /* @__PURE__ */ React18.createElement("li", {
      className: "rejt-value-node",
      style: style.li
    }, /* @__PURE__ */ React18.createElement("span", {
      className: "rejt-name",
      style: style.name
    }, name, " : "), isEditing ? /* @__PURE__ */ React18.createElement("span", {
      className: "rejt-edit-form",
      style: style.editForm
    }, inputElementLayout, " ", cancelButtonElementLayout, editButtonElementLayout) : /* @__PURE__ */ React18.createElement("span", {
      className: "rejt-value",
      style: style.value,
      onClick: isReadOnly ? null : this.handleEditMode
    }, String(value2)), !isReadOnly && !isEditing && minusMenuLayout);
  }
};
JsonValue.defaultProps = {
  keyPath: [],
  deep: 0,
  handleUpdateValue: () => Promise.resolve(),
  editButtonElement: /* @__PURE__ */ React18.createElement("button", null, "e"),
  cancelButtonElement: /* @__PURE__ */ React18.createElement("button", null, "c"),
  minusMenuElement: /* @__PURE__ */ React18.createElement("span", null, " - ")
};

// src/controls/react-editable-json-tree/utils/styles.ts
var object = {
  minus: {
    color: "red"
  },
  plus: {
    color: "green"
  },
  collapsed: {
    color: "grey"
  },
  delimiter: {},
  ul: {
    padding: "0px",
    margin: "0 0 0 25px",
    listStyle: "none"
  },
  name: {
    color: "#2287CD"
  },
  addForm: {}
};
var array = {
  minus: {
    color: "red"
  },
  plus: {
    color: "green"
  },
  collapsed: {
    color: "grey"
  },
  delimiter: {},
  ul: {
    padding: "0px",
    margin: "0 0 0 25px",
    listStyle: "none"
  },
  name: {
    color: "#2287CD"
  },
  addForm: {}
};
var value = {
  minus: {
    color: "red"
  },
  editForm: {},
  value: {
    color: "#7bba3d"
  },
  li: {
    minHeight: "22px",
    lineHeight: "22px",
    outline: "0px"
  },
  name: {
    color: "#2287CD"
  }
};

// src/controls/react-editable-json-tree/utils/parse.ts
function parse3(string) {
  let result = string;
  if (result.indexOf("function") === 0) {
    return (0, eval)(`(${result})`);
  }
  try {
    result = JSON.parse(string);
  } catch (e) {
  }
  return result;
}

// src/controls/react-editable-json-tree/index.tsx
var JsonTree = class extends Component3 {
  constructor(props) {
    super(props);
    this.state = {
      data: props.data,
      rootName: props.rootName
    };
    this.onUpdate = this.onUpdate.bind(this);
    this.removeRoot = this.removeRoot.bind(this);
  }
  static getDerivedStateFromProps(props, state) {
    if (props.data !== state.data || props.rootName !== state.rootName) {
      return {
        data: props.data,
        rootName: props.rootName
      };
    }
    return null;
  }
  onUpdate(key, data) {
    this.setState({ data });
    this.props.onFullyUpdate(data);
  }
  removeRoot() {
    this.onUpdate(null, null);
  }
  render() {
    const { data, rootName } = this.state;
    const {
      isCollapsed,
      onDeltaUpdate,
      readOnly,
      getStyle,
      addButtonElement,
      cancelButtonElement,
      editButtonElement,
      inputElement,
      textareaElement,
      minusMenuElement,
      plusMenuElement,
      beforeRemoveAction,
      beforeAddAction,
      beforeUpdateAction,
      logger: logger4,
      onSubmitValueParser,
      fallback = null
    } = this.props;
    const dataType = getObjectType(data);
    let readOnlyFunction = readOnly;
    if (getObjectType(readOnly) === "Boolean") {
      readOnlyFunction = () => readOnly;
    }
    let inputElementFunction = inputElement;
    if (inputElement && getObjectType(inputElement) !== "Function") {
      inputElementFunction = () => inputElement;
    }
    let textareaElementFunction = textareaElement;
    if (textareaElement && getObjectType(textareaElement) !== "Function") {
      textareaElementFunction = () => textareaElement;
    }
    if (dataType === "Object" || dataType === "Array") {
      return /* @__PURE__ */ React19.createElement("div", {
        className: "rejt-tree"
      }, /* @__PURE__ */ React19.createElement(JsonNode, {
        data,
        name: rootName,
        deep: -1,
        isCollapsed,
        onUpdate: this.onUpdate,
        onDeltaUpdate,
        readOnly: readOnlyFunction,
        getStyle,
        addButtonElement,
        cancelButtonElement,
        editButtonElement,
        inputElementGenerator: inputElementFunction,
        textareaElementGenerator: textareaElementFunction,
        minusMenuElement,
        plusMenuElement,
        handleRemove: this.removeRoot,
        beforeRemoveAction,
        beforeAddAction,
        beforeUpdateAction,
        logger: logger4,
        onSubmitValueParser
      }));
    }
    return fallback;
  }
};
JsonTree.defaultProps = {
  rootName: "root",
  isCollapsed: (keyPath, deep) => deep !== -1,
  getStyle: (keyName, data, keyPath, deep, dataType) => {
    switch (dataType) {
      case "Object":
      case "Error":
        return object;
      case "Array":
        return array;
      default:
        return value;
    }
  },
  readOnly: () => false,
  onFullyUpdate: () => {
  },
  onDeltaUpdate: () => {
  },
  beforeRemoveAction: () => Promise.resolve(),
  beforeAddAction: () => Promise.resolve(),
  beforeUpdateAction: () => Promise.resolve(),
  logger: { error: () => {
  } },
  onSubmitValueParser: (isEditMode, keyPath, deep, name, rawValue) => parse3(rawValue),
  inputElement: () => /* @__PURE__ */ React19.createElement("input", null),
  textareaElement: () => /* @__PURE__ */ React19.createElement("textarea", null),
  fallback: null
};

// src/controls/Object.tsx
var { window: globalWindow2 } = global4;
var Wrapper5 = styled14.div(({ theme }) => ({
  position: "relative",
  display: "flex",
  ".rejt-tree": {
    marginLeft: "1rem",
    fontSize: "13px"
  },
  ".rejt-value-node, .rejt-object-node > .rejt-collapsed, .rejt-array-node > .rejt-collapsed, .rejt-object-node > .rejt-not-collapsed, .rejt-array-node > .rejt-not-collapsed": {
    "& > svg": {
      opacity: 0,
      transition: "opacity 0.2s"
    }
  },
  ".rejt-value-node:hover, .rejt-object-node:hover > .rejt-collapsed, .rejt-array-node:hover > .rejt-collapsed, .rejt-object-node:hover > .rejt-not-collapsed, .rejt-array-node:hover > .rejt-not-collapsed": {
    "& > svg": {
      opacity: 1
    }
  },
  ".rejt-edit-form button": {
    display: "none"
  },
  ".rejt-add-form": {
    marginLeft: 10
  },
  ".rejt-add-value-node": {
    display: "inline-flex",
    alignItems: "center"
  },
  ".rejt-name": {
    lineHeight: "22px"
  },
  ".rejt-not-collapsed-delimiter": {
    lineHeight: "22px"
  },
  ".rejt-plus-menu": {
    marginLeft: 5
  },
  ".rejt-object-node > span > *": {
    position: "relative",
    zIndex: 2
  },
  ".rejt-object-node, .rejt-array-node": {
    position: "relative"
  },
  ".rejt-object-node > span:first-of-type::after, .rejt-array-node > span:first-of-type::after, .rejt-collapsed::before, .rejt-not-collapsed::before": {
    content: '""',
    position: "absolute",
    top: 0,
    display: "block",
    width: "100%",
    marginLeft: "-1rem",
    padding: "0 4px 0 1rem",
    height: 22
  },
  ".rejt-collapsed::before, .rejt-not-collapsed::before": {
    zIndex: 1,
    background: "transparent",
    borderRadius: 4,
    transition: "background 0.2s",
    pointerEvents: "none",
    opacity: 0.1
  },
  ".rejt-object-node:hover, .rejt-array-node:hover": {
    "& > .rejt-collapsed::before, & > .rejt-not-collapsed::before": {
      background: theme.color.secondary
    }
  },
  ".rejt-collapsed::after, .rejt-not-collapsed::after": {
    content: '""',
    position: "absolute",
    display: "inline-block",
    pointerEvents: "none",
    width: 0,
    height: 0
  },
  ".rejt-collapsed::after": {
    left: -8,
    top: 8,
    borderTop: "3px solid transparent",
    borderBottom: "3px solid transparent",
    borderLeft: "3px solid rgba(153,153,153,0.6)"
  },
  ".rejt-not-collapsed::after": {
    left: -10,
    top: 10,
    borderTop: "3px solid rgba(153,153,153,0.6)",
    borderLeft: "3px solid transparent",
    borderRight: "3px solid transparent"
  },
  ".rejt-value": {
    display: "inline-block",
    border: "1px solid transparent",
    borderRadius: 4,
    margin: "1px 0",
    padding: "0 4px",
    cursor: "text",
    color: theme.color.defaultText
  },
  ".rejt-value-node:hover > .rejt-value": {
    background: theme.color.lighter,
    borderColor: theme.appBorderColor
  }
}));
var Button = styled14.button(({ theme, primary }) => ({
  border: 0,
  height: 20,
  margin: 1,
  borderRadius: 4,
  background: primary ? theme.color.secondary : "transparent",
  color: primary ? theme.color.lightest : theme.color.dark,
  fontWeight: primary ? "bold" : "normal",
  cursor: "pointer",
  order: primary ? "initial" : 9
}));
var ActionIcon = styled14(Icons4)(({ theme, icon, disabled }) => ({
  display: "inline-block",
  verticalAlign: "middle",
  width: 15,
  height: 15,
  padding: 3,
  marginLeft: 5,
  cursor: disabled ? "not-allowed" : "pointer",
  color: theme.textMutedColor,
  "&:hover": disabled ? {} : {
    color: icon === "subtract" ? theme.color.negative : theme.color.ancillary
  },
  "svg + &": {
    marginLeft: 0
  }
}));
var Input = styled14.input(({ theme, placeholder }) => ({
  outline: 0,
  margin: placeholder ? 1 : "1px 0",
  padding: "3px 4px",
  color: theme.color.defaultText,
  background: theme.background.app,
  border: `1px solid ${theme.appBorderColor}`,
  borderRadius: 4,
  lineHeight: "14px",
  width: placeholder === "Key" ? 80 : 120,
  "&:focus": {
    border: `1px solid ${theme.color.secondary}`
  }
}));
var RawButton = styled14(IconButton2)(({ theme }) => ({
  position: "absolute",
  zIndex: 2,
  top: 2,
  right: 2,
  height: 21,
  padding: "0 3px",
  background: theme.background.bar,
  border: `1px solid ${theme.appBorderColor}`,
  borderRadius: 3,
  color: theme.textMutedColor,
  fontSize: "9px",
  fontWeight: "bold",
  textDecoration: "none",
  span: {
    marginLeft: 3,
    marginTop: 1
  }
}));
var RawInput = styled14(Form4.Textarea)(({ theme }) => ({
  flex: 1,
  padding: "7px 6px",
  fontFamily: theme.typography.fonts.mono,
  fontSize: "12px",
  lineHeight: "18px",
  "&::placeholder": {
    fontFamily: theme.typography.fonts.base,
    fontSize: "13px"
  },
  "&:placeholder-shown": {
    padding: "7px 10px"
  }
}));
var ENTER_EVENT = { bubbles: true, cancelable: true, key: "Enter", code: "Enter", keyCode: 13 };
var dispatchEnterKey = (event) => {
  event.currentTarget.dispatchEvent(new globalWindow2.KeyboardEvent("keydown", ENTER_EVENT));
};
var selectValue = (event) => {
  event.currentTarget.select();
};
var getCustomStyleFunction = (theme) => () => ({
  name: {
    color: theme.color.secondary
  },
  collapsed: {
    color: theme.color.dark
  },
  ul: {
    listStyle: "none",
    margin: "0 0 0 1rem",
    padding: 0
  },
  li: {
    outline: 0
  }
});
var ObjectControl = ({ name, value: value2, onChange }) => {
  const theme = useTheme();
  const data = useMemo(() => value2 && cloneDeep(value2), [value2]);
  const hasData = data !== null && data !== void 0;
  const [showRaw, setShowRaw] = useState6(!hasData);
  const [parseError, setParseError] = useState6(null);
  const updateRaw = useCallback4(
    (raw) => {
      try {
        if (raw)
          onChange(JSON.parse(raw));
        setParseError(void 0);
      } catch (e) {
        setParseError(e);
      }
    },
    [onChange]
  );
  const [forceVisible, setForceVisible] = useState6(false);
  const onForceVisible = useCallback4(() => {
    onChange({});
    setForceVisible(true);
  }, [setForceVisible]);
  const htmlElRef = useRef3(null);
  useEffect3(() => {
    if (forceVisible && htmlElRef.current)
      htmlElRef.current.select();
  }, [forceVisible]);
  if (!hasData) {
    return /* @__PURE__ */ React20.createElement(Form4.Button, {
      id: getControlSetterButtonId(name),
      onClick: onForceVisible
    }, "Set object");
  }
  const rawJSONForm = /* @__PURE__ */ React20.createElement(RawInput, {
    ref: htmlElRef,
    id: getControlId(name),
    name,
    defaultValue: value2 === null ? "" : JSON.stringify(value2, null, 2),
    onBlur: (event) => updateRaw(event.target.value),
    placeholder: "Edit JSON string...",
    autoFocus: forceVisible,
    valid: parseError ? "error" : null
  });
  return /* @__PURE__ */ React20.createElement(Wrapper5, null, ["Object", "Array"].includes(getObjectType(data)) && /* @__PURE__ */ React20.createElement(RawButton, {
    href: "#",
    onClick: (e) => {
      e.preventDefault();
      setShowRaw((v) => !v);
    }
  }, /* @__PURE__ */ React20.createElement(Icons4, {
    icon: showRaw ? "eyeclose" : "eye"
  }), /* @__PURE__ */ React20.createElement("span", null, "RAW")), !showRaw ? /* @__PURE__ */ React20.createElement(JsonTree, {
    data,
    rootName: name,
    onFullyUpdate: onChange,
    getStyle: getCustomStyleFunction(theme),
    cancelButtonElement: /* @__PURE__ */ React20.createElement(Button, {
      type: "button"
    }, "Cancel"),
    editButtonElement: /* @__PURE__ */ React20.createElement(Button, {
      type: "submit"
    }, "Save"),
    addButtonElement: /* @__PURE__ */ React20.createElement(Button, {
      type: "submit",
      primary: true
    }, "Save"),
    plusMenuElement: /* @__PURE__ */ React20.createElement(ActionIcon, {
      icon: "add"
    }),
    minusMenuElement: /* @__PURE__ */ React20.createElement(ActionIcon, {
      icon: "subtract"
    }),
    inputElement: (_, __, ___, key) => key ? /* @__PURE__ */ React20.createElement(Input, {
      onFocus: selectValue,
      onBlur: dispatchEnterKey
    }) : /* @__PURE__ */ React20.createElement(Input, null),
    fallback: rawJSONForm
  }) : rawJSONForm);
};

// src/controls/Range.tsx
import React21, { useMemo as useMemo2 } from "react";
import { styled as styled15 } from "@storybook/theming";
import { lighten, darken as darken2, rgba } from "polished";
var RangeInput = styled15.input(
  ({ theme, min, max, value: value2 }) => ({
    "&": {
      width: "100%",
      backgroundColor: "transparent",
      appearance: "none"
    },
    "&::-webkit-slider-runnable-track": {
      background: theme.base === "light" ? `linear-gradient(to right, 
            ${theme.color.green} 0%, ${theme.color.green} ${(value2 - min) / (max - min) * 100}%, 
            ${darken2(0.02, theme.input.background)} ${(value2 - min) / (max - min) * 100}%, 
            ${darken2(0.02, theme.input.background)} 100%)` : `linear-gradient(to right, 
            ${theme.color.green} 0%, ${theme.color.green} ${(value2 - min) / (max - min) * 100}%, 
            ${lighten(0.02, theme.input.background)} ${(value2 - min) / (max - min) * 100}%, 
            ${lighten(0.02, theme.input.background)} 100%)`,
      boxShadow: `${theme.appBorderColor} 0 0 0 1px inset`,
      borderRadius: 6,
      width: "100%",
      height: 6,
      cursor: "pointer"
    },
    "&::-webkit-slider-thumb": {
      marginTop: "-6px",
      width: 16,
      height: 16,
      border: `1px solid ${rgba(theme.appBorderColor, 0.2)}`,
      borderRadius: "50px",
      boxShadow: `0 1px 3px 0px ${rgba(theme.appBorderColor, 0.2)}`,
      cursor: "grab",
      appearance: "none",
      background: `${theme.input.background}`,
      transition: "all 150ms ease-out",
      "&:hover": {
        background: `${darken2(0.05, theme.input.background)}`,
        transform: "scale3d(1.1, 1.1, 1.1) translateY(-1px)",
        transition: "all 50ms ease-out"
      },
      "&:active": {
        background: `${theme.input.background}`,
        transform: "scale3d(1, 1, 1) translateY(0px)",
        cursor: "grabbing"
      }
    },
    "&:focus": {
      outline: "none",
      "&::-webkit-slider-runnable-track": {
        borderColor: rgba(theme.color.secondary, 0.4)
      },
      "&::-webkit-slider-thumb": {
        borderColor: theme.color.secondary,
        boxShadow: `0 0px 5px 0px ${theme.color.secondary}`
      }
    },
    "&::-moz-range-track": {
      background: theme.base === "light" ? `linear-gradient(to right, 
            ${theme.color.green} 0%, ${theme.color.green} ${(value2 - min) / (max - min) * 100}%, 
            ${darken2(0.02, theme.input.background)} ${(value2 - min) / (max - min) * 100}%, 
            ${darken2(0.02, theme.input.background)} 100%)` : `linear-gradient(to right, 
            ${theme.color.green} 0%, ${theme.color.green} ${(value2 - min) / (max - min) * 100}%, 
            ${lighten(0.02, theme.input.background)} ${(value2 - min) / (max - min) * 100}%, 
            ${lighten(0.02, theme.input.background)} 100%)`,
      boxShadow: `${theme.appBorderColor} 0 0 0 1px inset`,
      borderRadius: 6,
      width: "100%",
      height: 6,
      cursor: "pointer",
      outline: "none"
    },
    "&::-moz-range-thumb": {
      width: 16,
      height: 16,
      border: `1px solid ${rgba(theme.appBorderColor, 0.2)}`,
      borderRadius: "50px",
      boxShadow: `0 1px 3px 0px ${rgba(theme.appBorderColor, 0.2)}`,
      cursor: "grab",
      background: `${theme.input.background}`,
      transition: "all 150ms ease-out",
      "&:hover": {
        background: `${darken2(0.05, theme.input.background)}`,
        transform: "scale3d(1.1, 1.1, 1.1) translateY(-1px)",
        transition: "all 50ms ease-out"
      },
      "&:active": {
        background: `${theme.input.background}`,
        transform: "scale3d(1, 1, 1) translateY(0px)",
        cursor: "grabbing"
      }
    },
    "&::-ms-track": {
      background: theme.base === "light" ? `linear-gradient(to right, 
            ${theme.color.green} 0%, ${theme.color.green} ${(value2 - min) / (max - min) * 100}%, 
            ${darken2(0.02, theme.input.background)} ${(value2 - min) / (max - min) * 100}%, 
            ${darken2(0.02, theme.input.background)} 100%)` : `linear-gradient(to right, 
            ${theme.color.green} 0%, ${theme.color.green} ${(value2 - min) / (max - min) * 100}%, 
            ${lighten(0.02, theme.input.background)} ${(value2 - min) / (max - min) * 100}%, 
            ${lighten(0.02, theme.input.background)} 100%)`,
      boxShadow: `${theme.appBorderColor} 0 0 0 1px inset`,
      color: "transparent",
      width: "100%",
      height: "6px",
      cursor: "pointer"
    },
    "&::-ms-fill-lower": {
      borderRadius: 6
    },
    "&::-ms-fill-upper": {
      borderRadius: 6
    },
    "&::-ms-thumb": {
      width: 16,
      height: 16,
      background: `${theme.input.background}`,
      border: `1px solid ${rgba(theme.appBorderColor, 0.2)}`,
      borderRadius: 50,
      cursor: "grab",
      marginTop: 0
    },
    "@supports (-ms-ime-align:auto)": { "input[type=range]": { margin: "0" } }
  })
);
var RangeLabel = styled15.span({
  paddingLeft: 5,
  paddingRight: 5,
  fontSize: 12,
  whiteSpace: "nowrap",
  fontFeatureSettings: "tnum",
  fontVariantNumeric: "tabular-nums"
});
var RangeWrapper = styled15.div({
  display: "flex",
  alignItems: "center",
  width: "100%"
});
function getNumberOfDecimalPlaces(number) {
  const match = number.toString().match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
  return !match ? 0 : Math.max(
    0,
    (match[1] ? match[1].length : 0) - (match[2] ? +match[2] : 0)
  );
}
var RangeControl = ({
  name,
  value: value2,
  onChange,
  min = 0,
  max = 100,
  step = 1,
  onBlur,
  onFocus
}) => {
  const handleChange = (event) => {
    onChange(parse2(event.target.value));
  };
  const hasValue = value2 !== void 0;
  const numberOFDecimalsPlaces = useMemo2(() => getNumberOfDecimalPlaces(step), [step]);
  return /* @__PURE__ */ React21.createElement(RangeWrapper, null, /* @__PURE__ */ React21.createElement(RangeLabel, null, min), /* @__PURE__ */ React21.createElement(RangeInput, {
    id: getControlId(name),
    type: "range",
    onChange: handleChange,
    ...{ name, value: value2, min, max, step, onFocus, onBlur }
  }), /* @__PURE__ */ React21.createElement(RangeLabel, null, `${hasValue ? value2.toFixed(numberOFDecimalsPlaces) : "--"}`, " / ", max));
};

// src/controls/Text.tsx
import React22, { useCallback as useCallback5, useState as useState7 } from "react";
import { styled as styled16 } from "@storybook/theming";
import { Form as Form5 } from "@storybook/components";
var Wrapper6 = styled16.label({
  display: "flex"
});
var MaxLength = styled16.div(({ isMaxed }) => ({
  marginLeft: "0.75rem",
  paddingTop: "0.35rem",
  color: isMaxed ? "red" : void 0
}));
var TextControl = ({
  name,
  value: value2,
  onChange,
  onFocus,
  onBlur,
  maxLength
}) => {
  const handleChange = (event) => {
    onChange(event.target.value);
  };
  const [forceVisible, setForceVisible] = useState7(false);
  const onForceVisible = useCallback5(() => {
    onChange("");
    setForceVisible(true);
  }, [setForceVisible]);
  if (value2 === void 0) {
    return /* @__PURE__ */ React22.createElement(Form5.Button, {
      id: getControlSetterButtonId(name),
      onClick: onForceVisible
    }, "Set string");
  }
  const isValid = typeof value2 === "string";
  return /* @__PURE__ */ React22.createElement(Wrapper6, null, /* @__PURE__ */ React22.createElement(Form5.Textarea, {
    id: getControlId(name),
    maxLength,
    onChange: handleChange,
    size: "flex",
    placeholder: "Edit string...",
    autoFocus: forceVisible,
    valid: isValid ? null : "error",
    ...{ name, value: isValid ? value2 : "", onFocus, onBlur }
  }), maxLength && /* @__PURE__ */ React22.createElement(MaxLength, {
    isMaxed: value2?.length === maxLength
  }, value2?.length ?? 0, " / ", maxLength));
};

// src/controls/Files.tsx
import React23 from "react";
import { styled as styled17 } from "@storybook/theming";
import { Form as Form6 } from "@storybook/components";
var FileInput = styled17(Form6.Input)({
  padding: 10
});
function revokeOldUrls(urls) {
  urls.forEach((url) => {
    if (url.startsWith("blob:")) {
      URL.revokeObjectURL(url);
    }
  });
}
var FilesControl = ({
  onChange,
  name,
  accept = "image/*",
  value: value2
}) => {
  function handleFileChange(e) {
    if (!e.target.files) {
      return;
    }
    const fileUrls = Array.from(e.target.files).map((file) => URL.createObjectURL(file));
    onChange(fileUrls);
    revokeOldUrls(value2);
  }
  return /* @__PURE__ */ React23.createElement(FileInput, {
    id: getControlId(name),
    type: "file",
    name,
    multiple: true,
    onChange: handleFileChange,
    accept,
    size: "flex"
  });
};

// src/controls/index.tsx
var LazyColorControl = lazy(() => import("./Color-IQYDYPPB.mjs"));
var ColorControl = (props) => /* @__PURE__ */ React24.createElement(Suspense, {
  fallback: /* @__PURE__ */ React24.createElement("div", null)
}, /* @__PURE__ */ React24.createElement(LazyColorControl, {
  ...props
}));

// src/components/ArgsTable/ArgControl.tsx
var Controls2 = {
  array: ObjectControl,
  object: ObjectControl,
  boolean: BooleanControl,
  color: ColorControl,
  date: DateControl,
  number: NumberControl,
  check: OptionsControl,
  "inline-check": OptionsControl,
  radio: OptionsControl,
  "inline-radio": OptionsControl,
  select: OptionsControl,
  "multi-select": OptionsControl,
  range: RangeControl,
  text: TextControl,
  file: FilesControl
};
var NoControl = () => /* @__PURE__ */ React25.createElement(React25.Fragment, null, "-");
var ArgControl = ({ row, arg, updateArgs }) => {
  const { key, control } = row;
  const [isFocused, setFocused] = useState8(false);
  const [boxedValue, setBoxedValue] = useState8({ value: arg });
  useEffect4(() => {
    if (!isFocused)
      setBoxedValue({ value: arg });
  }, [isFocused, arg]);
  const onChange = useCallback6(
    (argVal) => {
      setBoxedValue({ value: argVal });
      updateArgs({ [key]: argVal });
      return argVal;
    },
    [updateArgs, key]
  );
  const onBlur = useCallback6(() => setFocused(false), []);
  const onFocus = useCallback6(() => setFocused(true), []);
  if (!control || control.disable)
    return /* @__PURE__ */ React25.createElement(NoControl, null);
  const props = { name: key, argType: row, value: boxedValue.value, onChange, onBlur, onFocus };
  const Control = Controls2[control.type] || NoControl;
  return /* @__PURE__ */ React25.createElement(Control, {
    ...props,
    ...control,
    controlType: control.type
  });
};

// src/components/ArgsTable/ArgRow.tsx
var Name = styled18.span({ fontWeight: "bold" });
var Required = styled18.span(({ theme }) => ({
  color: theme.color.negative,
  fontFamily: theme.typography.fonts.mono,
  cursor: "help"
}));
var Description2 = styled18.div(({ theme }) => ({
  "&&": {
    p: {
      margin: "0 0 10px 0"
    },
    a: {
      color: theme.color.secondary
    }
  },
  code: {
    ...codeCommon3({ theme }),
    fontSize: 12,
    fontFamily: theme.typography.fonts.mono
  },
  "& code": {
    margin: 0,
    display: "inline-block"
  },
  "& pre > code": {
    whiteSpace: "pre-wrap"
  }
}));
var Type = styled18.div(({ theme, hasDescription }) => ({
  color: theme.base === "light" ? transparentize4(0.1, theme.color.defaultText) : transparentize4(0.2, theme.color.defaultText),
  marginTop: hasDescription ? 4 : 0
}));
var TypeWithJsDoc = styled18.div(({ theme, hasDescription }) => ({
  color: theme.base === "light" ? transparentize4(0.1, theme.color.defaultText) : transparentize4(0.2, theme.color.defaultText),
  marginTop: hasDescription ? 12 : 0,
  marginBottom: 12
}));
var StyledTd = styled18.td(({ theme, expandable }) => ({
  paddingLeft: expandable ? "40px !important" : "20px !important"
}));
var ArgRow = (props) => {
  const { row, updateArgs, compact, expandable, initialExpandedArgs } = props;
  const { name, description } = row;
  const table = row.table || {};
  const type = table.type || row.type;
  const defaultValue = table.defaultValue || row.defaultValue;
  const required = row.type?.required;
  const hasDescription = description != null && description !== "";
  return /* @__PURE__ */ React26.createElement("tr", null, /* @__PURE__ */ React26.createElement(StyledTd, {
    expandable
  }, /* @__PURE__ */ React26.createElement(Name, null, name), required ? /* @__PURE__ */ React26.createElement(Required, {
    title: "Required"
  }, "*") : null), compact ? null : /* @__PURE__ */ React26.createElement("td", null, hasDescription && /* @__PURE__ */ React26.createElement(Description2, null, /* @__PURE__ */ React26.createElement(Markdown2, null, description)), table.jsDocTags != null ? /* @__PURE__ */ React26.createElement(React26.Fragment, null, /* @__PURE__ */ React26.createElement(TypeWithJsDoc, {
    hasDescription
  }, /* @__PURE__ */ React26.createElement(ArgValue, {
    value: type,
    initialExpandedArgs
  })), /* @__PURE__ */ React26.createElement(ArgJsDoc, {
    tags: table.jsDocTags
  })) : /* @__PURE__ */ React26.createElement(Type, {
    hasDescription
  }, /* @__PURE__ */ React26.createElement(ArgValue, {
    value: type,
    initialExpandedArgs
  }))), compact ? null : /* @__PURE__ */ React26.createElement("td", null, /* @__PURE__ */ React26.createElement(ArgValue, {
    value: defaultValue,
    initialExpandedArgs
  })), updateArgs ? /* @__PURE__ */ React26.createElement("td", null, /* @__PURE__ */ React26.createElement(ArgControl, {
    ...props
  })) : null);
};

// src/components/ArgsTable/SectionRow.tsx
import React27, { useState as useState9 } from "react";
import { transparentize as transparentize5 } from "polished";
import { styled as styled19 } from "@storybook/theming";
import { Icons as Icons5 } from "@storybook/components";
var ExpanderIcon = styled19(Icons5)(({ theme }) => ({
  marginRight: 8,
  marginLeft: -10,
  marginTop: -2,
  height: 12,
  width: 12,
  color: theme.base === "light" ? transparentize5(0.25, theme.color.defaultText) : transparentize5(0.3, theme.color.defaultText),
  border: "none",
  display: "inline-block"
}));
var FlexWrapper = styled19.span(({ theme }) => ({
  display: "flex",
  lineHeight: "20px",
  alignItems: "center"
}));
var Section = styled19.td(({ theme }) => ({
  position: "relative",
  letterSpacing: "0.35em",
  textTransform: "uppercase",
  fontWeight: theme.typography.weight.black,
  fontSize: theme.typography.size.s1 - 1,
  color: theme.base === "light" ? transparentize5(0.4, theme.color.defaultText) : transparentize5(0.6, theme.color.defaultText),
  background: `${theme.background.app} !important`,
  "& ~ td": {
    background: `${theme.background.app} !important`
  }
}));
var Subsection = styled19.td(({ theme }) => ({
  position: "relative",
  fontWeight: theme.typography.weight.bold,
  fontSize: theme.typography.size.s2 - 1,
  background: theme.background.content
}));
var StyledTd2 = styled19.td(({ theme }) => ({
  position: "relative"
}));
var StyledTr = styled19.tr(({ theme }) => ({
  "&:hover > td": {
    backgroundColor: `${theme.background.hoverable} !important`,
    boxShadow: `${theme.color.mediumlight} 0 - 1px 0 0 inset`,
    cursor: "row-resize"
  }
}));
var ClickIntercept = styled19.button(() => ({
  background: "none",
  border: "none",
  padding: "0",
  font: "inherit",
  position: "absolute",
  top: 0,
  bottom: 0,
  left: 0,
  right: 0,
  height: "100%",
  width: "100%",
  color: "transparent",
  cursor: "row-resize !important"
}));
var SectionRow = ({
  level = "section",
  label,
  children,
  initialExpanded = true,
  colSpan = 3
}) => {
  const [expanded, setExpanded] = useState9(initialExpanded);
  const Level = level === "subsection" ? Subsection : Section;
  const itemCount = children?.length || 0;
  const caption = level === "subsection" ? `${itemCount} item${itemCount !== 1 ? "s" : ""}` : "";
  const icon = expanded ? "arrowdown" : "arrowright";
  const helperText = `${expanded ? "Hide" : "Show"} ${level === "subsection" ? itemCount : label} item${itemCount !== 1 ? "s" : ""}`;
  return /* @__PURE__ */ React27.createElement(React27.Fragment, null, /* @__PURE__ */ React27.createElement(StyledTr, {
    title: helperText
  }, /* @__PURE__ */ React27.createElement(Level, {
    colSpan: 1
  }, /* @__PURE__ */ React27.createElement(ClickIntercept, {
    onClick: (e) => setExpanded(!expanded),
    tabIndex: 0
  }, helperText), /* @__PURE__ */ React27.createElement(FlexWrapper, null, /* @__PURE__ */ React27.createElement(ExpanderIcon, {
    icon
  }), label)), /* @__PURE__ */ React27.createElement(StyledTd2, {
    colSpan: colSpan - 1
  }, /* @__PURE__ */ React27.createElement(ClickIntercept, {
    onClick: (e) => setExpanded(!expanded),
    tabIndex: -1,
    style: { outline: "none" }
  }, helperText), expanded ? null : caption)), expanded ? children : null);
};

// src/components/ArgsTable/ArgsTable.tsx
var TableWrapper = styled20.table(
  ({ theme, compact, inAddonPanel }) => ({
    "&&": {
      borderCollapse: "collapse",
      borderSpacing: 0,
      color: theme.color.defaultText,
      "td, th": {
        padding: 0,
        border: "none",
        verticalAlign: "top",
        textOverflow: "ellipsis"
      },
      fontSize: theme.typography.size.s2 - 1,
      lineHeight: "20px",
      textAlign: "left",
      width: "100%",
      marginTop: inAddonPanel ? 0 : 25,
      marginBottom: inAddonPanel ? 0 : 40,
      "thead th:first-of-type, td:first-of-type": {
        width: "25%"
      },
      "th:first-of-type, td:first-of-type": {
        paddingLeft: 20
      },
      "th:nth-of-type(2), td:nth-of-type(2)": {
        ...compact ? null : {
          width: "35%"
        }
      },
      "td:nth-of-type(3)": {
        ...compact ? null : {
          width: "15%"
        }
      },
      "th:last-of-type, td:last-of-type": {
        paddingRight: 20,
        ...compact ? null : {
          width: "25%"
        }
      },
      th: {
        color: theme.base === "light" ? transparentize6(0.25, theme.color.defaultText) : transparentize6(0.45, theme.color.defaultText),
        paddingTop: 10,
        paddingBottom: 10,
        paddingLeft: 15,
        paddingRight: 15
      },
      td: {
        paddingTop: "10px",
        paddingBottom: "10px",
        "&:not(:first-of-type)": {
          paddingLeft: 15,
          paddingRight: 15
        },
        "&:last-of-type": {
          paddingRight: 20
        }
      },
      marginLeft: inAddonPanel ? 0 : 1,
      marginRight: inAddonPanel ? 0 : 1,
      [`tr:first-child`]: {
        [`td:first-child, th:first-child`]: {
          borderTopLeftRadius: inAddonPanel ? 0 : theme.appBorderRadius
        },
        [`td:last-child, th:last-child`]: {
          borderTopRightRadius: inAddonPanel ? 0 : theme.appBorderRadius
        }
      },
      [`tr:last-child`]: {
        [`td:first-child, th:first-child`]: {
          borderBottomLeftRadius: inAddonPanel ? 0 : theme.appBorderRadius
        },
        [`td:last-child, th:last-child`]: {
          borderBottomRightRadius: inAddonPanel ? 0 : theme.appBorderRadius
        }
      },
      tbody: {
        boxShadow: !inAddonPanel && (theme.base === "light" ? `rgba(0, 0, 0, 0.10) 0 1px 3px 1px,
          ${transparentize6(0.035, theme.appBorderColor)} 0 0 0 1px` : `rgba(0, 0, 0, 0.20) 0 2px 5px 1px,
          ${opacify2(0.05, theme.appBorderColor)} 0 0 0 1px`),
        borderRadius: theme.appBorderRadius,
        "@media not all and (min-resolution:.001dpcm)": {
          "@supports (-webkit-appearance:none)": {
            borderWidth: 1,
            borderStyle: "solid",
            ...inAddonPanel && {
              borderColor: "transparent"
            },
            ...!inAddonPanel && {
              borderColor: theme.base === "light" ? transparentize6(0.035, theme.appBorderColor) : opacify2(0.05, theme.appBorderColor)
            }
          }
        },
        tr: {
          background: "transparent",
          overflow: "hidden",
          ...inAddonPanel ? {
            borderTopWidth: 1,
            borderTopStyle: "solid",
            borderTopColor: theme.base === "light" ? darken3(0.1, theme.background.content) : lighten2(0.05, theme.background.content)
          } : {
            [`&:not(:first-child)`]: {
              borderTopWidth: 1,
              borderTopStyle: "solid",
              borderTopColor: theme.base === "light" ? darken3(0.1, theme.background.content) : lighten2(0.05, theme.background.content)
            }
          }
        },
        td: {
          background: theme.background.content
        }
      }
    }
  }),
  ({ isLoading, theme }) => isLoading ? {
    "th span, td span, td button": {
      display: "inline",
      backgroundColor: theme.appBorderColor,
      animation: `${theme.animation.glow} 1.5s ease-in-out infinite`,
      color: "transparent",
      boxShadow: "none",
      borderRadius: 0
    }
  } : {}
);
var StyledIconButton = styled20(IconButton3)(({ theme }) => ({
  color: theme.barTextColor,
  margin: "-4px -12px -4px 0"
}));
var ControlHeadingWrapper = styled20.span({
  display: "flex",
  justifyContent: "space-between"
});
var sortFns = {
  alpha: (a, b) => a.name.localeCompare(b.name),
  requiredFirst: (a, b) => Number(!!b.type?.required) - Number(!!a.type?.required) || a.name.localeCompare(b.name),
  none: void 0
};
var rowLoadingData = (key) => ({
  key,
  name: "propertyName",
  description: "This is a short description",
  control: { type: "text" },
  table: {
    type: { summary: "summary" },
    defaultValue: { summary: "defaultValue" }
  }
});
var argsTableLoadingData = {
  rows: {
    row1: rowLoadingData("row1"),
    row2: rowLoadingData("row2"),
    row3: rowLoadingData("row3")
  }
};
var groupRows = (rows, sort) => {
  const sections = { ungrouped: [], ungroupedSubsections: {}, sections: {} };
  if (!rows)
    return sections;
  Object.entries(rows).forEach(([key, row]) => {
    const { category, subcategory } = row?.table || {};
    if (category) {
      const section = sections.sections[category] || { ungrouped: [], subsections: {} };
      if (!subcategory) {
        section.ungrouped.push({ key, ...row });
      } else {
        const subsection = section.subsections[subcategory] || [];
        subsection.push({ key, ...row });
        section.subsections[subcategory] = subsection;
      }
      sections.sections[category] = section;
    } else if (subcategory) {
      const subsection = sections.ungroupedSubsections[subcategory] || [];
      subsection.push({ key, ...row });
      sections.ungroupedSubsections[subcategory] = subsection;
    } else {
      sections.ungrouped.push({ key, ...row });
    }
  });
  const sortFn = sortFns[sort];
  const sortSubsection = (record) => {
    if (!sortFn)
      return record;
    return Object.keys(record).reduce(
      (acc, cur) => ({
        ...acc,
        [cur]: record[cur].sort(sortFn)
      }),
      {}
    );
  };
  const sorted = {
    ungrouped: sections.ungrouped.sort(sortFn),
    ungroupedSubsections: sortSubsection(sections.ungroupedSubsections),
    sections: Object.keys(sections.sections).reduce(
      (acc, cur) => ({
        ...acc,
        [cur]: {
          ungrouped: sections.sections[cur].ungrouped.sort(sortFn),
          subsections: sortSubsection(sections.sections[cur].subsections)
        }
      }),
      {}
    )
  };
  return sorted;
};
var safeIncludeConditionalArg = (row, args, globals) => {
  try {
    return includeConditionalArg(row, args, globals);
  } catch (err) {
    once2.warn(err.message);
    return false;
  }
};
var ArgsTable = (props) => {
  if ("error" in props) {
    return /* @__PURE__ */ React28.createElement(EmptyBlock, null, props.error, "\xA0", /* @__PURE__ */ React28.createElement(Link, {
      href: "http://storybook.js.org/docs/",
      target: "_blank",
      withArrow: true
    }, "Read the docs"));
  }
  const {
    updateArgs,
    resetArgs,
    compact,
    inAddonPanel,
    initialExpandedArgs,
    sort = "none"
  } = props;
  const isLoading = "isLoading" in props;
  const { rows, args, globals } = "rows" in props ? props : argsTableLoadingData;
  const groups = groupRows(
    pickBy(
      rows,
      (row) => !row?.table?.disable && safeIncludeConditionalArg(row, args || {}, globals || {})
    ),
    sort
  );
  if (groups.ungrouped.length === 0 && Object.entries(groups.sections).length === 0 && Object.entries(groups.ungroupedSubsections).length === 0) {
    return /* @__PURE__ */ React28.createElement(EmptyBlock, null, "No inputs found for this component.\xA0", /* @__PURE__ */ React28.createElement(Link, {
      href: "http://storybook.js.org/docs/",
      target: "_blank",
      withArrow: true
    }, "Read the docs"));
  }
  let colSpan = 1;
  if (updateArgs)
    colSpan += 1;
  if (!compact)
    colSpan += 2;
  const expandable = Object.keys(groups.sections).length > 0;
  const common = { updateArgs, compact, inAddonPanel, initialExpandedArgs };
  return /* @__PURE__ */ React28.createElement(ResetWrapper2, null, /* @__PURE__ */ React28.createElement(TableWrapper, {
    "aria-hidden": isLoading,
    ...{ compact, inAddonPanel, isLoading },
    className: "docblock-argstable"
  }, /* @__PURE__ */ React28.createElement("thead", {
    className: "docblock-argstable-head"
  }, /* @__PURE__ */ React28.createElement("tr", null, /* @__PURE__ */ React28.createElement("th", null, /* @__PURE__ */ React28.createElement("span", null, "Name")), compact ? null : /* @__PURE__ */ React28.createElement("th", null, /* @__PURE__ */ React28.createElement("span", null, "Description")), compact ? null : /* @__PURE__ */ React28.createElement("th", null, /* @__PURE__ */ React28.createElement("span", null, "Default")), updateArgs ? /* @__PURE__ */ React28.createElement("th", null, /* @__PURE__ */ React28.createElement(ControlHeadingWrapper, null, "Control", " ", !isLoading && resetArgs && /* @__PURE__ */ React28.createElement(StyledIconButton, {
    onClick: () => resetArgs(),
    title: "Reset controls"
  }, /* @__PURE__ */ React28.createElement(Icons6, {
    icon: "undo",
    "aria-hidden": true
  })))) : null)), /* @__PURE__ */ React28.createElement("tbody", {
    className: "docblock-argstable-body"
  }, groups.ungrouped.map((row) => /* @__PURE__ */ React28.createElement(ArgRow, {
    key: row.key,
    row,
    arg: args && args[row.key],
    ...common
  })), Object.entries(groups.ungroupedSubsections).map(([subcategory, subsection]) => /* @__PURE__ */ React28.createElement(SectionRow, {
    key: subcategory,
    label: subcategory,
    level: "subsection",
    colSpan
  }, subsection.map((row) => /* @__PURE__ */ React28.createElement(ArgRow, {
    key: row.key,
    row,
    arg: args && args[row.key],
    expandable,
    ...common
  })))), Object.entries(groups.sections).map(([category, section]) => /* @__PURE__ */ React28.createElement(SectionRow, {
    key: category,
    label: category,
    level: "section",
    colSpan
  }, section.ungrouped.map((row) => /* @__PURE__ */ React28.createElement(ArgRow, {
    key: row.key,
    row,
    arg: args && args[row.key],
    ...common
  })), Object.entries(section.subsections).map(([subcategory, subsection]) => /* @__PURE__ */ React28.createElement(SectionRow, {
    key: subcategory,
    label: subcategory,
    level: "subsection",
    colSpan
  }, subsection.map((row) => /* @__PURE__ */ React28.createElement(ArgRow, {
    key: row.key,
    row,
    arg: args && args[row.key],
    expandable,
    ...common
  })))))))));
};

// src/components/ArgsTable/TabbedArgsTable.tsx
import React29 from "react";
import { TabsState } from "@storybook/components";
var TabbedArgsTable = ({ tabs, ...props }) => {
  const entries = Object.entries(tabs);
  if (entries.length === 1) {
    return /* @__PURE__ */ React29.createElement(ArgsTable, {
      ...entries[0][1],
      ...props
    });
  }
  return /* @__PURE__ */ React29.createElement(TabsState, null, entries.map((entry) => {
    const [label, table] = entry;
    const id = `prop_table_div_${label}`;
    const Component6 = "div";
    return /* @__PURE__ */ React29.createElement(Component6, {
      key: id,
      id,
      title: label
    }, ({ active }) => active ? /* @__PURE__ */ React29.createElement(ArgsTable, {
      key: `prop_table_${label}`,
      ...table,
      ...props
    }) : null);
  }));
};

// src/components/ArgsTable/NoControlsWarning.tsx
import React30 from "react";
import { styled as styled21 } from "@storybook/theming";
import { Link as Link2 } from "@storybook/components";
var NoControlsWrapper = styled21.div(({ theme }) => ({
  background: theme.background.warning,
  color: theme.color.darkest,
  padding: "10px 15px",
  lineHeight: "20px",
  boxShadow: `${theme.appBorderColor} 0 -1px 0 0 inset`
}));
var NoControlsWarning = () => /* @__PURE__ */ React30.createElement(NoControlsWrapper, null, "This story is not configured to handle controls.", " ", /* @__PURE__ */ React30.createElement(Link2, {
  href: "https://storybook.js.org/docs/react/essentials/controls",
  target: "_blank",
  cancel: false,
  withArrow: true
}, "Learn how to add controls"));

// src/components/Typeset.tsx
import React31 from "react";
import { transparentize as transparentize7 } from "polished";
import { styled as styled22 } from "@storybook/theming";
import { withReset as withReset3 } from "@storybook/components";
var Label4 = styled22.div(({ theme }) => ({
  marginRight: 30,
  fontSize: `${theme.typography.size.s1}px`,
  color: theme.base === "light" ? transparentize7(0.4, theme.color.defaultText) : transparentize7(0.6, theme.color.defaultText)
}));
var Sample = styled22.div({
  overflow: "hidden",
  whiteSpace: "nowrap",
  textOverflow: "ellipsis"
});
var TypeSpecimen = styled22.div({
  display: "flex",
  flexDirection: "row",
  alignItems: "baseline",
  "&:not(:last-child)": { marginBottom: "1rem" }
});
var Wrapper7 = styled22.div(withReset3, ({ theme }) => ({
  ...getBlockBackgroundStyle(theme),
  margin: "25px 0 40px",
  padding: "30px 20px"
}));
var Typeset = ({
  fontFamily,
  fontSizes,
  fontWeight,
  sampleText,
  ...props
}) => /* @__PURE__ */ React31.createElement(Wrapper7, {
  ...props,
  className: "docblock-typeset"
}, fontSizes.map((size) => /* @__PURE__ */ React31.createElement(TypeSpecimen, {
  key: size
}, /* @__PURE__ */ React31.createElement(Label4, null, size), /* @__PURE__ */ React31.createElement(Sample, {
  style: {
    fontFamily,
    fontSize: size,
    fontWeight,
    lineHeight: 1.2
  }
}, sampleText || "Was he a beast if music could move him so?"))));

// src/components/ColorPalette.tsx
import React32 from "react";
import { transparentize as transparentize8 } from "polished";
import { styled as styled23 } from "@storybook/theming";
import { ResetWrapper as ResetWrapper3 } from "@storybook/components";
var ItemTitle = styled23.div(({ theme }) => ({
  fontWeight: theme.typography.weight.bold,
  color: theme.color.defaultText
}));
var ItemSubtitle = styled23.div(({ theme }) => ({
  color: theme.base === "light" ? transparentize8(0.2, theme.color.defaultText) : transparentize8(0.6, theme.color.defaultText)
}));
var ItemDescription = styled23.div({
  flex: "0 0 30%",
  lineHeight: "20px",
  marginTop: 5
});
var SwatchLabel = styled23.div(({ theme }) => ({
  flex: 1,
  textAlign: "center",
  fontFamily: theme.typography.fonts.mono,
  fontSize: theme.typography.size.s1,
  lineHeight: 1,
  overflow: "hidden",
  color: theme.base === "light" ? transparentize8(0.4, theme.color.defaultText) : transparentize8(0.6, theme.color.defaultText),
  "> div": {
    display: "inline-block",
    overflow: "hidden",
    maxWidth: "100%",
    textOverflow: "ellipsis"
  },
  span: {
    display: "block",
    marginTop: 2
  }
}));
var SwatchLabels = styled23.div({
  display: "flex",
  flexDirection: "row"
});
var Swatch = styled23.div(({ background }) => ({
  position: "relative",
  flex: 1,
  "&::before": {
    position: "absolute",
    top: 0,
    left: 0,
    width: "100%",
    height: "100%",
    background,
    content: '""'
  }
}));
var SwatchColors = styled23.div(({ theme }) => ({
  ...getBlockBackgroundStyle(theme),
  display: "flex",
  flexDirection: "row",
  height: 50,
  marginBottom: 5,
  overflow: "hidden",
  backgroundColor: "white",
  backgroundImage: `repeating-linear-gradient(-45deg, #ccc, #ccc 1px, #fff 1px, #fff 16px)`,
  backgroundClip: "padding-box"
}));
var SwatchSpecimen = styled23.div({
  display: "flex",
  flexDirection: "column",
  flex: 1,
  position: "relative",
  marginBottom: 30
});
var Swatches = styled23.div({
  flex: 1,
  display: "flex",
  flexDirection: "row"
});
var Item = styled23.div({
  display: "flex",
  alignItems: "flex-start"
});
var ListName = styled23.div({
  flex: "0 0 30%"
});
var ListSwatches = styled23.div({
  flex: 1
});
var ListHeading = styled23.div(({ theme }) => ({
  display: "flex",
  flexDirection: "row",
  alignItems: "center",
  paddingBottom: 20,
  fontWeight: theme.typography.weight.bold,
  color: theme.base === "light" ? transparentize8(0.4, theme.color.defaultText) : transparentize8(0.6, theme.color.defaultText)
}));
var List = styled23.div(({ theme }) => ({
  fontSize: theme.typography.size.s2,
  lineHeight: `20px`,
  display: "flex",
  flexDirection: "column"
}));
function renderSwatch(color, index) {
  return /* @__PURE__ */ React32.createElement(Swatch, {
    key: `${color}-${index}`,
    title: color,
    background: color
  });
}
function renderSwatchLabel(color, index, colorDescription) {
  return /* @__PURE__ */ React32.createElement(SwatchLabel, {
    key: `${color}-${index}`,
    title: color
  }, /* @__PURE__ */ React32.createElement("div", null, color, colorDescription && /* @__PURE__ */ React32.createElement("span", null, colorDescription)));
}
function renderSwatchSpecimen(colors) {
  if (Array.isArray(colors)) {
    return /* @__PURE__ */ React32.createElement(SwatchSpecimen, null, /* @__PURE__ */ React32.createElement(SwatchColors, null, colors.map((color, index) => renderSwatch(color, index))), /* @__PURE__ */ React32.createElement(SwatchLabels, null, colors.map((color, index) => renderSwatchLabel(color, index))));
  }
  return /* @__PURE__ */ React32.createElement(SwatchSpecimen, null, /* @__PURE__ */ React32.createElement(SwatchColors, null, Object.values(colors).map((color, index) => renderSwatch(color, index))), /* @__PURE__ */ React32.createElement(SwatchLabels, null, Object.keys(colors).map((color, index) => renderSwatchLabel(color, index, colors[color]))));
}
var ColorItem = ({ title, subtitle, colors }) => {
  return /* @__PURE__ */ React32.createElement(Item, null, /* @__PURE__ */ React32.createElement(ItemDescription, null, /* @__PURE__ */ React32.createElement(ItemTitle, null, title), /* @__PURE__ */ React32.createElement(ItemSubtitle, null, subtitle)), /* @__PURE__ */ React32.createElement(Swatches, null, renderSwatchSpecimen(colors)));
};
var ColorPalette = ({ children, ...props }) => /* @__PURE__ */ React32.createElement(ResetWrapper3, null, /* @__PURE__ */ React32.createElement(List, {
  ...props,
  className: "docblock-colorpalette"
}, /* @__PURE__ */ React32.createElement(ListHeading, null, /* @__PURE__ */ React32.createElement(ListName, null, "Name"), /* @__PURE__ */ React32.createElement(ListSwatches, null, "Swatches")), children));

// src/components/IconGallery.tsx
import React33 from "react";
import { styled as styled24 } from "@storybook/theming";
import { ResetWrapper as ResetWrapper4 } from "@storybook/components";
var ItemLabel = styled24.div(({ theme }) => ({
  fontFamily: theme.typography.fonts.base,
  fontSize: theme.typography.size.s2,
  color: theme.color.defaultText,
  marginLeft: 10,
  lineHeight: 1.2
}));
var ItemSpecimen = styled24.div(({ theme }) => ({
  ...getBlockBackgroundStyle(theme),
  overflow: "hidden",
  height: 40,
  width: 40,
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  flex: "none",
  "> img, > svg": {
    width: 20,
    height: 20
  }
}));
var Item2 = styled24.div({
  display: "inline-flex",
  flexDirection: "row",
  alignItems: "center",
  flex: "0 1 calc(20% - 10px)",
  minWidth: 120,
  margin: "0px 10px 30px 0"
});
var List2 = styled24.div({
  display: "flex",
  flexFlow: "row wrap"
});
var IconItem = ({ name, children }) => /* @__PURE__ */ React33.createElement(Item2, null, /* @__PURE__ */ React33.createElement(ItemSpecimen, null, children), /* @__PURE__ */ React33.createElement(ItemLabel, null, name));
var IconGallery = ({ children, ...props }) => /* @__PURE__ */ React33.createElement(ResetWrapper4, null, /* @__PURE__ */ React33.createElement(List2, {
  ...props,
  className: "docblock-icongallery"
}, children));

// src/blocks/Anchor.tsx
import React34 from "react";
var anchorBlockIdFromId = (storyId) => `anchor--${storyId}`;
var Anchor = ({ storyId, children }) => /* @__PURE__ */ React34.createElement("div", {
  id: anchorBlockIdFromId(storyId)
}, children);

// src/blocks/ArgsTable.tsx
import React35, { useContext, useEffect as useEffect6, useState as useState11, useCallback as useCallback7 } from "react";
import mapValues from "lodash/mapValues";
import { filterArgTypes } from "@storybook/store";
import {
  STORY_ARGS_UPDATED,
  UPDATE_STORY_ARGS,
  RESET_STORY_ARGS,
  GLOBALS_UPDATED
} from "@storybook/core-events";

// src/blocks/DocsContext.ts
import { createContext as createContext2 } from "react";
import { window as globalWindow3 } from "global";
if (globalWindow3 && globalWindow3.__DOCS_CONTEXT__ === void 0) {
  globalWindow3.__DOCS_CONTEXT__ = createContext2(null);
  globalWindow3.__DOCS_CONTEXT__.displayName = "DocsContext";
}
var DocsContext = globalWindow3 ? globalWindow3.__DOCS_CONTEXT__ : createContext2(null);

// src/blocks/types.ts
import { once as once3 } from "@storybook/client-logger";
var CURRENT_SELECTION = ".";
var currentSelectionWarning = () => once3.warn(
  '`of="."` (current selection) is no longer supported in doc blocks. Falling back to primary story'
);
var PRIMARY_STORY = "^";

// src/blocks/utils.ts
var titleCase = (str2) => str2.split("-").map((part) => part.charAt(0).toUpperCase() + part.slice(1)).join("");
var getComponentName = (component) => {
  if (!component) {
    return void 0;
  }
  if (typeof component === "string") {
    if (component.includes("-")) {
      return titleCase(component);
    }
    return component;
  }
  if (component.__docgenInfo && component.__docgenInfo.displayName) {
    return component.__docgenInfo.displayName;
  }
  return component.name;
};
function scrollToElement(element, block = "start") {
  element.scrollIntoView({
    behavior: "smooth",
    block,
    inline: "nearest"
  });
}

// src/blocks/useStory.ts
import { useState as useState10, useEffect as useEffect5 } from "react";
function useStory(storyId, context) {
  const stories = useStories([storyId], context);
  return stories && stories[0];
}
function useStories(storyIds, context) {
  const [storiesById, setStories] = useState10({});
  useEffect5(() => {
    Promise.all(
      storyIds.map(async (storyId) => {
        const story = await context.loadStory(storyId);
        setStories(
          (current) => current[storyId] === story ? current : { ...current, [storyId]: story }
        );
      })
    );
  });
  return storyIds.map((storyId) => {
    if (storiesById[storyId])
      return storiesById[storyId];
    try {
      return context.storyById(storyId);
    } catch (err) {
      return null;
    }
  });
}

// src/blocks/ArgsTable.tsx
var useArgs = (storyId, context) => {
  const storyContext = context.getStoryContext(context.storyById());
  const [args, setArgs] = useState11(storyContext.args);
  useEffect6(() => {
    const cb = (changed) => {
      if (changed.storyId === storyId) {
        setArgs(changed.args);
      }
    };
    context.channel.on(STORY_ARGS_UPDATED, cb);
    return () => context.channel.off(STORY_ARGS_UPDATED, cb);
  }, [storyId]);
  const updateArgs = useCallback7(
    (updatedArgs) => context.channel.emit(UPDATE_STORY_ARGS, { storyId, updatedArgs }),
    [storyId]
  );
  const resetArgs = useCallback7(
    (argNames) => context.channel.emit(RESET_STORY_ARGS, { storyId, argNames }),
    [storyId]
  );
  return [args, updateArgs, resetArgs];
};
var useGlobals = (context) => {
  const storyContext = context.getStoryContext(context.storyById());
  const [globals, setGlobals] = useState11(storyContext.globals);
  useEffect6(() => {
    const cb = (changed) => {
      setGlobals(changed.globals);
    };
    context.channel.on(GLOBALS_UPDATED, cb);
    return () => context.channel.off(GLOBALS_UPDATED, cb);
  }, []);
  return [globals];
};
var extractComponentArgTypes = (component, context, include, exclude) => {
  const { parameters } = context.storyById();
  const { extractArgTypes } = parameters.docs || {};
  if (!extractArgTypes) {
    throw new Error("Args unsupported. See Args documentation for your framework." /* ARGS_UNSUPPORTED */);
  }
  let argTypes = extractArgTypes(component);
  argTypes = filterArgTypes(argTypes, include, exclude);
  return argTypes;
};
var isShortcut = (value2) => {
  return value2 && [CURRENT_SELECTION, PRIMARY_STORY].includes(value2);
};
var getComponent = (props = {}, context) => {
  const { of } = props;
  const { story } = props;
  const { component } = context.storyById();
  if (isShortcut(of) || isShortcut(story)) {
    return component || null;
  }
  if (!of) {
    throw new Error("No component found." /* NO_COMPONENT */);
  }
  return of;
};
var addComponentTabs = (tabs, components3, context, include, exclude, sort) => ({
  ...tabs,
  ...mapValues(components3, (comp) => ({
    rows: extractComponentArgTypes(comp, context, include, exclude),
    sort
  }))
});
var StoryTable = (props) => {
  const context = useContext(DocsContext);
  const {
    story: storyName,
    component,
    subcomponents,
    showComponent,
    include,
    exclude,
    sort
  } = props;
  try {
    let storyId;
    switch (storyName) {
      case CURRENT_SELECTION:
      case PRIMARY_STORY: {
        if (storyName === CURRENT_SELECTION)
          currentSelectionWarning();
        const primaryStory = context.storyById();
        storyId = primaryStory.id;
        break;
      }
      default: {
        storyId = context.storyIdByName(storyName);
      }
    }
    const story = useStory(storyId, context);
    let [args, updateArgs, resetArgs] = useArgs(storyId, context);
    const [globals] = useGlobals(context);
    if (!story)
      return /* @__PURE__ */ React35.createElement(ArgsTable, {
        isLoading: true,
        updateArgs,
        resetArgs
      });
    const argTypes = filterArgTypes(story.argTypes, include, exclude);
    const mainLabel = getComponentName(component) || "Story";
    let tabs = { [mainLabel]: { rows: argTypes, args, globals, updateArgs, resetArgs } };
    const storyHasArgsWithControls = argTypes && Object.values(argTypes).find((v) => !!v?.control);
    if (!storyHasArgsWithControls) {
      updateArgs = null;
      resetArgs = null;
      tabs = {};
    }
    if (component && (!storyHasArgsWithControls || showComponent)) {
      tabs = addComponentTabs(tabs, { [mainLabel]: component }, context, include, exclude);
    }
    if (subcomponents) {
      if (Array.isArray(subcomponents)) {
        throw new Error(
          `Unexpected subcomponents array. Expected an object whose keys are tab labels and whose values are components.`
        );
      }
      tabs = addComponentTabs(tabs, subcomponents, context, include, exclude);
    }
    return /* @__PURE__ */ React35.createElement(TabbedArgsTable, {
      tabs,
      sort
    });
  } catch (err) {
    return /* @__PURE__ */ React35.createElement(ArgsTable, {
      error: err.message
    });
  }
};
var ComponentsTable = (props) => {
  const context = useContext(DocsContext);
  const { components: components3, include, exclude, sort } = props;
  const tabs = addComponentTabs({}, components3, context, include, exclude);
  return /* @__PURE__ */ React35.createElement(TabbedArgsTable, {
    tabs,
    sort
  });
};
var ArgsTable2 = (props) => {
  const context = useContext(DocsContext);
  const {
    parameters: { controls },
    subcomponents
  } = context.storyById();
  const { include, exclude, components: components3, sort: sortProp } = props;
  const { story: storyName } = props;
  const sort = sortProp || controls?.sort;
  const main = getComponent(props, context);
  if (storyName) {
    return /* @__PURE__ */ React35.createElement(StoryTable, {
      ...props,
      component: main,
      ...{ subcomponents, sort }
    });
  }
  if (!components3 && !subcomponents) {
    let mainProps;
    try {
      mainProps = { rows: extractComponentArgTypes(main, context, include, exclude) };
    } catch (err) {
      mainProps = { error: err.message };
    }
    return /* @__PURE__ */ React35.createElement(ArgsTable, {
      ...mainProps,
      sort
    });
  }
  if (components3) {
    return /* @__PURE__ */ React35.createElement(ComponentsTable, {
      ...props,
      ...{ components: components3, sort }
    });
  }
  const mainLabel = getComponentName(main);
  return /* @__PURE__ */ React35.createElement(ComponentsTable, {
    ...props,
    components: { [mainLabel]: main, ...subcomponents },
    sort
  });
};
ArgsTable2.defaultProps = {
  of: PRIMARY_STORY
};

// src/blocks/Canvas.tsx
import React38, { useContext as useContext3 } from "react";

// src/blocks/SourceContainer.tsx
import React36, { createContext as createContext3, useEffect as useEffect7, useState as useState12 } from "react";
import { dequal as deepEqual } from "dequal";
import { SNIPPET_RENDERED } from "@storybook/docs-tools";
var SourceContext = createContext3({ sources: {} });
var SourceContainer = ({ children, channel }) => {
  const [sources, setSources] = useState12({});
  useEffect7(() => {
    const handleSnippetRendered = (id, newSource, format2 = false) => {
      if (sources[id] && sources[id].code === newSource) {
        return;
      }
      setSources((current) => {
        const newSources = {
          ...current,
          [id]: { code: newSource, format: format2 }
        };
        if (!deepEqual(current, newSources)) {
          return newSources;
        }
        return current;
      });
    };
    channel.on(SNIPPET_RENDERED, handleSnippetRendered);
    return () => channel.off(SNIPPET_RENDERED, handleSnippetRendered);
  }, []);
  return /* @__PURE__ */ React36.createElement(SourceContext.Provider, {
    value: { sources }
  }, children);
};

// src/blocks/Source.tsx
import React37, { useContext as useContext2 } from "react";
import { SourceType } from "@storybook/docs-tools";

// src/blocks/enhanceSource.ts
import { combineParameters } from "@storybook/store";
function extractSource(location, lines) {
  const { startBody: start, endBody: end } = location;
  if (start.line === end.line && lines[start.line - 1] !== void 0) {
    return lines[start.line - 1].substring(start.col, end.col);
  }
  const startLine = lines[start.line - 1];
  const endLine = lines[end.line - 1];
  if (startLine === void 0 || endLine === void 0) {
    return null;
  }
  return [
    startLine.substring(start.col),
    ...lines.slice(start.line, end.line - 1),
    endLine.substring(0, end.col)
  ].join("\n");
}
var storyIdToSanitizedStoryName = (id) => id.replace(/^.*?--/, "");
var extract = (targetId, { source, locationsMap }) => {
  if (!locationsMap) {
    return source;
  }
  const sanitizedStoryName = storyIdToSanitizedStoryName(targetId);
  const location = locationsMap[sanitizedStoryName];
  if (!location) {
    return source;
  }
  const lines = source.split("\n");
  return extractSource(location, lines);
};
var enhanceSource = (story) => {
  const { id, parameters } = story;
  const { storySource, docs = {} } = parameters;
  const { transformSource } = docs;
  if (!storySource?.source || docs.source?.code) {
    return null;
  }
  const input = extract(id, storySource);
  const code = transformSource ? transformSource(input, story) : input;
  return { docs: combineParameters(docs, { source: { code } }) };
};

// src/blocks/Source.tsx
var SourceState = /* @__PURE__ */ ((SourceState2) => {
  SourceState2["OPEN"] = "open";
  SourceState2["CLOSED"] = "closed";
  SourceState2["NONE"] = "none";
  return SourceState2;
})(SourceState || {});
var getSourceState = (stories) => {
  const states = stories.map((story) => story.parameters.docs?.source?.state).filter(Boolean);
  if (states.length === 0)
    return "closed" /* CLOSED */;
  return states[0];
};
var getStorySource = (storyId, sourceContext) => {
  const { sources } = sourceContext;
  return sources?.[storyId] || { code: "", format: false };
};
var getSnippet = (snippet, story) => {
  if (!story) {
    return snippet;
  }
  const { parameters } = story;
  const isArgsStory = parameters.__isArgsStory;
  const type = parameters.docs?.source?.type || SourceType.AUTO;
  const userCode = parameters.docs?.source?.code;
  if (userCode !== void 0) {
    return userCode;
  }
  if (type === SourceType.DYNAMIC) {
    return parameters.docs?.transformSource?.(snippet, story) || snippet;
  }
  if (type === SourceType.AUTO && snippet && isArgsStory) {
    return parameters.docs?.transformSource?.(snippet, story) || snippet;
  }
  const enhanced = enhanceSource(story) || parameters;
  return enhanced?.docs?.source?.code || "";
};
var getSourceProps = (props, docsContext, sourceContext) => {
  const { id: primaryId, parameters } = docsContext.storyById();
  const codeProps = props;
  const singleProps = props;
  const multiProps = props;
  let source = codeProps.code;
  let { format: format2 } = codeProps;
  const targetIds = multiProps.ids || [singleProps.id || primaryId];
  const storyIds = targetIds.map((targetId) => {
    if (targetId === CURRENT_SELECTION)
      currentSelectionWarning();
    return targetId === CURRENT_SELECTION ? primaryId : targetId;
  });
  const stories = useStories(storyIds, docsContext);
  if (!stories.every(Boolean)) {
    return { error: "Oh no! The source is not available." /* SOURCE_UNAVAILABLE */, state: "none" /* NONE */ };
  }
  if (!source) {
    ({ format: format2 } = getStorySource(storyIds[0], sourceContext));
    source = storyIds.map((storyId, idx) => {
      const { code: storySource } = getStorySource(storyId, sourceContext);
      const storyObj = stories[idx];
      return getSnippet(storySource, storyObj);
    }).join("\n\n");
  }
  const state = getSourceState(stories);
  const { docs: docsParameters = {} } = parameters;
  const { source: sourceParameters = {} } = docsParameters;
  const { language: docsLanguage = null } = sourceParameters;
  return source ? {
    code: source,
    state,
    format: format2,
    language: props.language || docsLanguage || "jsx",
    dark: props.dark || false
  } : { error: "Oh no! The source is not available." /* SOURCE_UNAVAILABLE */, state };
};
var Source2 = (props) => {
  const sourceContext = useContext2(SourceContext);
  const docsContext = useContext2(DocsContext);
  const sourceProps = getSourceProps(props, docsContext, sourceContext);
  return /* @__PURE__ */ React37.createElement(Source, {
    ...sourceProps
  });
};

// src/blocks/Canvas.tsx
var getPreviewProps = ({ withSource, mdxSource, children, ...props }, docsContext, sourceContext) => {
  let sourceState = withSource;
  let isLoading = false;
  if (sourceState === "none" /* NONE */) {
    return { isLoading, previewProps: props };
  }
  if (mdxSource) {
    return {
      isLoading,
      previewProps: {
        ...props,
        withSource: getSourceProps({ code: decodeURI(mdxSource) }, docsContext, sourceContext),
        isExpanded: sourceState === "open" /* OPEN */
      }
    };
  }
  const childArray = Array.isArray(children) ? children : [children];
  const storyChildren = childArray.filter(
    (c) => c.props && (c.props.id || c.props.name || c.props.of)
  );
  const targetIds = storyChildren.map(({ props: { id, of, name } }) => {
    if (id)
      return id;
    if (of)
      return docsContext.storyIdByModuleExport(of);
    return docsContext.storyIdByName(name);
  });
  const sourceProps = getSourceProps({ ids: targetIds }, docsContext, sourceContext);
  if (!sourceState)
    sourceState = sourceProps.state;
  const storyIds = targetIds.map((targetId) => {
    if (targetId === CURRENT_SELECTION)
      currentSelectionWarning();
    return targetId === CURRENT_SELECTION ? docsContext.storyById().id : targetId;
  });
  const stories = useStories(storyIds, docsContext);
  isLoading = stories.some((s) => !s);
  return {
    isLoading,
    previewProps: {
      ...props,
      withSource: sourceProps,
      isExpanded: sourceState === "open" /* OPEN */
    }
  };
};
var Canvas = (props) => {
  const docsContext = useContext3(DocsContext);
  const sourceContext = useContext3(SourceContext);
  const { isLoading, previewProps } = getPreviewProps(props, docsContext, sourceContext);
  const { children } = props;
  if (isLoading)
    return /* @__PURE__ */ React38.createElement(PreviewSkeleton, null);
  return /* @__PURE__ */ React38.createElement(Preview, {
    ...previewProps
  }, children);
};

// src/blocks/Description.tsx
import React39, { useContext as useContext4 } from "react";
import { str } from "@storybook/docs-tools";
var DescriptionType = /* @__PURE__ */ ((DescriptionType2) => {
  DescriptionType2["INFO"] = "info";
  DescriptionType2["NOTES"] = "notes";
  DescriptionType2["DOCGEN"] = "docgen";
  DescriptionType2["LEGACY_5_2"] = "legacy-5.2";
  DescriptionType2["AUTO"] = "auto";
  return DescriptionType2;
})(DescriptionType || {});
var getNotes = (notes) => notes && (typeof notes === "string" ? notes : str(notes.markdown) || str(notes.text));
var getInfo = (info) => info && (typeof info === "string" ? info : str(info.text));
var noDescription = (component) => null;
var getDescriptionProps = ({ of, type, markdown, children }, { storyById }) => {
  const { component, parameters } = storyById();
  if (children || markdown) {
    return { markdown: children || markdown };
  }
  const { notes, info, docs } = parameters;
  const { extractComponentDescription = noDescription, description } = docs || {};
  if (of === CURRENT_SELECTION)
    currentSelectionWarning();
  const target = [CURRENT_SELECTION, PRIMARY_STORY].includes(of) ? component : of;
  const componentDescriptionParameter = description?.component;
  if (componentDescriptionParameter) {
    return { markdown: componentDescriptionParameter };
  }
  switch (type) {
    case "info" /* INFO */:
      return { markdown: getInfo(info) };
    case "notes" /* NOTES */:
      return { markdown: getNotes(notes) };
    case "legacy-5.2" /* LEGACY_5_2 */:
      return {
        markdown: `
${getNotes(notes) || getInfo(info) || ""}

${extractComponentDescription(target) || ""}
`.trim()
      };
    case "docgen" /* DOCGEN */:
    case "auto" /* AUTO */:
    default:
      return { markdown: extractComponentDescription(target, { component, ...parameters }) };
  }
};
var DescriptionContainer = (props) => {
  const context = useContext4(DocsContext);
  const { markdown } = getDescriptionProps(props, context);
  return markdown ? /* @__PURE__ */ React39.createElement(Description, {
    markdown
  }) : null;
};
DescriptionContainer.defaultProps = {
  of: PRIMARY_STORY
};

// src/blocks/Docs.tsx
import React51 from "react";

// src/blocks/DocsContainer.tsx
import React40, { useEffect as useEffect8 } from "react";
import global5 from "global";
import { ThemeProvider as ThemeProvider2, ensure as ensureTheme } from "@storybook/theming";
var { document: document2, window: globalWindow4 } = global5;
var DocsContainer = ({
  context,
  theme,
  children
}) => {
  useEffect8(() => {
    let url;
    try {
      url = new URL(globalWindow4.parent.location);
      if (url.hash) {
        const element = document2.getElementById(url.hash.substring(1));
        if (element) {
          setTimeout(() => {
            scrollToElement(element);
          }, 200);
        }
      }
    } catch (err) {
    }
  });
  return /* @__PURE__ */ React40.createElement(DocsContext.Provider, {
    value: context
  }, /* @__PURE__ */ React40.createElement(SourceContainer, {
    channel: context.channel
  }, /* @__PURE__ */ React40.createElement(ThemeProvider2, {
    theme: ensureTheme(theme)
  }, /* @__PURE__ */ React40.createElement(DocsWrapper, {
    className: "sbdocs sbdocs-wrapper"
  }, /* @__PURE__ */ React40.createElement(DocsContent, {
    className: "sbdocs sbdocs-content"
  }, children)))));
};

// src/blocks/DocsPage.tsx
import React50 from "react";

// src/blocks/Title.tsx
import React41, { useContext as useContext5 } from "react";
var STORY_KIND_PATH_SEPARATOR = /\s*\/\s*/;
var extractTitle = (title) => {
  const groups = title.trim().split(STORY_KIND_PATH_SEPARATOR);
  return groups && groups[groups.length - 1] || title;
};
var Title2 = ({ children }) => {
  const context = useContext5(DocsContext);
  let text = children;
  if (!text) {
    text = extractTitle(context.storyById().title);
  }
  return text ? /* @__PURE__ */ React41.createElement(Title, {
    className: "sbdocs-title"
  }, text) : null;
};

// src/blocks/Subtitle.tsx
import React42, { useContext as useContext6 } from "react";
var Subtitle2 = ({ children }) => {
  const docsContext = useContext6(DocsContext);
  const { parameters } = docsContext.storyById();
  let text = children;
  if (!text) {
    text = parameters?.componentSubtitle;
  }
  return text ? /* @__PURE__ */ React42.createElement(Subtitle, {
    className: "sbdocs-subtitle"
  }, text) : null;
};

// src/blocks/Primary.tsx
import React47, { useContext as useContext9 } from "react";

// src/blocks/DocsStory.tsx
import React46 from "react";
import deprecate from "util-deprecate";
import { dedent as dedent2 } from "ts-dedent";

// src/blocks/Subheading.tsx
import React44 from "react";
import { H3 } from "@storybook/components";

// src/blocks/mdx.tsx
import React43, { useContext as useContext7 } from "react";
import { NAVIGATE_URL } from "@storybook/core-events";
import { Code, components as components2 } from "@storybook/components";
import global6 from "global";
import { styled as styled25 } from "@storybook/theming";
var { document: document3 } = global6;
var assertIsFn = (val) => {
  if (typeof val !== "function") {
    throw new Error(`Expected story function, got: ${val}`);
  }
  return val;
};
var AddContext = (props) => {
  const { children, ...rest } = props;
  const parentContext = React43.useContext(DocsContext);
  return /* @__PURE__ */ React43.createElement(DocsContext.Provider, {
    value: { ...parentContext, ...rest }
  }, children);
};
var CodeOrSourceMdx = ({ className, children, ...rest }) => {
  if (typeof className !== "string" && (typeof children !== "string" || !children.match(/[\n\r]/g))) {
    return /* @__PURE__ */ React43.createElement(Code, null, children);
  }
  const language = className && className.split("-");
  return /* @__PURE__ */ React43.createElement(Source, {
    language: language && language[1] || "plaintext",
    format: false,
    code: children,
    ...rest
  });
};
function navigate(context, url) {
  context.channel.emit(NAVIGATE_URL, url);
}
var A = components2.a;
var AnchorInPage = ({ hash, children }) => {
  const context = useContext7(DocsContext);
  return /* @__PURE__ */ React43.createElement(A, {
    href: hash,
    target: "_self",
    onClick: (event) => {
      const id = hash.substring(1);
      const element = document3.getElementById(id);
      if (element) {
        navigate(context, hash);
      }
    }
  }, children);
};
var AnchorMdx = (props) => {
  const { href, target, children, ...rest } = props;
  const context = useContext7(DocsContext);
  if (href) {
    if (href.startsWith("#")) {
      return /* @__PURE__ */ React43.createElement(AnchorInPage, {
        hash: href
      }, children);
    }
    if (target !== "_blank" && !href.startsWith("https://")) {
      return /* @__PURE__ */ React43.createElement(A, {
        href,
        onClick: (event) => {
          event.preventDefault();
          navigate(context, event.currentTarget.getAttribute("href"));
        },
        target,
        ...rest
      }, children);
    }
  }
  return /* @__PURE__ */ React43.createElement(A, {
    ...props
  });
};
var SUPPORTED_MDX_HEADERS = ["h1", "h2", "h3", "h4", "h5", "h6"];
var OcticonHeaders = SUPPORTED_MDX_HEADERS.reduce(
  (acc, headerType) => ({
    ...acc,
    [headerType]: styled25(components2[headerType])({
      "& svg": {
        visibility: "hidden"
      },
      "&:hover svg": {
        visibility: "visible"
      }
    })
  }),
  {}
);
var OcticonAnchor = styled25.a(() => ({
  float: "left",
  paddingRight: "4px",
  marginLeft: "-20px",
  color: "inherit"
}));
var HeaderWithOcticonAnchor = ({
  as,
  id,
  children,
  ...rest
}) => {
  const context = useContext7(DocsContext);
  const OcticonHeader = OcticonHeaders[as];
  const hash = `#${id}`;
  return /* @__PURE__ */ React43.createElement(OcticonHeader, {
    id,
    ...rest
  }, /* @__PURE__ */ React43.createElement(OcticonAnchor, {
    "aria-hidden": "true",
    href: hash,
    tabIndex: -1,
    target: "_self",
    onClick: (event) => {
      const element = document3.getElementById(id);
      if (element) {
        navigate(context, hash);
      }
    }
  }, /* @__PURE__ */ React43.createElement("svg", {
    viewBox: "0 0 16 16",
    version: "1.1",
    width: "16",
    height: "16",
    "aria-hidden": "true",
    fill: "currentColor"
  }, /* @__PURE__ */ React43.createElement("path", {
    fillRule: "evenodd",
    d: "M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
  }))), children);
};
var HeaderMdx = (props) => {
  const { as, id, children, ...rest } = props;
  if (id) {
    return /* @__PURE__ */ React43.createElement(HeaderWithOcticonAnchor, {
      as,
      id,
      ...rest
    }, children);
  }
  const Header = components2[as];
  return /* @__PURE__ */ React43.createElement(Header, {
    ...props
  });
};
var HeadersMdx = SUPPORTED_MDX_HEADERS.reduce(
  (acc, headerType) => ({
    ...acc,
    [headerType]: (props) => /* @__PURE__ */ React43.createElement(HeaderMdx, {
      as: headerType,
      ...props
    })
  }),
  {}
);

// src/blocks/Subheading.tsx
var Subheading = ({ children, disableAnchor }) => {
  if (disableAnchor || typeof children !== "string") {
    return /* @__PURE__ */ React44.createElement(H3, null, children);
  }
  const tagID = children.toLowerCase().replace(/[^a-z0-9]/gi, "-");
  return /* @__PURE__ */ React44.createElement(HeaderMdx, {
    as: "h3",
    id: tagID
  }, children);
};

// src/blocks/Story.tsx
import React45, {
  useContext as useContext8,
  useRef as useRef4,
  useEffect as useEffect9,
  useState as useState13
} from "react";
var storyBlockIdFromId = (storyId) => `story--${storyId}`;
var getStoryId2 = (props, context) => {
  const { id, of, meta } = props;
  if (of) {
    return context.storyIdByModuleExport(of, meta);
  }
  const { name } = props;
  if (id === CURRENT_SELECTION)
    currentSelectionWarning();
  const inputId = id === CURRENT_SELECTION ? context.storyById().id : id;
  return inputId || context.storyIdByName(name);
};
var getStoryProps = ({ height, inline }, story) => {
  const { name: storyName, parameters = {} } = story || {};
  const { docs = {} } = parameters;
  if (docs.disable) {
    return null;
  }
  const { inlineStories = false, iframeHeight = 100 } = docs;
  const storyIsInline = typeof inline === "boolean" ? inline : inlineStories;
  return {
    inline: storyIsInline,
    id: story?.id,
    height: height || (storyIsInline ? void 0 : iframeHeight),
    title: storyName,
    ...storyIsInline && {
      parameters
    }
  };
};
var Story2 = (props) => {
  const context = useContext8(DocsContext);
  const storyRef = useRef4();
  const storyId = getStoryId2(props, context);
  const story = useStory(storyId, context);
  const [showLoader, setShowLoader] = useState13(true);
  useEffect9(() => {
    let cleanup;
    if (story && storyRef.current) {
      const element = storyRef.current;
      cleanup = context.renderStoryToElement(story, element);
      setShowLoader(false);
    }
    return () => cleanup && cleanup();
  }, [story]);
  if (!story) {
    return /* @__PURE__ */ React45.createElement(StorySkeleton, null);
  }
  const storyProps = getStoryProps(props, story);
  if (!storyProps) {
    return null;
  }
  if (storyProps.inline) {
    const htmlContents = `<span></span>`;
    const { height } = storyProps;
    return /* @__PURE__ */ React45.createElement("div", {
      id: storyBlockIdFromId(story.id)
    }, height ? /* @__PURE__ */ React45.createElement("style", null, `#story--${story.id} { min-height: ${height}px; transform: translateZ(0); overflow: auto }`) : null, showLoader && /* @__PURE__ */ React45.createElement(StorySkeleton, null), /* @__PURE__ */ React45.createElement("div", {
      ref: storyRef,
      "data-name": story.name,
      dangerouslySetInnerHTML: { __html: htmlContents }
    }));
  }
  return /* @__PURE__ */ React45.createElement("div", {
    id: storyBlockIdFromId(story.id)
  }, /* @__PURE__ */ React45.createElement(Story, {
    ...storyProps
  }));
};
Story2.defaultProps = {
  children: null,
  name: null
};

// src/blocks/DocsStory.tsx
var warnStoryDescription = deprecate(
  () => {
  },
  dedent2`
    Deprecated parameter: docs.storyDescription => docs.description.story
      
    https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#docs-description-parameter
  `
);
var DocsStory = ({
  id,
  name,
  expanded = true,
  withToolbar = false,
  parameters = {}
}) => {
  let description;
  const { docs } = parameters;
  if (expanded && docs) {
    description = docs.description?.story;
    if (!description) {
      description = docs.storyDescription;
      if (description)
        warnStoryDescription();
    }
  }
  const subheading = expanded && name;
  return /* @__PURE__ */ React46.createElement(Anchor, {
    storyId: id
  }, subheading && /* @__PURE__ */ React46.createElement(Subheading, null, subheading), description && /* @__PURE__ */ React46.createElement(DescriptionContainer, {
    markdown: description
  }), /* @__PURE__ */ React46.createElement(Canvas, {
    withToolbar
  }, /* @__PURE__ */ React46.createElement(Story2, {
    id,
    parameters
  })));
};

// src/blocks/Primary.tsx
var Primary = ({ name }) => {
  const docsContext = useContext9(DocsContext);
  const storyId = name && docsContext.storyIdByName(name);
  const story = docsContext.storyById(storyId);
  return story ? /* @__PURE__ */ React47.createElement(DocsStory, {
    ...story,
    expanded: false,
    withToolbar: true
  }) : null;
};

// src/blocks/Stories.tsx
import React49, { useContext as useContext10 } from "react";

// src/blocks/Heading.tsx
import React48 from "react";
import { H2 } from "@storybook/components";
var Heading = ({ children, disableAnchor }) => {
  if (disableAnchor || typeof children !== "string") {
    return /* @__PURE__ */ React48.createElement(H2, null, children);
  }
  const tagID = children.toLowerCase().replace(/[^a-z0-9]/gi, "-");
  return /* @__PURE__ */ React48.createElement(HeaderMdx, {
    as: "h2",
    id: tagID
  }, children);
};

// src/blocks/Stories.tsx
var Stories = ({ title, includePrimary = false }) => {
  const { componentStories } = useContext10(DocsContext);
  let stories = componentStories();
  stories = stories.filter((story) => !story.parameters?.docs?.disable);
  if (!includePrimary)
    stories = stories.slice(1);
  if (!stories || stories.length === 0) {
    return null;
  }
  return /* @__PURE__ */ React49.createElement(React49.Fragment, null, /* @__PURE__ */ React49.createElement(Heading, null, title), stories.map((story) => story && /* @__PURE__ */ React49.createElement(DocsStory, {
    key: story.id,
    ...story,
    expanded: true
  })));
};
Stories.defaultProps = {
  title: "Stories"
};

// src/blocks/DocsPage.tsx
var DocsPage = () => /* @__PURE__ */ React50.createElement(React50.Fragment, null, /* @__PURE__ */ React50.createElement(Title2, null), /* @__PURE__ */ React50.createElement(Subtitle2, null), /* @__PURE__ */ React50.createElement(DescriptionContainer, null), /* @__PURE__ */ React50.createElement(Primary, null), /* @__PURE__ */ React50.createElement(ArgsTable2, {
  story: PRIMARY_STORY
}), /* @__PURE__ */ React50.createElement(Stories, null));

// src/blocks/Docs.tsx
var Docs = ({ docsParameter, context }) => {
  const Container = docsParameter.container || DocsContainer;
  const Page = docsParameter.page || DocsPage;
  return /* @__PURE__ */ React51.createElement(Container, {
    context,
    theme: docsParameter.theme
  }, /* @__PURE__ */ React51.createElement(Page, null));
};

// src/blocks/external/ExternalDocs.tsx
import React52, { useRef as useRef5 } from "react";
import { composeConfigs as composeConfigs2 } from "@storybook/store";

// src/blocks/external/ExternalPreview.ts
import { Preview as Preview2 } from "@storybook/preview-web";
import { composeConfigs } from "@storybook/store";
import { Channel } from "@storybook/channels";

// src/blocks/external/ExternalDocsContext.ts
import { DocsContext as DocsContext2 } from "@storybook/preview-web";
var ExternalDocsContext = class extends DocsContext2 {
  constructor(channel, store, renderStoryToElement, processMetaExports) {
    super(channel, store, renderStoryToElement, [], true);
    this.channel = channel;
    this.store = store;
    this.renderStoryToElement = renderStoryToElement;
    this.processMetaExports = processMetaExports;
    this.setMeta = (metaExports) => {
      const csfFile = this.processMetaExports(metaExports);
      this.referenceCSFFile(csfFile, true);
    };
  }
  storyIdByModuleExport(storyExport, metaExports) {
    if (metaExports) {
      const csfFile = this.processMetaExports(metaExports);
      this.referenceCSFFile(csfFile, false);
    }
    return super.storyIdByModuleExport(storyExport);
  }
};

// src/blocks/external/ExternalPreview.ts
var ConstantMap = class {
  constructor(prefix) {
    this.prefix = prefix;
    this.entries = /* @__PURE__ */ new Map();
  }
  get(key) {
    if (!this.entries.has(key)) {
      this.entries.set(key, `${this.prefix}${this.entries.size}`);
    }
    return this.entries.get(key);
  }
};
var ExternalPreview = class extends Preview2 {
  constructor(projectAnnotations) {
    super(new Channel());
    this.projectAnnotations = projectAnnotations;
    this.importPaths = new ConstantMap("./importPath/");
    this.titles = new ConstantMap("title-");
    this.storyIndex = { v: 4, entries: {} };
    this.moduleExportsByImportPath = {};
    this.processMetaExports = (metaExports) => {
      const importPath = this.importPaths.get(metaExports);
      this.moduleExportsByImportPath[importPath] = metaExports;
      const title = metaExports.default.title || this.titles.get(metaExports);
      const csfFile = this.storyStore.processCSFFileWithCache(
        metaExports,
        importPath,
        title
      );
      Object.values(csfFile.stories).forEach(({ id, name }) => {
        this.storyIndex.entries[id] = {
          id,
          importPath,
          title,
          name,
          type: "story"
        };
      });
      this.onStoriesChanged({ storyIndex: this.storyIndex });
      return csfFile;
    };
    this.docsContext = () => {
      return new ExternalDocsContext(
        this.channel,
        this.storyStore,
        this.renderStoryToElement.bind(this),
        this.processMetaExports.bind(this)
      );
    };
    this.initialize({
      getStoryIndex: () => this.storyIndex,
      importFn: (path) => {
        return Promise.resolve(this.moduleExportsByImportPath[path]);
      },
      getProjectAnnotations: () => composeConfigs([
        { parameters: { docs: { inlineStories: true } } },
        this.projectAnnotations
      ])
    });
  }
};

// src/blocks/external/ExternalDocs.tsx
function usePreview(projectAnnotations) {
  const previewRef = useRef5();
  if (!previewRef.current)
    previewRef.current = new ExternalPreview(projectAnnotations);
  return previewRef.current;
}
var ExternalDocs = ({
  projectAnnotationsList,
  children
}) => {
  const projectAnnotations = composeConfigs2(projectAnnotationsList);
  const preview2 = usePreview(projectAnnotations);
  const docsParameter = {
    ...projectAnnotations.parameters?.docs,
    page: () => children
  };
  return /* @__PURE__ */ React52.createElement(Docs, {
    docsParameter,
    context: preview2.docsContext()
  });
};

// src/blocks/external/ExternalDocsContainer.tsx
import React53 from "react";
import { ThemeProvider as ThemeProvider3, themes as themes2, ensure } from "@storybook/theming";
var preview;
var ExternalDocsContainer = ({
  projectAnnotations,
  children
}) => {
  if (!preview)
    preview = new ExternalPreview(projectAnnotations);
  return /* @__PURE__ */ React53.createElement(DocsContext.Provider, {
    value: preview.docsContext()
  }, /* @__PURE__ */ React53.createElement(ThemeProvider3, {
    theme: ensure(themes2.light)
  }, children));
};

// src/blocks/Meta.tsx
import React54, { useContext as useContext11 } from "react";
var Meta = ({ of }) => {
  const context = useContext11(DocsContext);
  console.log(DocsContext, context);
  if (of)
    context.setMeta(of);
  try {
    const primary = context.storyById();
    return /* @__PURE__ */ React54.createElement(Anchor, {
      storyId: primary.id
    });
  } catch (err) {
    return null;
  }
};

// src/blocks/Preview.tsx
import React55 from "react";
import deprecate2 from "util-deprecate";
import { dedent as dedent3 } from "ts-dedent";
var Preview3 = deprecate2(
  (props) => /* @__PURE__ */ React55.createElement(Canvas, {
    ...props
  }),
  dedent3`
    Preview doc block has been renamed to Canvas.

    https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#previewprops-renamed
  `
);

// src/blocks/Props.tsx
import React56 from "react";
import deprecate3 from "util-deprecate";
import { dedent as dedent4 } from "ts-dedent";
var Props = deprecate3(
  (props) => /* @__PURE__ */ React56.createElement(ArgsTable2, {
    ...props
  }),
  dedent4`
    Props doc block has been renamed to ArgsTable.

    https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#previewprops-renamed
  `
);
Props.defaultProps = {
  of: PRIMARY_STORY
};

// src/blocks/Wrapper.tsx
import React57 from "react";
var Wrapper8 = ({ children }) => /* @__PURE__ */ React57.createElement("div", {
  style: { fontFamily: "sans-serif" }
}, children);
export {
  AddContext,
  Anchor,
  AnchorMdx,
  ArgsTable2 as ArgsTable,
  BooleanControl,
  CURRENT_SELECTION,
  Canvas,
  CodeOrSourceMdx,
  ColorControl,
  ColorItem,
  ColorPalette,
  ComponentsTable,
  DateControl,
  DescriptionContainer as Description,
  DescriptionType,
  Docs,
  DocsContainer,
  DocsContext,
  DocsPage,
  DocsStory,
  ExternalDocs,
  ExternalDocsContainer,
  FilesControl,
  HeaderMdx,
  HeadersMdx,
  Heading,
  IconGallery,
  IconItem,
  Meta,
  NoControlsWarning,
  NumberControl,
  ObjectControl,
  OptionsControl,
  PRIMARY_STORY,
  Preview3 as Preview,
  Primary,
  Props,
  ArgsTable as PureArgsTable,
  RangeControl,
  Source2 as Source,
  SourceContainer,
  SourceContext,
  SourceState,
  Stories,
  Story2 as Story,
  StoryTable,
  Subheading,
  Subtitle2 as Subtitle,
  TextControl,
  Title2 as Title,
  Typeset,
  Wrapper8 as Wrapper,
  anchorBlockIdFromId,
  assertIsFn,
  currentSelectionWarning,
  extractComponentArgTypes,
  extractTitle,
  format,
  formatDate,
  formatTime,
  getComponent,
  getDescriptionProps,
  getSourceProps,
  getStoryId2 as getStoryId,
  getStoryProps,
  parse2 as parse,
  parseDate,
  parseTime,
  storyBlockIdFromId
};
