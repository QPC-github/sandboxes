// src/manager.tsx
import { addons, types } from "@storybook/addons";

// src/constants.ts
var ADDON_ID = "storybook/interactions";
var PANEL_ID = `${ADDON_ID}/panel`;

// src/Panel.tsx
import global2 from "global";
import * as React8 from "react";
import { useChannel, useParameter } from "@storybook/api";
import {
  FORCE_REMOUNT,
  IGNORED_EXCEPTION,
  STORY_RENDER_PHASE_CHANGED,
  STORY_THREW_EXCEPTION,
  PLAY_FUNCTION_THREW_EXCEPTION
} from "@storybook/core-events";
import { EVENTS, CallStates as CallStates6 } from "@storybook/instrumenter";

// src/components/InteractionsPanel.tsx
import * as React7 from "react";
import { AddonPanel, Link, Placeholder } from "@storybook/components";
import { CallStates as CallStates5 } from "@storybook/instrumenter";
import { styled as styled6 } from "@storybook/theming";
import { transparentize as transparentize3 } from "polished";

// src/components/Subnav.tsx
import React2 from "react";
import {
  Button,
  IconButton,
  Icons,
  Separator,
  P,
  TooltipNote,
  WithTooltip,
  Bar
} from "@storybook/components";
import { CallStates as CallStates2 } from "@storybook/instrumenter";
import { styled as styled2 } from "@storybook/theming";

// src/components/StatusBadge.tsx
import React from "react";
import { CallStates } from "@storybook/instrumenter";
import { styled, typography } from "@storybook/theming";
var StyledBadge = styled.div(({ theme: theme2, status }) => {
  const backgroundColor = {
    [CallStates.DONE]: theme2.color.positive,
    [CallStates.ERROR]: theme2.color.negative,
    [CallStates.ACTIVE]: theme2.color.warning,
    [CallStates.WAITING]: theme2.color.warning
  }[status];
  return {
    padding: "4px 6px 4px 8px;",
    borderRadius: "4px",
    backgroundColor,
    color: "white",
    fontFamily: typography.fonts.base,
    textTransform: "uppercase",
    fontSize: typography.size.s1,
    letterSpacing: 3,
    fontWeight: typography.weight.bold,
    width: 65,
    textAlign: "center"
  };
});
var StatusBadge = ({ status }) => {
  const badgeText = {
    [CallStates.DONE]: "Pass",
    [CallStates.ERROR]: "Fail",
    [CallStates.ACTIVE]: "Runs",
    [CallStates.WAITING]: "Runs"
  }[status];
  return /* @__PURE__ */ React.createElement(StyledBadge, {
    status
  }, badgeText);
};

// src/components/Subnav.tsx
var SubnavWrapper = styled2.div(({ theme: theme2 }) => ({
  background: theme2.background.app,
  borderBottom: `1px solid ${theme2.appBorderColor}`,
  position: "sticky",
  top: 0,
  zIndex: 1
}));
var StyledSubnav = styled2.nav(({ theme: theme2 }) => ({
  height: 40,
  display: "flex",
  alignItems: "center",
  justifyContent: "space-between",
  paddingLeft: 15
}));
var StyledButton = styled2(Button)(({ theme: theme2 }) => ({
  borderRadius: 4,
  padding: 6,
  color: theme2.textMutedColor,
  "&:not(:disabled)": {
    "&:hover,&:focus-visible": {
      color: theme2.color.secondary
    }
  }
}));
var Note = styled2(TooltipNote)(({ theme: theme2 }) => ({
  fontFamily: theme2.typography.fonts.base
}));
var StyledIconButton = styled2(IconButton)(({ theme: theme2 }) => ({
  color: theme2.color.mediumdark,
  margin: "0 3px"
}));
var StyledSeparator = styled2(Separator)({
  marginTop: 0
});
var StyledLocation = styled2(P)(({ theme: theme2 }) => ({
  color: theme2.textMutedColor,
  justifyContent: "flex-end",
  textAlign: "right",
  whiteSpace: "nowrap",
  marginTop: "auto",
  marginBottom: 1,
  paddingRight: 15,
  fontSize: 13
}));
var Group = styled2.div({
  display: "flex",
  alignItems: "center"
});
var RewindButton = styled2(StyledIconButton)({
  marginLeft: 9
});
var JumpToEndButton = styled2(StyledButton)({
  marginLeft: 9,
  marginRight: 9,
  marginBottom: 1,
  lineHeight: "12px"
});
var RerunButton = styled2(StyledIconButton)(({ theme: theme2, animating, disabled }) => ({
  opacity: disabled ? 0.5 : 1,
  svg: {
    animation: animating && `${theme2.animation.rotate360} 200ms ease-out`
  }
}));
var Subnav = ({
  controls,
  controlStates,
  status,
  storyFileName,
  onScrollToEnd,
  isRerunAnimating,
  setIsRerunAnimating
}) => {
  const buttonText = status === CallStates2.ERROR ? "Scroll to error" : "Scroll to end";
  return /* @__PURE__ */ React2.createElement(SubnavWrapper, null, /* @__PURE__ */ React2.createElement(Bar, null, /* @__PURE__ */ React2.createElement(StyledSubnav, null, /* @__PURE__ */ React2.createElement(Group, null, /* @__PURE__ */ React2.createElement(StatusBadge, {
    status
  }), /* @__PURE__ */ React2.createElement(JumpToEndButton, {
    onClick: onScrollToEnd,
    disabled: !onScrollToEnd
  }, buttonText), /* @__PURE__ */ React2.createElement(StyledSeparator, null), /* @__PURE__ */ React2.createElement(WithTooltip, {
    hasChrome: false,
    tooltip: /* @__PURE__ */ React2.createElement(Note, {
      note: "Go to start"
    })
  }, /* @__PURE__ */ React2.createElement(RewindButton, {
    "aria-label": "Go to start",
    containsIcon: true,
    onClick: controls.start,
    disabled: !controlStates.start
  }, /* @__PURE__ */ React2.createElement(Icons, {
    icon: "rewind"
  }))), /* @__PURE__ */ React2.createElement(WithTooltip, {
    hasChrome: false,
    tooltip: /* @__PURE__ */ React2.createElement(Note, {
      note: "Go back"
    })
  }, /* @__PURE__ */ React2.createElement(StyledIconButton, {
    "aria-label": "Go back",
    containsIcon: true,
    onClick: controls.back,
    disabled: !controlStates.back
  }, /* @__PURE__ */ React2.createElement(Icons, {
    icon: "playback"
  }))), /* @__PURE__ */ React2.createElement(WithTooltip, {
    hasChrome: false,
    tooltip: /* @__PURE__ */ React2.createElement(Note, {
      note: "Go forward"
    })
  }, /* @__PURE__ */ React2.createElement(StyledIconButton, {
    "aria-label": "Go forward",
    containsIcon: true,
    onClick: controls.next,
    disabled: !controlStates.next
  }, /* @__PURE__ */ React2.createElement(Icons, {
    icon: "playnext"
  }))), /* @__PURE__ */ React2.createElement(WithTooltip, {
    hasChrome: false,
    tooltip: /* @__PURE__ */ React2.createElement(Note, {
      note: "Go to end"
    })
  }, /* @__PURE__ */ React2.createElement(StyledIconButton, {
    "aria-label": "Go to end",
    containsIcon: true,
    onClick: controls.end,
    disabled: !controlStates.end
  }, /* @__PURE__ */ React2.createElement(Icons, {
    icon: "fastforward"
  }))), /* @__PURE__ */ React2.createElement(WithTooltip, {
    hasChrome: false,
    tooltip: /* @__PURE__ */ React2.createElement(Note, {
      note: "Rerun"
    })
  }, /* @__PURE__ */ React2.createElement(RerunButton, {
    "aria-label": "Rerun",
    containsIcon: true,
    onClick: controls.rerun,
    onAnimationEnd: () => setIsRerunAnimating(false),
    animating: isRerunAnimating,
    disabled: isRerunAnimating
  }, /* @__PURE__ */ React2.createElement(Icons, {
    icon: "sync"
  })))), storyFileName && /* @__PURE__ */ React2.createElement(Group, null, /* @__PURE__ */ React2.createElement(StyledLocation, null, storyFileName)))));
};

// src/components/Interaction.tsx
import * as React6 from "react";
import { IconButton as IconButton2, Icons as Icons3, TooltipNote as TooltipNote2, WithTooltip as WithTooltip2 } from "@storybook/components";
import { CallStates as CallStates4 } from "@storybook/instrumenter";
import { styled as styled5, typography as typography3 } from "@storybook/theming";
import { transparentize as transparentize2 } from "polished";

// src/components/MatcherResult.tsx
import React4 from "react";
import { styled as styled3, typography as typography2 } from "@storybook/theming";

// src/components/MethodCall.tsx
import { ObjectInspector } from "@devtools-ds/object-inspector";
import { useTheme } from "@storybook/theming";
import React3, { Fragment } from "react";
var colorsLight = {
  base: "#444",
  nullish: "#7D99AA",
  string: "#16B242",
  number: "#5D40D0",
  boolean: "#f41840",
  objectkey: "#698394",
  instance: "#A15C20",
  function: "#EA7509",
  muted: "#7D99AA",
  tag: {
    name: "#6F2CAC",
    suffix: "#1F99E5"
  },
  date: "#459D9C",
  error: {
    name: "#D43900",
    message: "#444"
  },
  regex: {
    source: "#A15C20",
    flags: "#EA7509"
  },
  meta: "#EA7509",
  method: "#0271B6"
};
var colorsDark = {
  base: "#eee",
  nullish: "#aaa",
  string: "#5FE584",
  number: "#6ba5ff",
  boolean: "#ff4191",
  objectkey: "#accfe6",
  instance: "#E3B551",
  function: "#E3B551",
  muted: "#aaa",
  tag: {
    name: "#f57bff",
    suffix: "#8EB5FF"
  },
  date: "#70D4D3",
  error: {
    name: "#f40",
    message: "#eee"
  },
  regex: {
    source: "#FAD483",
    flags: "#E3B551"
  },
  meta: "#FAD483",
  method: "#5EC1FF"
};
var useThemeColors = () => {
  const { base } = useTheme();
  return base === "dark" ? colorsDark : colorsLight;
};
var special = /[^A-Z0-9]/i;
var trimEnd = /[\s.,â€¦]+$/gm;
var ellipsize = (string, maxlength) => {
  if (string.length <= maxlength)
    return string;
  for (let i = maxlength - 1; i >= 0; i -= 1) {
    if (special.test(string[i]) && i > 10) {
      return `${string.slice(0, i).replace(trimEnd, "")}\u2026`;
    }
  }
  return `${string.slice(0, maxlength).replace(trimEnd, "")}\u2026`;
};
var stringify = (value) => {
  try {
    return JSON.stringify(value, null, 1);
  } catch (e) {
    return String(value);
  }
};
var interleave = (nodes, separator) => nodes.flatMap(
  (node, index) => index === nodes.length - 1 ? [node] : [node, React3.cloneElement(separator, { key: `sep${index}` })]
);
var Node = ({
  value,
  nested,
  showObjectInspector,
  callsById,
  ...props
}) => {
  switch (true) {
    case value === null:
      return /* @__PURE__ */ React3.createElement(NullNode, {
        ...props
      });
    case value === void 0:
      return /* @__PURE__ */ React3.createElement(UndefinedNode, {
        ...props
      });
    case Array.isArray(value):
      return /* @__PURE__ */ React3.createElement(ArrayNode, {
        ...props,
        value,
        callsById
      });
    case typeof value === "string":
      return /* @__PURE__ */ React3.createElement(StringNode, {
        ...props,
        value
      });
    case typeof value === "number":
      return /* @__PURE__ */ React3.createElement(NumberNode, {
        ...props,
        value
      });
    case typeof value === "boolean":
      return /* @__PURE__ */ React3.createElement(BooleanNode, {
        ...props,
        value
      });
    case Object.prototype.hasOwnProperty.call(value, "__date__"):
      return /* @__PURE__ */ React3.createElement(DateNode, {
        ...props,
        ...value.__date__
      });
    case Object.prototype.hasOwnProperty.call(value, "__error__"):
      return /* @__PURE__ */ React3.createElement(ErrorNode, {
        ...props,
        ...value.__error__
      });
    case Object.prototype.hasOwnProperty.call(value, "__regexp__"):
      return /* @__PURE__ */ React3.createElement(RegExpNode, {
        ...props,
        ...value.__regexp__
      });
    case Object.prototype.hasOwnProperty.call(value, "__function__"):
      return /* @__PURE__ */ React3.createElement(FunctionNode, {
        ...props,
        ...value.__function__
      });
    case Object.prototype.hasOwnProperty.call(value, "__symbol__"):
      return /* @__PURE__ */ React3.createElement(SymbolNode, {
        ...props,
        ...value.__symbol__
      });
    case Object.prototype.hasOwnProperty.call(value, "__element__"):
      return /* @__PURE__ */ React3.createElement(ElementNode, {
        ...props,
        ...value.__element__
      });
    case Object.prototype.hasOwnProperty.call(value, "__class__"):
      return /* @__PURE__ */ React3.createElement(ClassNode, {
        ...props,
        ...value.__class__
      });
    case Object.prototype.hasOwnProperty.call(value, "__callId__"):
      return /* @__PURE__ */ React3.createElement(MethodCall, {
        call: callsById.get(value.__callId__),
        callsById
      });
    case Object.prototype.toString.call(value) === "[object Object]":
      return /* @__PURE__ */ React3.createElement(ObjectNode, {
        value,
        showInspector: showObjectInspector,
        ...props
      });
    default:
      return /* @__PURE__ */ React3.createElement(OtherNode, {
        value,
        ...props
      });
  }
};
var NullNode = (props) => {
  const colors2 = useThemeColors();
  return /* @__PURE__ */ React3.createElement("span", {
    style: { color: colors2.nullish },
    ...props
  }, "null");
};
var UndefinedNode = (props) => {
  const colors2 = useThemeColors();
  return /* @__PURE__ */ React3.createElement("span", {
    style: { color: colors2.nullish },
    ...props
  }, "undefined");
};
var StringNode = ({ value, ...props }) => {
  const colors2 = useThemeColors();
  return /* @__PURE__ */ React3.createElement("span", {
    style: { color: colors2.string },
    ...props
  }, JSON.stringify(ellipsize(value, 50)));
};
var NumberNode = ({ value, ...props }) => {
  const colors2 = useThemeColors();
  return /* @__PURE__ */ React3.createElement("span", {
    style: { color: colors2.number },
    ...props
  }, value);
};
var BooleanNode = ({ value, ...props }) => {
  const colors2 = useThemeColors();
  return /* @__PURE__ */ React3.createElement("span", {
    style: { color: colors2.boolean },
    ...props
  }, String(value));
};
var ArrayNode = ({
  value,
  nested = false,
  callsById
}) => {
  const colors2 = useThemeColors();
  if (nested) {
    return /* @__PURE__ */ React3.createElement("span", {
      style: { color: colors2.base }
    }, "[\u2026]");
  }
  const nodes = value.slice(0, 3).map((v) => /* @__PURE__ */ React3.createElement(Node, {
    key: JSON.stringify(v),
    value: v,
    nested: true,
    callsById
  }));
  const nodelist = interleave(nodes, /* @__PURE__ */ React3.createElement("span", null, ", "));
  if (value.length <= 3) {
    return /* @__PURE__ */ React3.createElement("span", {
      style: { color: colors2.base }
    }, "[", nodelist, "]");
  }
  return /* @__PURE__ */ React3.createElement("span", {
    style: { color: colors2.base }
  }, "(", value.length, ") [", nodelist, ", \u2026]");
};
var ObjectNode = ({
  showInspector,
  value,
  nested = false
}) => {
  const isDarkMode = useTheme().base === "dark";
  const colors2 = useThemeColors();
  if (showInspector) {
    return /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement(ObjectInspector, {
      id: "interactions-object-inspector",
      data: value,
      includePrototypes: false,
      colorScheme: isDarkMode ? "dark" : "light"
    }));
  }
  if (nested) {
    return /* @__PURE__ */ React3.createElement("span", {
      style: { color: colors2.base }
    }, "{\u2026}");
  }
  const nodelist = interleave(
    Object.entries(value).slice(0, 2).map(([k, v]) => /* @__PURE__ */ React3.createElement(Fragment, {
      key: k
    }, /* @__PURE__ */ React3.createElement("span", {
      style: { color: colors2.objectkey }
    }, k, ": "), /* @__PURE__ */ React3.createElement(Node, {
      value: v,
      nested: true
    }))),
    /* @__PURE__ */ React3.createElement("span", null, ", ")
  );
  if (Object.keys(value).length <= 2) {
    return /* @__PURE__ */ React3.createElement("span", {
      style: { color: colors2.base }
    }, "{ ", nodelist, " }");
  }
  return /* @__PURE__ */ React3.createElement("span", {
    style: { color: colors2.base }
  }, "(", Object.keys(value).length, ") ", "{ ", nodelist, ", \u2026 }");
};
var ClassNode = ({ name }) => {
  const colors2 = useThemeColors();
  return /* @__PURE__ */ React3.createElement("span", {
    style: { color: colors2.instance }
  }, name);
};
var FunctionNode = ({ name }) => {
  const colors2 = useThemeColors();
  return name ? /* @__PURE__ */ React3.createElement("span", {
    style: { color: colors2.function }
  }, name) : /* @__PURE__ */ React3.createElement("span", {
    style: { color: colors2.nullish, fontStyle: "italic" }
  }, "anonymous");
};
var ElementNode = ({
  prefix,
  localName,
  id,
  classNames = [],
  innerText
}) => {
  const name = prefix ? `${prefix}:${localName}` : localName;
  const colors2 = useThemeColors();
  return /* @__PURE__ */ React3.createElement("span", {
    style: { wordBreak: "keep-all" }
  }, /* @__PURE__ */ React3.createElement("span", {
    key: `${name}_lt`,
    style: { color: colors2.muted }
  }, "<"), /* @__PURE__ */ React3.createElement("span", {
    key: `${name}_tag`,
    style: { color: colors2.tag.name }
  }, name), /* @__PURE__ */ React3.createElement("span", {
    key: `${name}_suffix`,
    style: { color: colors2.tag.suffix }
  }, id ? `#${id}` : classNames.reduce((acc, className) => `${acc}.${className}`, "")), /* @__PURE__ */ React3.createElement("span", {
    key: `${name}_gt`,
    style: { color: colors2.muted }
  }, ">"), !id && classNames.length === 0 && innerText && /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement("span", {
    key: `${name}_text`
  }, innerText), /* @__PURE__ */ React3.createElement("span", {
    key: `${name}_close_lt`,
    style: { color: colors2.muted }
  }, "<"), /* @__PURE__ */ React3.createElement("span", {
    key: `${name}_close_tag`,
    style: { color: colors2.tag.name }
  }, "/", name), /* @__PURE__ */ React3.createElement("span", {
    key: `${name}_close_gt`,
    style: { color: colors2.muted }
  }, ">")));
};
var DateNode = ({ value }) => {
  const [date, time, ms] = value.split(/[T.Z]/);
  const colors2 = useThemeColors();
  return /* @__PURE__ */ React3.createElement("span", {
    style: { whiteSpace: "nowrap", color: colors2.date }
  }, date, /* @__PURE__ */ React3.createElement("span", {
    style: { opacity: 0.7 }
  }, "T"), time === "00:00:00" ? /* @__PURE__ */ React3.createElement("span", {
    style: { opacity: 0.7 }
  }, time) : time, ms === "000" ? /* @__PURE__ */ React3.createElement("span", {
    style: { opacity: 0.7 }
  }, ".", ms) : `.${ms}`, /* @__PURE__ */ React3.createElement("span", {
    style: { opacity: 0.7 }
  }, "Z"));
};
var ErrorNode = ({ name, message }) => {
  const colors2 = useThemeColors();
  return /* @__PURE__ */ React3.createElement("span", {
    style: { color: colors2.error.name }
  }, name, message && ": ", message && /* @__PURE__ */ React3.createElement("span", {
    style: { color: colors2.error.message },
    title: message.length > 50 ? message : ""
  }, ellipsize(message, 50)));
};
var RegExpNode = ({ flags, source }) => {
  const colors2 = useThemeColors();
  return /* @__PURE__ */ React3.createElement("span", {
    style: { whiteSpace: "nowrap", color: colors2.regex.flags }
  }, "/", /* @__PURE__ */ React3.createElement("span", {
    style: { color: colors2.regex.source }
  }, source), "/", flags);
};
var SymbolNode = ({ description }) => {
  const colors2 = useThemeColors();
  return /* @__PURE__ */ React3.createElement("span", {
    style: { whiteSpace: "nowrap", color: colors2.instance }
  }, "Symbol(", description && /* @__PURE__ */ React3.createElement("span", {
    style: { color: colors2.meta }
  }, '"', description, '"'), ")");
};
var OtherNode = ({ value }) => {
  const colors2 = useThemeColors();
  return /* @__PURE__ */ React3.createElement("span", {
    style: { color: colors2.meta }
  }, stringify(value));
};
var StepNode = ({ label }) => {
  const colors2 = useThemeColors();
  const { typography: typography4 } = useTheme();
  return /* @__PURE__ */ React3.createElement("span", {
    style: {
      color: colors2.base,
      fontFamily: typography4.fonts.base,
      fontSize: typography4.size.s2 - 1
    }
  }, label);
};
var MethodCall = ({
  call,
  callsById
}) => {
  if (!call)
    return null;
  if (call.method === "step" && call.path.length === 0) {
    return /* @__PURE__ */ React3.createElement(StepNode, {
      label: call.args[0]
    });
  }
  const path = call.path.flatMap((elem, index) => {
    const callId = elem.__callId__;
    return [
      callId ? /* @__PURE__ */ React3.createElement(MethodCall, {
        key: `elem${index}`,
        call: callsById.get(callId),
        callsById
      }) : /* @__PURE__ */ React3.createElement("span", {
        key: `elem${index}`
      }, elem),
      /* @__PURE__ */ React3.createElement("wbr", {
        key: `wbr${index}`
      }),
      /* @__PURE__ */ React3.createElement("span", {
        key: `dot${index}`
      }, ".")
    ];
  });
  const args = call.args.flatMap((arg, index, array) => {
    const node = /* @__PURE__ */ React3.createElement(Node, {
      key: `node${index}`,
      value: arg,
      callsById
    });
    return index < array.length - 1 ? [node, /* @__PURE__ */ React3.createElement("span", {
      key: `comma${index}`
    }, ",\xA0"), /* @__PURE__ */ React3.createElement("wbr", {
      key: `wbr${index}`
    })] : [node];
  });
  const colors2 = useThemeColors();
  return /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement("span", {
    style: { color: colors2.base }
  }, path), /* @__PURE__ */ React3.createElement("span", {
    style: { color: colors2.method }
  }, call.method), /* @__PURE__ */ React3.createElement("span", {
    style: { color: colors2.base }
  }, "(", /* @__PURE__ */ React3.createElement("wbr", null), args, /* @__PURE__ */ React3.createElement("wbr", null), ")"));
};

// src/components/MatcherResult.tsx
var getParams = (line, fromIndex = 0) => {
  for (let i = fromIndex, depth = 1; i < line.length; i += 1) {
    if (line[i] === "(")
      depth += 1;
    else if (line[i] === ")")
      depth -= 1;
    if (depth === 0)
      return line.slice(fromIndex, i);
  }
  return "";
};
var parseValue = (value) => {
  try {
    return value === "undefined" ? void 0 : JSON.parse(value);
  } catch (e) {
    return value;
  }
};
var StyledExpected = styled3.span(({ theme: theme2 }) => ({
  color: theme2.color.positive
}));
var StyledReceived = styled3.span(({ theme: theme2 }) => ({
  color: theme2.color.negative
}));
var Received = ({ value, parsed }) => parsed ? /* @__PURE__ */ React4.createElement(Node, {
  showObjectInspector: true,
  value,
  style: { color: "#D43900" }
}) : /* @__PURE__ */ React4.createElement(StyledReceived, null, value);
var Expected = ({ value, parsed }) => {
  if (parsed) {
    if (typeof value === "string" && value.startsWith("called with")) {
      return /* @__PURE__ */ React4.createElement(React4.Fragment, null, value);
    }
    return /* @__PURE__ */ React4.createElement(Node, {
      showObjectInspector: true,
      value,
      style: { color: "#16B242" }
    });
  }
  return /* @__PURE__ */ React4.createElement(StyledExpected, null, value);
};
var MatcherResult = ({ message }) => {
  const lines = message.split("\n");
  return /* @__PURE__ */ React4.createElement("pre", {
    style: {
      margin: 0,
      padding: "8px 10px 8px 36px",
      fontSize: typography2.size.s1
    }
  }, lines.flatMap((line, index) => {
    if (line.startsWith("expect(")) {
      const received = getParams(line, 7);
      const remainderIndex = received && 7 + received.length;
      const matcher = received && line.slice(remainderIndex).match(/\.(to|last|nth)[A-Z]\w+\(/);
      if (matcher) {
        const expectedIndex = remainderIndex + matcher.index + matcher[0].length;
        const expected = getParams(line, expectedIndex);
        if (expected) {
          return [
            "expect(",
            /* @__PURE__ */ React4.createElement(Received, {
              key: `received_${received}`,
              value: received
            }),
            line.slice(remainderIndex, expectedIndex),
            /* @__PURE__ */ React4.createElement(Expected, {
              key: `expected_${expected}`,
              value: expected
            }),
            line.slice(expectedIndex + expected.length),
            /* @__PURE__ */ React4.createElement("br", {
              key: `br${index}`
            })
          ];
        }
      }
    }
    if (line.match(/^\s*- /)) {
      return [/* @__PURE__ */ React4.createElement(Expected, {
        key: line + index,
        value: line
      }), /* @__PURE__ */ React4.createElement("br", {
        key: `br${index}`
      })];
    }
    if (line.match(/^\s*\+ /)) {
      return [/* @__PURE__ */ React4.createElement(Received, {
        key: line + index,
        value: line
      }), /* @__PURE__ */ React4.createElement("br", {
        key: `br${index}`
      })];
    }
    const [, assertionLabel, assertionValue] = line.match(/^(Expected|Received): (.*)$/) || [];
    if (assertionLabel && assertionValue) {
      return assertionLabel === "Expected" ? [
        "Expected: ",
        /* @__PURE__ */ React4.createElement(Expected, {
          key: line + index,
          value: parseValue(assertionValue),
          parsed: true
        }),
        /* @__PURE__ */ React4.createElement("br", {
          key: `br${index}`
        })
      ] : [
        "Received: ",
        /* @__PURE__ */ React4.createElement(Received, {
          key: line + index,
          value: parseValue(assertionValue),
          parsed: true
        }),
        /* @__PURE__ */ React4.createElement("br", {
          key: `br${index}`
        })
      ];
    }
    const [, prefix, numberOfCalls] = line.match(/(Expected number|Received number|Number) of calls: (\d+)$/i) || [];
    if (prefix && numberOfCalls) {
      return [
        `${prefix} of calls: `,
        /* @__PURE__ */ React4.createElement(Node, {
          key: line + index,
          value: Number(numberOfCalls)
        }),
        /* @__PURE__ */ React4.createElement("br", {
          key: `br${index}`
        })
      ];
    }
    const [, receivedValue] = line.match(/^Received has value: (.+)$/) || [];
    if (receivedValue) {
      return [
        "Received has value: ",
        /* @__PURE__ */ React4.createElement(Node, {
          key: line + index,
          value: parseValue(receivedValue)
        }),
        /* @__PURE__ */ React4.createElement("br", {
          key: `br${index}`
        })
      ];
    }
    return [/* @__PURE__ */ React4.createElement("span", {
      key: line + index
    }, line), /* @__PURE__ */ React4.createElement("br", {
      key: `br${index}`
    })];
  }));
};

// src/components/StatusIcon.tsx
import React5 from "react";
import { Icons as Icons2 } from "@storybook/components";
import { CallStates as CallStates3 } from "@storybook/instrumenter";
import { styled as styled4 } from "@storybook/theming";
import { transparentize } from "polished";

// src/theme.ts
var colors = {
  pure: {
    gray: {
      500: "#CCCCCC"
    }
  }
};
var theme = {
  colors
};
var theme_default = theme;

// src/components/StatusIcon.tsx
var {
  colors: {
    pure: { gray }
  }
} = theme_default;
var StyledStatusIcon = styled4(Icons2)(({ theme: theme2, status }) => {
  const color = {
    [CallStates3.DONE]: theme2.color.positive,
    [CallStates3.ERROR]: theme2.color.negative,
    [CallStates3.ACTIVE]: theme2.color.secondary,
    [CallStates3.WAITING]: transparentize(0.5, gray[500])
  }[status];
  return {
    width: status === CallStates3.WAITING ? 6 : 12,
    height: status === CallStates3.WAITING ? 6 : 12,
    color,
    justifySelf: "center"
  };
});
var StatusIcon = ({ status, className }) => {
  const icon = {
    [CallStates3.DONE]: "check",
    [CallStates3.ERROR]: "stopalt",
    [CallStates3.ACTIVE]: "play",
    [CallStates3.WAITING]: "circle"
  }[status];
  return /* @__PURE__ */ React5.createElement(StyledStatusIcon, {
    "data-testid": `icon-${status}`,
    status,
    icon,
    className
  });
};

// src/components/Interaction.tsx
var MethodCallWrapper = styled5.div(() => ({
  fontFamily: typography3.fonts.mono,
  fontSize: typography3.size.s1,
  overflowWrap: "break-word",
  inlineSize: "calc( 100% - 40px )"
}));
var RowContainer = styled5("div", {
  shouldForwardProp: (prop) => !["call", "pausedAt"].includes(prop.toString())
})(
  ({ theme: theme2, call }) => ({
    position: "relative",
    display: "flex",
    flexDirection: "column",
    borderBottom: `1px solid ${theme2.appBorderColor}`,
    fontFamily: typography3.fonts.base,
    fontSize: 13,
    ...call.status === CallStates4.ERROR && {
      backgroundColor: theme2.base === "dark" ? transparentize2(0.93, theme2.color.negative) : theme2.background.warning
    },
    paddingLeft: call.ancestors.length * 20
  }),
  ({ theme: theme2, call, pausedAt }) => pausedAt === call.id && {
    "&::before": {
      content: '""',
      position: "absolute",
      top: -5,
      zIndex: 1,
      borderTop: "4.5px solid transparent",
      borderLeft: `7px solid ${theme2.color.warning}`,
      borderBottom: "4.5px solid transparent"
    },
    "&::after": {
      content: '""',
      position: "absolute",
      top: -1,
      zIndex: 1,
      width: "100%",
      borderTop: `1.5px solid ${theme2.color.warning}`
    }
  }
);
var RowHeader = styled5.div(({ theme: theme2, isInteractive }) => ({
  display: "flex",
  "&:hover": isInteractive ? {} : { background: theme2.background.hoverable }
}));
var RowLabel = styled5("button", {
  shouldForwardProp: (prop) => !["call"].includes(prop.toString())
})(({ theme: theme2, disabled, call }) => ({
  flex: 1,
  display: "grid",
  background: "none",
  border: 0,
  gridTemplateColumns: "15px 1fr",
  alignItems: "center",
  minHeight: 40,
  margin: 0,
  padding: "8px 15px",
  textAlign: "start",
  cursor: disabled || call.status === CallStates4.ERROR ? "default" : "pointer",
  "&:focus-visible": {
    outline: 0,
    boxShadow: `inset 3px 0 0 0 ${call.status === CallStates4.ERROR ? theme2.color.warning : theme2.color.secondary}`,
    background: call.status === CallStates4.ERROR ? "transparent" : theme2.background.hoverable
  },
  "& > div": {
    opacity: call.status === CallStates4.WAITING ? 0.5 : 1
  }
}));
var RowActions = styled5.div({
  padding: 6
});
var StyledIconButton2 = styled5(IconButton2)(({ theme: theme2 }) => ({
  color: theme2.color.mediumdark,
  margin: "0 3px"
}));
var Note2 = styled5(TooltipNote2)(({ theme: theme2 }) => ({
  fontFamily: theme2.typography.fonts.base
}));
var RowMessage = styled5("div")(({ theme: theme2 }) => ({
  padding: "8px 10px 8px 36px",
  fontSize: typography3.size.s1,
  color: theme2.color.defaultText,
  pre: {
    margin: 0,
    padding: 0
  }
}));
var Exception = ({ exception }) => {
  if (exception.message.startsWith("expect(")) {
    return /* @__PURE__ */ React6.createElement(MatcherResult, {
      ...exception
    });
  }
  const paragraphs = exception.message.split("\n\n");
  const more = paragraphs.length > 1;
  return /* @__PURE__ */ React6.createElement(RowMessage, null, /* @__PURE__ */ React6.createElement("pre", null, paragraphs[0]), more && /* @__PURE__ */ React6.createElement("p", null, "See the full stack trace in the browser console."));
};
var Interaction = ({
  call,
  callsById,
  controls,
  controlStates,
  childCallIds,
  isHidden,
  isCollapsed,
  toggleCollapsed,
  pausedAt
}) => {
  const [isHovered, setIsHovered] = React6.useState(false);
  const isInteractive = !controlStates.goto || !call.interceptable || !!call.ancestors.length;
  if (isHidden)
    return null;
  return /* @__PURE__ */ React6.createElement(RowContainer, {
    call,
    pausedAt
  }, /* @__PURE__ */ React6.createElement(RowHeader, {
    isInteractive
  }, /* @__PURE__ */ React6.createElement(RowLabel, {
    call,
    onClick: () => controls.goto(call.id),
    disabled: isInteractive,
    onMouseEnter: () => controlStates.goto && setIsHovered(true),
    onMouseLeave: () => controlStates.goto && setIsHovered(false)
  }, /* @__PURE__ */ React6.createElement(StatusIcon, {
    status: isHovered ? CallStates4.ACTIVE : call.status
  }), /* @__PURE__ */ React6.createElement(MethodCallWrapper, {
    style: { marginLeft: 6, marginBottom: 1 }
  }, /* @__PURE__ */ React6.createElement(MethodCall, {
    call,
    callsById
  }))), /* @__PURE__ */ React6.createElement(RowActions, null, childCallIds?.length > 0 && /* @__PURE__ */ React6.createElement(WithTooltip2, {
    hasChrome: false,
    tooltip: /* @__PURE__ */ React6.createElement(Note2, {
      note: `${isCollapsed ? "Show" : "Hide"} interactions`
    })
  }, /* @__PURE__ */ React6.createElement(StyledIconButton2, {
    containsIcon: true,
    onClick: toggleCollapsed
  }, /* @__PURE__ */ React6.createElement(Icons3, {
    icon: "listunordered"
  }))))), call.status === CallStates4.ERROR && call.exception?.callId === call.id && /* @__PURE__ */ React6.createElement(Exception, {
    exception: call.exception
  }));
};

// src/components/InteractionsPanel.tsx
var Container = styled6.div(({ theme: theme2, withException }) => ({
  minHeight: "100%",
  background: theme2.background.content,
  ...withException && {
    backgroundColor: theme2.base === "dark" ? transparentize3(0.93, theme2.color.negative) : theme2.background.warning
  }
}));
var CaughtException = styled6.div(({ theme: theme2 }) => ({
  padding: 15,
  fontSize: theme2.typography.size.s2 - 1,
  lineHeight: "19px"
}));
var CaughtExceptionCode = styled6.code(({ theme: theme2 }) => ({
  margin: "0 1px",
  padding: 3,
  fontSize: theme2.typography.size.s1 - 1,
  lineHeight: 1,
  verticalAlign: "top",
  background: "rgba(0, 0, 0, 0.05)",
  border: `1px solid ${theme2.color.border}`,
  borderRadius: 3
}));
var CaughtExceptionTitle = styled6.div({
  paddingBottom: 4,
  fontWeight: "bold"
});
var CaughtExceptionDescription = styled6.p({
  margin: 0,
  padding: "0 0 20px"
});
var CaughtExceptionStack = styled6.pre(({ theme: theme2 }) => ({
  margin: 0,
  padding: 0,
  fontSize: theme2.typography.size.s1 - 1
}));
var InteractionsPanel = React7.memo(
  ({
    calls,
    controls,
    controlStates,
    interactions,
    fileName,
    hasException,
    caughtException,
    isPlaying,
    pausedAt,
    onScrollToEnd,
    endRef,
    isRerunAnimating,
    setIsRerunAnimating,
    ...panelProps
  }) => /* @__PURE__ */ React7.createElement(AddonPanel, {
    ...panelProps
  }, /* @__PURE__ */ React7.createElement(Container, {
    withException: !!caughtException
  }, controlStates.debugger && (interactions.length > 0 || hasException || isRerunAnimating) && /* @__PURE__ */ React7.createElement(Subnav, {
    controls,
    controlStates,
    status: isPlaying ? CallStates5.ACTIVE : hasException ? CallStates5.ERROR : CallStates5.DONE,
    storyFileName: fileName,
    onScrollToEnd,
    isRerunAnimating,
    setIsRerunAnimating
  }), /* @__PURE__ */ React7.createElement("div", null, interactions.map((call) => /* @__PURE__ */ React7.createElement(Interaction, {
    key: call.id,
    call,
    callsById: calls,
    controls,
    controlStates,
    childCallIds: call.childCallIds,
    isHidden: call.isHidden,
    isCollapsed: call.isCollapsed,
    toggleCollapsed: call.toggleCollapsed,
    pausedAt
  }))), caughtException && !caughtException.message?.startsWith("ignoredException") && /* @__PURE__ */ React7.createElement(CaughtException, null, /* @__PURE__ */ React7.createElement(CaughtExceptionTitle, null, "Caught exception in ", /* @__PURE__ */ React7.createElement(CaughtExceptionCode, null, "play"), " function"), /* @__PURE__ */ React7.createElement(CaughtExceptionDescription, null, "This story threw an error after it finished rendering which means your interactions couldn't be run. Go to this story's play function in ", fileName, " to fix."), /* @__PURE__ */ React7.createElement(CaughtExceptionStack, {
    "data-chromatic": "ignore"
  }, caughtException.stack || `${caughtException.name}: ${caughtException.message}`)), /* @__PURE__ */ React7.createElement("div", {
    ref: endRef
  }), !isPlaying && !caughtException && interactions.length === 0 && /* @__PURE__ */ React7.createElement(Placeholder, null, "No interactions found", /* @__PURE__ */ React7.createElement(Link, {
    href: "https://storybook.js.org/docs/react/writing-stories/play-function",
    target: "_blank",
    withArrow: true
  }, "Learn how to add interactions to your story"))))
);

// src/components/TabStatus.tsx
import { styled as styled7 } from "@storybook/theming";
import ReactDOM from "react-dom";
var TabStatus = ({ children }) => {
  const container = window.document.getElementById("tabbutton-interactions");
  return container && ReactDOM.createPortal(children, container);
};
var TabIcon = styled7(StatusIcon)({
  marginLeft: 5
});

// src/Panel.tsx
var INITIAL_CONTROL_STATES = {
  debugger: false,
  start: false,
  back: false,
  goto: false,
  next: false,
  end: false
};
var getInteractions = ({
  log,
  calls,
  collapsed,
  setCollapsed
}) => {
  const callsById = /* @__PURE__ */ new Map();
  const childCallMap = /* @__PURE__ */ new Map();
  return log.map(({ callId, ancestors, status }) => {
    let isHidden = false;
    ancestors.forEach((ancestor) => {
      if (collapsed.has(ancestor))
        isHidden = true;
      childCallMap.set(ancestor, (childCallMap.get(ancestor) || []).concat(callId));
    });
    return { ...calls.get(callId), status, isHidden };
  }).map((call) => {
    const status = call.status === CallStates6.ERROR && callsById.get(call.ancestors.slice(-1)[0])?.status === CallStates6.ACTIVE ? CallStates6.ACTIVE : call.status;
    callsById.set(call.id, { ...call, status });
    return {
      ...call,
      status,
      childCallIds: childCallMap.get(call.id),
      isCollapsed: collapsed.has(call.id),
      toggleCollapsed: () => setCollapsed((ids) => {
        if (ids.has(call.id))
          ids.delete(call.id);
        else
          ids.add(call.id);
        return new Set(ids);
      })
    };
  });
};
var Panel = (props) => {
  const [storyId, setStoryId] = React8.useState();
  const [controlStates, setControlStates] = React8.useState(INITIAL_CONTROL_STATES);
  const [pausedAt, setPausedAt] = React8.useState();
  const [isErrored, setErrored] = React8.useState(false);
  const [isPlaying, setPlaying] = React8.useState(false);
  const [isRerunAnimating, setIsRerunAnimating] = React8.useState(false);
  const [scrollTarget, setScrollTarget] = React8.useState();
  const [collapsed, setCollapsed] = React8.useState(/* @__PURE__ */ new Set());
  const [caughtException, setCaughtException] = React8.useState();
  const [interactions, setInteractions] = React8.useState([]);
  const [interactionsCount, setInteractionsCount] = React8.useState();
  const log = React8.useRef([]);
  const calls = React8.useRef(/* @__PURE__ */ new Map());
  const setCall = ({ status, ...call }) => calls.current.set(call.id, call);
  const endRef = React8.useRef();
  React8.useEffect(() => {
    let observer;
    if (global2.window.IntersectionObserver) {
      observer = new global2.window.IntersectionObserver(
        ([end]) => setScrollTarget(end.isIntersecting ? void 0 : end.target),
        { root: global2.window.document.querySelector("#panel-tab-content") }
      );
      if (endRef.current)
        observer.observe(endRef.current);
    }
    return () => observer?.disconnect();
  }, []);
  const emit = useChannel(
    {
      [EVENTS.CALL]: setCall,
      [EVENTS.SYNC]: (payload) => {
        setControlStates(payload.controlStates);
        setPausedAt(payload.pausedAt);
        setInteractions(
          getInteractions({ log: payload.logItems, calls: calls.current, collapsed, setCollapsed })
        );
        log.current = payload.logItems;
      },
      [STORY_RENDER_PHASE_CHANGED]: (event) => {
        setStoryId(event.storyId);
        setPlaying(event.newPhase === "playing");
        setPausedAt(void 0);
        if (event.newPhase === "rendering") {
          setErrored(false);
          setCaughtException(void 0);
        }
      },
      [STORY_THREW_EXCEPTION]: () => {
        setErrored(true);
      },
      [PLAY_FUNCTION_THREW_EXCEPTION]: (e) => {
        if (e?.message !== IGNORED_EXCEPTION.message)
          setCaughtException(e);
        else
          setCaughtException(void 0);
      }
    },
    [collapsed]
  );
  React8.useEffect(() => {
    setInteractions(
      getInteractions({ log: log.current, calls: calls.current, collapsed, setCollapsed })
    );
  }, [collapsed]);
  React8.useEffect(() => {
    if (isPlaying || isRerunAnimating)
      return;
    setInteractionsCount(interactions.filter(({ method }) => method !== "step").length);
  }, [interactions, isPlaying, isRerunAnimating]);
  const controls = React8.useMemo(
    () => ({
      start: () => emit(EVENTS.START, { storyId }),
      back: () => emit(EVENTS.BACK, { storyId }),
      goto: (callId) => emit(EVENTS.GOTO, { storyId, callId }),
      next: () => emit(EVENTS.NEXT, { storyId }),
      end: () => emit(EVENTS.END, { storyId }),
      rerun: () => {
        setIsRerunAnimating(true);
        emit(FORCE_REMOUNT, { storyId });
      }
    }),
    [storyId]
  );
  const storyFilePath = useParameter("fileName", "");
  const [fileName] = storyFilePath.toString().split("/").slice(-1);
  const scrollToTarget = () => scrollTarget?.scrollIntoView({ behavior: "smooth", block: "end" });
  const showStatus = interactionsCount > 0 || !!caughtException || isRerunAnimating;
  const hasException = !!caughtException || interactions.some((v) => v.status === CallStates6.ERROR);
  if (isErrored) {
    return /* @__PURE__ */ React8.createElement(React8.Fragment, {
      key: "interactions"
    });
  }
  return /* @__PURE__ */ React8.createElement(React8.Fragment, {
    key: "interactions"
  }, /* @__PURE__ */ React8.createElement(TabStatus, null, showStatus && (hasException ? /* @__PURE__ */ React8.createElement(TabIcon, {
    status: CallStates6.ERROR
  }) : ` (${interactionsCount})`)), /* @__PURE__ */ React8.createElement(InteractionsPanel, {
    calls: calls.current,
    controls,
    controlStates,
    interactions,
    fileName,
    hasException,
    caughtException,
    isPlaying,
    pausedAt,
    endRef,
    onScrollToEnd: scrollTarget && scrollToTarget,
    isRerunAnimating,
    setIsRerunAnimating,
    ...props
  }));
};

// src/manager.tsx
addons.register(ADDON_ID, () => {
  addons.add(PANEL_ID, {
    type: types.PANEL,
    title: "Interactions",
    match: ({ viewMode }) => viewMode === "story",
    render: Panel
  });
});
